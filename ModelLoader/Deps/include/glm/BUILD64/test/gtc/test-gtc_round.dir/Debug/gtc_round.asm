; Listing generated by Microsoft (R) Optimizing Compiler Version 19.29.30038.1 

include listing.inc

INCLUDELIB MSVCRTD

CONST	SEGMENT
$SG58545 DB	'invalid argument', 00H
	ORG $+3
$SG58546 DB	'%s', 00H
	ORG $+9
$SG58547 DB	'C:\Program Files (x86)\Microsoft Visual Studio\2019\Comm'
	DB	'unity\VC\Tools\MSVC\14.29.30037\include\xmemory', 00H
	ORG $+8
$SG58548 DB	'C', 00H, ':', 00H, '\', 00H, 'P', 00H, 'r', 00H, 'o', 00H
	DB	'g', 00H, 'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'F', 00H, 'i'
	DB	00H, 'l', 00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H
	DB	'8', 00H, '6', 00H, ')', 00H, '\', 00H, 'M', 00H, 'i', 00H, 'c'
	DB	00H, 'r', 00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H
	DB	' ', 00H, 'V', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l'
	DB	00H, ' ', 00H, 'S', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H
	DB	'o', 00H, '\', 00H, '2', 00H, '0', 00H, '1', 00H, '9', 00H, '\'
	DB	00H, 'C', 00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H
	DB	'i', 00H, 't', 00H, 'y', 00H, '\', 00H, 'V', 00H, 'C', 00H, '\'
	DB	00H, 'T', 00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H
	DB	'M', 00H, 'S', 00H, 'V', 00H, 'C', 00H, '\', 00H, '1', 00H, '4'
	DB	00H, '.', 00H, '2', 00H, '9', 00H, '.', 00H, '3', 00H, '0', 00H
	DB	'0', 00H, '3', 00H, '7', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c'
	DB	00H, 'l', 00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'x', 00H
	DB	'm', 00H, 'e', 00H, 'm', 00H, 'o', 00H, 'r', 00H, 'y', 00H, 00H
	DB	00H
$SG58549 DB	's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H
	DB	'A', 00H, 'l', 00H, 'l', 00H, 'o', 00H, 'c', 00H, 'a', 00H, 't'
	DB	00H, 'e', 00H, '_', 00H, 'm', 00H, 'a', 00H, 'n', 00H, 'u', 00H
	DB	'a', 00H, 'l', 00H, 'l', 00H, 'y', 00H, '_', 00H, 'v', 00H, 'e'
	DB	00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, '_', 00H, 'a', 00H
	DB	'l', 00H, 'i', 00H, 'g', 00H, 'n', 00H, 'e', 00H, 'd', 00H, 00H
	DB	00H
	ORG $+2
$SG58550 DB	'"', 00H, 'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H
	DB	'i', 00H, 'd', 00H, ' ', 00H, 'a', 00H, 'r', 00H, 'g', 00H, 'u'
	DB	00H, 'm', 00H, 'e', 00H, 'n', 00H, 't', 00H, '"', 00H, 00H, 00H
	ORG $+2
$SG55657 DB	'ceilPowerOfTwo_loop: %d clocks', 0aH, 00H
$SG55658 DB	'glm::ceilPowerOfTwo: %d clocks', 0aH, 00H
CONST	ENDS
PUBLIC	__local_stdio_printf_options
PUBLIC	_vfprintf_l
PUBLIC	printf
PUBLIC	?max@?$numeric_limits@_J@std@@SA_JXZ		; std::numeric_limits<__int64>::max
PUBLIC	??2@YAPEAX_KPEAX@Z				; operator new
PUBLIC	??$abs@H@glm@@YAHH@Z				; glm::abs<int>
PUBLIC	??$epsilonEqual@N@glm@@YA_NAEBN00@Z		; glm::epsilonEqual<double>
PUBLIC	??$abs@N@glm@@YANN@Z				; glm::abs<double>
PUBLIC	??0exception@std@@QEAA@QEBDH@Z			; std::exception::exception
PUBLIC	??0exception@std@@QEAA@AEBV01@@Z		; std::exception::exception
PUBLIC	??1exception@std@@UEAA@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UEBAPEBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UEAAPEAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0bad_alloc@std@@AEAA@QEBD@Z			; std::bad_alloc::bad_alloc
PUBLIC	??1bad_alloc@std@@UEAA@XZ			; std::bad_alloc::~bad_alloc
PUBLIC	??0bad_alloc@std@@QEAA@AEBV01@@Z		; std::bad_alloc::bad_alloc
PUBLIC	??_Gbad_alloc@std@@UEAAPEAXI@Z			; std::bad_alloc::`scalar deleting destructor'
PUBLIC	??0bad_array_new_length@std@@QEAA@XZ		; std::bad_array_new_length::bad_array_new_length
PUBLIC	??1bad_array_new_length@std@@UEAA@XZ		; std::bad_array_new_length::~bad_array_new_length
PUBLIC	??0bad_array_new_length@std@@QEAA@AEBV01@@Z	; std::bad_array_new_length::bad_array_new_length
PUBLIC	??_Gbad_array_new_length@std@@UEAAPEAXI@Z	; std::bad_array_new_length::`scalar deleting destructor'
PUBLIC	?_Throw_bad_array_new_length@std@@YAXXZ		; std::_Throw_bad_array_new_length
PUBLIC	?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z ; std::_Default_allocate_traits::_Allocate
PUBLIC	?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z ; std::_Adjust_manually_vector_aligned
PUBLIC	??0_Container_proxy@std@@QEAA@PEAU_Container_base12@1@@Z ; std::_Container_proxy::_Container_proxy
PUBLIC	??0_Container_base12@std@@QEAA@XZ		; std::_Container_base12::_Container_base12
PUBLIC	?_Orphan_all@_Container_base12@std@@QEAAXXZ	; std::_Container_base12::_Orphan_all
PUBLIC	?_Orphan_all_unlocked@_Container_base12@std@@AEAAXXZ ; std::_Container_base12::_Orphan_all_unlocked
PUBLIC	?_Orphan_all_locked@_Container_base12@std@@AEAAXXZ ; std::_Container_base12::_Orphan_all_locked
PUBLIC	?test_int16@isPowerOfTwo@@YAHXZ			; isPowerOfTwo::test_int16
PUBLIC	??$isPowerOfTwo@F@glm@@YA_NF@Z			; glm::isPowerOfTwo<short>
PUBLIC	?test_uint16@isPowerOfTwo@@YAHXZ		; isPowerOfTwo::test_uint16
PUBLIC	??$isPowerOfTwo@G@glm@@YA_NG@Z			; glm::isPowerOfTwo<unsigned short>
PUBLIC	?test_int32@isPowerOfTwo@@YAHXZ			; isPowerOfTwo::test_int32
PUBLIC	??$isPowerOfTwo@H@glm@@YA_NH@Z			; glm::isPowerOfTwo<int>
PUBLIC	?length@?$tvec1@_N$0A@@glm@@SAHXZ		; glm::tvec1<bool,0>::length
PUBLIC	??A?$tvec1@_N$0A@@glm@@QEAAAEA_NH@Z		; glm::tvec1<bool,0>::operator[]
PUBLIC	??A?$tvec1@_N$0A@@glm@@QEBAAEB_NH@Z		; glm::tvec1<bool,0>::operator[]
PUBLIC	??0?$tvec1@_N$0A@@glm@@QEAA@W4ctor@1@@Z		; glm::tvec1<bool,0>::tvec1<bool,0>
PUBLIC	??0?$tvec1@_N$0A@@glm@@QEAA@_N@Z		; glm::tvec1<bool,0>::tvec1<bool,0>
PUBLIC	?length@?$tvec1@H$0A@@glm@@SAHXZ		; glm::tvec1<int,0>::length
PUBLIC	??A?$tvec1@H$0A@@glm@@QEBAAEBHH@Z		; glm::tvec1<int,0>::operator[]
PUBLIC	??0?$tvec1@H$0A@@glm@@QEAA@H@Z			; glm::tvec1<int,0>::tvec1<int,0>
PUBLIC	??$isPowerOfTwo@H$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@H$0A@@0@@Z ; glm::isPowerOfTwo<int,0,glm::tvec1>
PUBLIC	??$equal@_N$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU10@0@Z ; glm::equal<bool,0,glm::tvec1>
PUBLIC	??$all@$0A@Utvec1@glm@@@glm@@YA_NAEBU?$tvec1@_N$0A@@0@@Z ; glm::all<0,glm::tvec1>
PUBLIC	?length@?$tvec2@_N$0A@@glm@@SAHXZ		; glm::tvec2<bool,0>::length
PUBLIC	??A?$tvec2@_N$0A@@glm@@QEAAAEA_NH@Z		; glm::tvec2<bool,0>::operator[]
PUBLIC	??A?$tvec2@_N$0A@@glm@@QEBAAEB_NH@Z		; glm::tvec2<bool,0>::operator[]
PUBLIC	??0?$tvec2@_N$0A@@glm@@QEAA@W4ctor@1@@Z		; glm::tvec2<bool,0>::tvec2<bool,0>
PUBLIC	??0?$tvec2@_N$0A@@glm@@QEAA@_N@Z		; glm::tvec2<bool,0>::tvec2<bool,0>
PUBLIC	?length@?$tvec2@H$0A@@glm@@SAHXZ		; glm::tvec2<int,0>::length
PUBLIC	??A?$tvec2@H$0A@@glm@@QEBAAEBHH@Z		; glm::tvec2<int,0>::operator[]
PUBLIC	??0?$tvec2@H$0A@@glm@@QEAA@H@Z			; glm::tvec2<int,0>::tvec2<int,0>
PUBLIC	??0?$tvec2@H$0A@@glm@@QEAA@HH@Z			; glm::tvec2<int,0>::tvec2<int,0>
PUBLIC	??$isPowerOfTwo@H$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@H$0A@@0@@Z ; glm::isPowerOfTwo<int,0,glm::tvec2>
PUBLIC	??$equal@_N$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU10@0@Z ; glm::equal<bool,0,glm::tvec2>
PUBLIC	??$all@$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@_N$0A@@0@@Z ; glm::all<0,glm::tvec2>
PUBLIC	?length@?$tvec3@_N$0A@@glm@@SAHXZ		; glm::tvec3<bool,0>::length
PUBLIC	??A?$tvec3@_N$0A@@glm@@QEAAAEA_NH@Z		; glm::tvec3<bool,0>::operator[]
PUBLIC	??A?$tvec3@_N$0A@@glm@@QEBAAEB_NH@Z		; glm::tvec3<bool,0>::operator[]
PUBLIC	??0?$tvec3@_N$0A@@glm@@QEAA@W4ctor@1@@Z		; glm::tvec3<bool,0>::tvec3<bool,0>
PUBLIC	??0?$tvec3@_N$0A@@glm@@QEAA@_N@Z		; glm::tvec3<bool,0>::tvec3<bool,0>
PUBLIC	?length@?$tvec3@H$0A@@glm@@SAHXZ		; glm::tvec3<int,0>::length
PUBLIC	??A?$tvec3@H$0A@@glm@@QEBAAEBHH@Z		; glm::tvec3<int,0>::operator[]
PUBLIC	??0?$tvec3@H$0A@@glm@@QEAA@H@Z			; glm::tvec3<int,0>::tvec3<int,0>
PUBLIC	??0?$tvec3@H$0A@@glm@@QEAA@HHH@Z		; glm::tvec3<int,0>::tvec3<int,0>
PUBLIC	??$isPowerOfTwo@H$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@H$0A@@0@@Z ; glm::isPowerOfTwo<int,0,glm::tvec3>
PUBLIC	??$equal@_N$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU10@0@Z ; glm::equal<bool,0,glm::tvec3>
PUBLIC	??$all@$0A@Utvec3@glm@@@glm@@YA_NAEBU?$tvec3@_N$0A@@0@@Z ; glm::all<0,glm::tvec3>
PUBLIC	?length@?$tvec4@_N$0A@@glm@@SAHXZ		; glm::tvec4<bool,0>::length
PUBLIC	??A?$tvec4@_N$0A@@glm@@QEAAAEA_NH@Z		; glm::tvec4<bool,0>::operator[]
PUBLIC	??A?$tvec4@_N$0A@@glm@@QEBAAEB_NH@Z		; glm::tvec4<bool,0>::operator[]
PUBLIC	??0?$tvec4@_N$0A@@glm@@QEAA@W4ctor@1@@Z		; glm::tvec4<bool,0>::tvec4<bool,0>
PUBLIC	??0?$tvec4@_N$0A@@glm@@QEAA@_N@Z		; glm::tvec4<bool,0>::tvec4<bool,0>
PUBLIC	?length@?$tvec4@H$0A@@glm@@SAHXZ		; glm::tvec4<int,0>::length
PUBLIC	??A?$tvec4@H$0A@@glm@@QEBAAEBHH@Z		; glm::tvec4<int,0>::operator[]
PUBLIC	??0?$tvec4@H$0A@@glm@@QEAA@H@Z			; glm::tvec4<int,0>::tvec4<int,0>
PUBLIC	??0?$tvec4@H$0A@@glm@@QEAA@HHHH@Z		; glm::tvec4<int,0>::tvec4<int,0>
PUBLIC	??$isPowerOfTwo@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@H$0A@@0@@Z ; glm::isPowerOfTwo<int,0,glm::tvec4>
PUBLIC	??$equal@_N$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU10@0@Z ; glm::equal<bool,0,glm::tvec4>
PUBLIC	??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::all<0,glm::tvec4>
PUBLIC	?test_uint32@isPowerOfTwo@@YAHXZ		; isPowerOfTwo::test_uint32
PUBLIC	??$isPowerOfTwo@I@glm@@YA_NI@Z			; glm::isPowerOfTwo<unsigned int>
PUBLIC	?test@isPowerOfTwo@@YAHXZ			; isPowerOfTwo::test
PUBLIC	?test_int32@ceilPowerOfTwo_advanced@@YAHXZ	; ceilPowerOfTwo_advanced::test_int32
PUBLIC	??$ceilPowerOfTwo@H@glm@@YAHH@Z			; glm::ceilPowerOfTwo<int>
PUBLIC	?test_uint32@ceilPowerOfTwo_advanced@@YAHXZ	; ceilPowerOfTwo_advanced::test_uint32
PUBLIC	??$ceilPowerOfTwo@I@glm@@YAII@Z			; glm::ceilPowerOfTwo<unsigned int>
PUBLIC	?perf@ceilPowerOfTwo_advanced@@YAHXZ		; ceilPowerOfTwo_advanced::perf
PUBLIC	??0?$allocator@I@std@@QEAA@XZ			; std::allocator<unsigned int>::allocator<unsigned int>
PUBLIC	?deallocate@?$allocator@I@std@@QEAAXQEAI_K@Z	; std::allocator<unsigned int>::deallocate
PUBLIC	?allocate@?$allocator@I@std@@QEAAPEAI_K@Z	; std::allocator<unsigned int>::allocate
PUBLIC	?max_size@?$_Default_allocator_traits@V?$allocator@I@std@@@std@@SA_KAEBV?$allocator@I@2@@Z ; std::_Default_allocator_traits<std::allocator<unsigned int> >::max_size
PUBLIC	??0?$vector@IV?$allocator@I@std@@@std@@QEAA@XZ	; std::vector<unsigned int,std::allocator<unsigned int> >::vector<unsigned int,std::allocator<unsigned int> >
PUBLIC	??1?$vector@IV?$allocator@I@std@@@std@@QEAA@XZ	; std::vector<unsigned int,std::allocator<unsigned int> >::~vector<unsigned int,std::allocator<unsigned int> >
PUBLIC	?resize@?$vector@IV?$allocator@I@std@@@std@@QEAAX_K@Z ; std::vector<unsigned int,std::allocator<unsigned int> >::resize
PUBLIC	?size@?$vector@IV?$allocator@I@std@@@std@@QEBA_KXZ ; std::vector<unsigned int,std::allocator<unsigned int> >::size
PUBLIC	?max_size@?$vector@IV?$allocator@I@std@@@std@@QEBA_KXZ ; std::vector<unsigned int,std::allocator<unsigned int> >::max_size
PUBLIC	?capacity@?$vector@IV?$allocator@I@std@@@std@@QEBA_KXZ ; std::vector<unsigned int,std::allocator<unsigned int> >::capacity
PUBLIC	??A?$vector@IV?$allocator@I@std@@@std@@QEAAAEAI_K@Z ; std::vector<unsigned int,std::allocator<unsigned int> >::operator[]
PUBLIC	?_Ufill@?$vector@IV?$allocator@I@std@@@std@@AEAAPEAIPEAI_KU_Value_init_tag@2@@Z ; std::vector<unsigned int,std::allocator<unsigned int> >::_Ufill
PUBLIC	?_Umove_if_noexcept1@?$vector@IV?$allocator@I@std@@@std@@AEAAXPEAI00U?$integral_constant@_N$00@2@@Z ; std::vector<unsigned int,std::allocator<unsigned int> >::_Umove_if_noexcept1
PUBLIC	?_Umove_if_noexcept@?$vector@IV?$allocator@I@std@@@std@@AEAAXPEAI00@Z ; std::vector<unsigned int,std::allocator<unsigned int> >::_Umove_if_noexcept
PUBLIC	?_Destroy@?$vector@IV?$allocator@I@std@@@std@@AEAAXPEAI0@Z ; std::vector<unsigned int,std::allocator<unsigned int> >::_Destroy
PUBLIC	?_Calculate_growth@?$vector@IV?$allocator@I@std@@@std@@AEBA_K_K@Z ; std::vector<unsigned int,std::allocator<unsigned int> >::_Calculate_growth
PUBLIC	?_Change_array@?$vector@IV?$allocator@I@std@@@std@@AEAAXQEAI_K1@Z ; std::vector<unsigned int,std::allocator<unsigned int> >::_Change_array
PUBLIC	?_Tidy@?$vector@IV?$allocator@I@std@@@std@@AEAAXXZ ; std::vector<unsigned int,std::allocator<unsigned int> >::_Tidy
PUBLIC	?_Xlength@?$vector@IV?$allocator@I@std@@@std@@CAXXZ ; std::vector<unsigned int,std::allocator<unsigned int> >::_Xlength
PUBLIC	?_Orphan_range_unlocked@?$vector@IV?$allocator@I@std@@@std@@AEBAXPEAI0@Z ; std::vector<unsigned int,std::allocator<unsigned int> >::_Orphan_range_unlocked
PUBLIC	?_Orphan_range_locked@?$vector@IV?$allocator@I@std@@@std@@AEBAXPEAI0@Z ; std::vector<unsigned int,std::allocator<unsigned int> >::_Orphan_range_locked
PUBLIC	?_Orphan_range@?$vector@IV?$allocator@I@std@@@std@@AEBAXPEAI0@Z ; std::vector<unsigned int,std::allocator<unsigned int> >::_Orphan_range
PUBLIC	?_Getal@?$vector@IV?$allocator@I@std@@@std@@AEAAAEAV?$allocator@I@2@XZ ; std::vector<unsigned int,std::allocator<unsigned int> >::_Getal
PUBLIC	?_Getal@?$vector@IV?$allocator@I@std@@@std@@AEBAAEBV?$allocator@I@2@XZ ; std::vector<unsigned int,std::allocator<unsigned int> >::_Getal
PUBLIC	??0?$_Vector_val@U?$_Simple_types@I@std@@@std@@QEAA@XZ ; std::_Vector_val<std::_Simple_types<unsigned int> >::_Vector_val<std::_Simple_types<unsigned int> >
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@I@std@@V?$_Vector_val@U?$_Simple_types@I@std@@@2@$00@std@@QEAAAEAV?$allocator@I@2@XZ ; std::_Compressed_pair<std::allocator<unsigned int>,std::_Vector_val<std::_Simple_types<unsigned int> >,1>::_Get_first
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@I@std@@V?$_Vector_val@U?$_Simple_types@I@std@@@2@$00@std@@QEBAAEBV?$allocator@I@2@XZ ; std::_Compressed_pair<std::allocator<unsigned int>,std::_Vector_val<std::_Simple_types<unsigned int> >,1>::_Get_first
PUBLIC	??$ceilPowerOfTwo_loop@I@ceilPowerOfTwo_advanced@@YAII@Z ; ceilPowerOfTwo_advanced::ceilPowerOfTwo_loop<unsigned int>
PUBLIC	?test@ceilPowerOfTwo_advanced@@YAHXZ		; ceilPowerOfTwo_advanced::test
PUBLIC	?test@roundPowerOfTwo@@YAHXZ			; roundPowerOfTwo::test
PUBLIC	??$roundPowerOfTwo@I@glm@@YAII@Z		; glm::roundPowerOfTwo<unsigned int>
PUBLIC	?test@floorPowerOfTwo@@YAHXZ			; floorPowerOfTwo::test
PUBLIC	??$floorPowerOfTwo@I@glm@@YAII@Z		; glm::floorPowerOfTwo<unsigned int>
PUBLIC	?test@ceilPowerOfTwo@@YAHXZ			; ceilPowerOfTwo::test
PUBLIC	?test_float@floorMultiple@@YAHXZ		; floorMultiple::test_float
PUBLIC	??$floorMultiple@N@glm@@YANNN@Z			; glm::floorMultiple<double>
PUBLIC	?test@floorMultiple@@YAHXZ			; floorMultiple::test
PUBLIC	?test_float@ceilMultiple@@YAHXZ			; ceilMultiple::test_float
PUBLIC	??$ceilMultiple@N@glm@@YANNN@Z			; glm::ceilMultiple<double>
PUBLIC	?test_int@ceilMultiple@@YAHXZ			; ceilMultiple::test_int
PUBLIC	??$ceilMultiple@H@glm@@YAHHH@Z			; glm::ceilMultiple<int>
PUBLIC	?test@ceilMultiple@@YAHXZ			; ceilMultiple::test
PUBLIC	main
PUBLIC	??$_Resize@U_Value_init_tag@std@@@?$vector@IV?$allocator@I@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z ; std::vector<unsigned int,std::allocator<unsigned int> >::_Resize<std::_Value_init_tag>
PUBLIC	?allocate@?$allocator@U_Container_proxy@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z ; std::allocator<std::_Container_proxy>::allocate
PUBLIC	??$?0I@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@I@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><unsigned int>
PUBLIC	??$exchange@PEAU_Container_proxy@std@@$$T@std@@YAPEAU_Container_proxy@0@AEAPEAU10@$$QEA$$T@Z ; std::exchange<std::_Container_proxy *,std::nullptr_t>
PUBLIC	??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >
PUBLIC	??$?0$$V@?$_Compressed_pair@V?$allocator@I@std@@V?$_Vector_val@U?$_Simple_types@I@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<unsigned int>,std::_Vector_val<std::_Simple_types<unsigned int> >,1>::_Compressed_pair<std::allocator<unsigned int>,std::_Vector_val<std::_Simple_types<unsigned int> >,1><>
PUBLIC	??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QEAAX$$QEAV?$allocator@U_Container_proxy@std@@@1@@Z ; std::_Container_base12::_Alloc_proxy<std::allocator<std::_Container_proxy> >
PUBLIC	??$_Destroy_range@V?$allocator@I@std@@@std@@YAXPEAIQEAIAEAV?$allocator@I@0@@Z ; std::_Destroy_range<std::allocator<unsigned int> >
PUBLIC	??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z	; std::_Deallocate<16,0>
PUBLIC	?call@?$compute_abs@N$00@detail@glm@@SANN@Z	; glm::detail::compute_abs<double,1>::call
PUBLIC	??$abs@F@glm@@YAFF@Z				; glm::abs<short>
PUBLIC	??$abs@G@glm@@YAGG@Z				; glm::abs<unsigned short>
PUBLIC	??$abs@H$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@H$0A@@0@AEBU10@@Z ; glm::abs<int,0,glm::tvec1>
PUBLIC	??$?GH$0A@@glm@@YA?AU?$tvec1@H$0A@@0@AEBU10@H@Z	; glm::operator-<int,0>
PUBLIC	??$?IH$0A@@glm@@YA?AU?$tvec1@H$0A@@0@AEBU10@0@Z	; glm::operator&<int,0>
PUBLIC	??$equal@H$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@H$0A@@0@0@Z ; glm::equal<int,0,glm::tvec1>
PUBLIC	??$abs@H$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@H$0A@@0@AEBU10@@Z ; glm::abs<int,0,glm::tvec2>
PUBLIC	??$?GH$0A@@glm@@YA?AU?$tvec2@H$0A@@0@AEBU10@H@Z	; glm::operator-<int,0>
PUBLIC	??$?IH$0A@@glm@@YA?AU?$tvec2@H$0A@@0@AEBU10@0@Z	; glm::operator&<int,0>
PUBLIC	??$equal@H$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@H$0A@@0@0@Z ; glm::equal<int,0,glm::tvec2>
PUBLIC	??$abs@H$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@H$0A@@0@AEBU10@@Z ; glm::abs<int,0,glm::tvec3>
PUBLIC	??$?GH$0A@@glm@@YA?AU?$tvec3@H$0A@@0@AEBU10@H@Z	; glm::operator-<int,0>
PUBLIC	??$?IH$0A@@glm@@YA?AU?$tvec3@H$0A@@0@AEBU10@0@Z	; glm::operator&<int,0>
PUBLIC	??$equal@H$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@H$0A@@0@0@Z ; glm::equal<int,0,glm::tvec3>
PUBLIC	??$abs@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@H$0A@@0@AEBU10@@Z ; glm::abs<int,0,glm::tvec4>
PUBLIC	??$?GH$0A@@glm@@YA?AU?$tvec4@H$0A@@0@AEBU10@H@Z	; glm::operator-<int,0>
PUBLIC	??$?IH$0A@@glm@@YA?AU?$tvec4@H$0A@@0@AEBU10@0@Z	; glm::operator&<int,0>
PUBLIC	??$equal@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@H$0A@@0@0@Z ; glm::equal<int,0,glm::tvec4>
PUBLIC	??$abs@I@glm@@YAII@Z				; glm::abs<unsigned int>
PUBLIC	?call@?$compute_ceilPowerOfTwo@H$0A@Utvec1@glm@@$00@detail@glm@@SA?AU?$tvec1@H$0A@@3@AEBU43@@Z ; glm::detail::compute_ceilPowerOfTwo<int,0,glm::tvec1,1>::call
PUBLIC	?call@?$compute_ceilPowerOfTwo@I$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@I$0A@@3@AEBU43@@Z ; glm::detail::compute_ceilPowerOfTwo<unsigned int,0,glm::tvec1,0>::call
PUBLIC	??0?$tvec1@I$0A@@glm@@QEAA@I@Z			; glm::tvec1<unsigned int,0>::tvec1<unsigned int,0>
PUBLIC	??$highestBitValue@I@ceilPowerOfTwo_advanced@@YAII@Z ; ceilPowerOfTwo_advanced::highestBitValue<unsigned int>
PUBLIC	??$findMSB@I@glm@@YAHI@Z			; glm::findMSB<unsigned int>
PUBLIC	??$call@N@?$compute_floorMultiple@$00$00@detail@glm@@SANNN@Z ; glm::detail::compute_floorMultiple<1,1>::call<double>
PUBLIC	??$call@N@?$compute_ceilMultiple@$00$00@detail@glm@@SANNN@Z ; glm::detail::compute_ceilMultiple<1,1>::call<double>
PUBLIC	??$call@H@?$compute_ceilMultiple@$0A@$00@detail@glm@@SAHHH@Z ; glm::detail::compute_ceilMultiple<0,1>::call<int>
PUBLIC	??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@IV?$allocator@I@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z ; std::vector<unsigned int,std::allocator<unsigned int> >::_Resize_reallocate<std::_Value_init_tag>
PUBLIC	??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z ; std::_Deallocate_plain<std::allocator<std::_Container_proxy> >
PUBLIC	??$_Unfancy@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@PEAU10@@Z ; std::_Unfancy<std::_Container_proxy>
PUBLIC	??$_Construct_in_place@U_Container_proxy@std@@PEAU_Container_base12@2@@std@@YAXAEAU_Container_proxy@0@$$QEAPEAU_Container_base12@0@@Z ; std::_Construct_in_place<std::_Container_proxy,std::_Container_base12 *>
PUBLIC	??$?GI$0A@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@I@Z	; glm::operator-<unsigned int,0>
PUBLIC	??$?5I$0A@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@I@Z	; glm::operator>><unsigned int,0>
PUBLIC	??$?UI$0A@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@0@Z	; glm::operator|<unsigned int,0>
PUBLIC	?call@?$compute_ceilShift@I$0A@Utvec1@glm@@$00@detail@glm@@SA?AU?$tvec1@I$0A@@3@AEBU43@I@Z ; glm::detail::compute_ceilShift<unsigned int,0,glm::tvec1,1>::call
PUBLIC	?call@?$compute_ceilShift@I$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@I$0A@@3@AEBU43@I@Z ; glm::detail::compute_ceilShift<unsigned int,0,glm::tvec1,0>::call
PUBLIC	??$?HI$0A@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@I@Z	; glm::operator+<unsigned int,0>
PUBLIC	??$sign@H$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@H$0A@@0@AEBU10@@Z ; glm::sign<int,0,glm::tvec1>
PUBLIC	??$?5H$0A@@glm@@YA?AU?$tvec1@H$0A@@0@AEBU10@H@Z	; glm::operator>><int,0>
PUBLIC	??$?UH$0A@@glm@@YA?AU?$tvec1@H$0A@@0@AEBU10@0@Z	; glm::operator|<int,0>
PUBLIC	?call@?$compute_ceilShift@H$0A@Utvec1@glm@@$00@detail@glm@@SA?AU?$tvec1@H$0A@@3@AEBU43@H@Z ; glm::detail::compute_ceilShift<int,0,glm::tvec1,1>::call
PUBLIC	?call@?$compute_ceilShift@H$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@H$0A@@3@AEBU43@H@Z ; glm::detail::compute_ceilShift<int,0,glm::tvec1,0>::call
PUBLIC	??$?HH$0A@@glm@@YA?AU?$tvec1@H$0A@@0@AEBU10@H@Z	; glm::operator+<int,0>
PUBLIC	??$?DH$0A@@glm@@YA?AU?$tvec1@H$0A@@0@AEBU10@0@Z	; glm::operator*<int,0>
PUBLIC	??$_Get_size_of_n@$0BA@@std@@YA_K_K@Z		; std::_Get_size_of_n<16>
PUBLIC	??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z ; std::_Allocate<16,std::_Default_allocate_traits,0>
PUBLIC	??$_Uninitialized_value_construct_n@V?$allocator@I@std@@@std@@YAPEAIPEAI_KAEAV?$allocator@I@0@@Z ; std::_Uninitialized_value_construct_n<std::allocator<unsigned int> >
PUBLIC	?call@?$compute_abs@F$00@detail@glm@@SAFF@Z	; glm::detail::compute_abs<short,1>::call
PUBLIC	?call@?$compute_abs@G$0A@@detail@glm@@SAGG@Z	; glm::detail::compute_abs<unsigned short,0>::call
PUBLIC	?call@?$compute_abs_vector@H$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@H$0A@@3@AEBU43@@Z ; glm::detail::compute_abs_vector<int,0,glm::tvec1,0>::call
PUBLIC	?call@?$compute_abs_vector@H$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@H$0A@@3@AEBU43@@Z ; glm::detail::compute_abs_vector<int,0,glm::tvec2,0>::call
PUBLIC	?call@?$compute_abs_vector@H$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@H$0A@@3@AEBU43@@Z ; glm::detail::compute_abs_vector<int,0,glm::tvec3,0>::call
PUBLIC	?call@?$compute_abs_vector@H$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@H$0A@@3@AEBU43@@Z ; glm::detail::compute_abs_vector<int,0,glm::tvec4,0>::call
PUBLIC	??$?ZH@?$tvec4@H$0A@@glm@@QEAAAEAU01@H@Z	; glm::tvec4<int,0>::operator-=<int>
PUBLIC	??$?_4H@?$tvec4@H$0A@@glm@@QEAAAEAU01@AEBU01@@Z	; glm::tvec4<int,0>::operator&=<int>
PUBLIC	?call@?$compute_abs@I$0A@@detail@glm@@SAII@Z	; glm::detail::compute_abs<unsigned int,0>::call
PUBLIC	??$findMSB@I$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@H$0A@@0@AEBU?$tvec1@I$0A@@0@@Z ; glm::findMSB<unsigned int,0,glm::tvec1>
PUBLIC	?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@2@QEAU_Container_proxy@2@_K@Z ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate
PUBLIC	??$addressof@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@AEAU10@@Z ; std::addressof<std::_Container_proxy>
PUBLIC	??$_Voidify_iter@PEAU_Container_proxy@std@@@std@@YAPEAXPEAU_Container_proxy@0@@Z ; std::_Voidify_iter<std::_Container_proxy *>
PUBLIC	??$forward@PEAU_Container_base12@std@@@std@@YA$$QEAPEAU_Container_base12@0@AEAPEAU10@@Z ; std::forward<std::_Container_base12 *>
PUBLIC	?call@?$compute_sign@H$0A@Utvec1@glm@@$0A@$0A@@detail@glm@@SA?AU?$tvec1@H$0A@@3@AEBU43@@Z ; glm::detail::compute_sign<int,0,glm::tvec1,0,0>::call
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	??$_Unfancy@I@std@@YAPEAIPEAI@Z			; std::_Unfancy<unsigned int>
PUBLIC	??$_Zero_range@PEAI@std@@YAPEAIQEAI0@Z		; std::_Zero_range<unsigned int *>
PUBLIC	??0?$_Uninitialized_backout_al@V?$allocator@I@std@@@std@@QEAA@PEAIAEAV?$allocator@I@1@@Z ; std::_Uninitialized_backout_al<std::allocator<unsigned int> >::_Uninitialized_backout_al<std::allocator<unsigned int> >
PUBLIC	??1?$_Uninitialized_backout_al@V?$allocator@I@std@@@std@@QEAA@XZ ; std::_Uninitialized_backout_al<std::allocator<unsigned int> >::~_Uninitialized_backout_al<std::allocator<unsigned int> >
PUBLIC	?_Release@?$_Uninitialized_backout_al@V?$allocator@I@std@@@std@@QEAAPEAIXZ ; std::_Uninitialized_backout_al<std::allocator<unsigned int> >::_Release
PUBLIC	??$_Emplace_back@$$V@?$_Uninitialized_backout_al@V?$allocator@I@std@@@std@@QEAAXXZ ; std::_Uninitialized_backout_al<std::allocator<unsigned int> >::_Emplace_back<>
PUBLIC	??$lessThan@H$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@H$0A@@0@0@Z ; glm::lessThan<int,0,glm::tvec1>
PUBLIC	??$?0_N$0A@@?$tvec1@H$0A@@glm@@QEAA@AEBU?$tvec1@_N$0A@@1@@Z ; glm::tvec1<int,0>::tvec1<int,0><bool,0>
PUBLIC	??$?GH$0A@@glm@@YA?AU?$tvec1@H$0A@@0@AEBU10@0@Z	; glm::operator-<int,0>
PUBLIC	?call@?$functor1@HH$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@H$0A@@3@P6AHH@ZAEBU43@@Z ; glm::detail::functor1<int,int,0,glm::tvec4>::call
PUBLIC	?call@?$functor1@HH$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@H$0A@@3@P6AHH@ZAEBU43@@Z ; glm::detail::functor1<int,int,0,glm::tvec3>::call
PUBLIC	?call@?$functor1@HH$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@H$0A@@3@P6AHH@ZAEBU43@@Z ; glm::detail::functor1<int,int,0,glm::tvec2>::call
PUBLIC	?call@?$functor1@HH$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@H$0A@@3@P6AHH@ZAEBU43@@Z ; glm::detail::functor1<int,int,0,glm::tvec1>::call
PUBLIC	??$min@_K@std@@YAAEB_KAEB_K0@Z			; std::min<unsigned __int64>
PUBLIC	??$_Get_size_of_n@$03@std@@YA_K_K@Z		; std::_Get_size_of_n<4>
PUBLIC	??$_Uninitialized_move@PEAIV?$allocator@I@std@@@std@@YAPEAIQEAI0PEAIAEAV?$allocator@I@0@@Z ; std::_Uninitialized_move<unsigned int *,std::allocator<unsigned int> >
PUBLIC	?call@?$compute_vec4_sub@H$0A@$0A@@detail@glm@@SA?AU?$tvec4@H$0A@@3@AEBU43@0@Z ; glm::detail::compute_vec4_sub<int,0,0>::call
PUBLIC	?call@?$compute_vec4_and@H$0A@$0?0$0CA@$0A@@detail@glm@@SA?AU?$tvec4@H$0A@@3@AEBU43@0@Z ; glm::detail::compute_vec4_and<int,0,-1,32,0>::call
PUBLIC	?call@?$compute_findMSB_vec@I$0A@Utvec1@glm@@$0CA@@detail@glm@@SA?AU?$tvec1@H$0A@@3@AEBU?$tvec1@I$0A@@3@@Z ; glm::detail::compute_findMSB_vec<unsigned int,0,glm::tvec1,32>::call
PUBLIC	??$_To_address@PEAI@std@@YA?A_PAEBQEAI@Z	; std::_To_address<unsigned int *>
PUBLIC	??$construct@I$$V@?$_Default_allocator_traits@V?$allocator@I@std@@@std@@SAXAEAV?$allocator@I@1@QEAI@Z ; std::_Default_allocator_traits<std::allocator<unsigned int> >::construct<unsigned int>
PUBLIC	??$_Get_unwrapped@AEBQEAI@std@@YA?A_TAEBQEAI@Z	; std::_Get_unwrapped<unsigned int * const &>
PUBLIC	??$move@AEAI@std@@YA$$QEAIAEAI@Z		; std::move<unsigned int &>
PUBLIC	??$_Copy_memmove@PEAIPEAI@std@@YAPEAIPEAI00@Z	; std::_Copy_memmove<unsigned int *,unsigned int *>
PUBLIC	??$_Emplace_back@I@?$_Uninitialized_backout_al@V?$allocator@I@std@@@std@@QEAAX$$QEAI@Z ; std::_Uninitialized_backout_al<std::allocator<unsigned int> >::_Emplace_back<unsigned int>
PUBLIC	?call@?$functor1@HI$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@H$0A@@3@P6AHI@ZAEBU?$tvec1@I$0A@@3@@Z ; glm::detail::functor1<int,unsigned int,0,glm::tvec1>::call
PUBLIC	??$compute_findMSB_32@I@detail@glm@@YAHI@Z	; glm::detail::compute_findMSB_32<unsigned int>
PUBLIC	??$_Voidify_iter@PEAI@std@@YAPEAXPEAI@Z		; std::_Voidify_iter<unsigned int *>
PUBLIC	??$forward@I@std@@YA$$QEAIAEAI@Z		; std::forward<unsigned int>
PUBLIC	??$construct@II@?$_Default_allocator_traits@V?$allocator@I@std@@@std@@SAXAEAV?$allocator@I@1@QEAI$$QEAI@Z ; std::_Default_allocator_traits<std::allocator<unsigned int> >::construct<unsigned int,unsigned int>
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_7bad_array_new_length@std@@6B@		; std::bad_array_new_length::`vftable'
PUBLIC	??_C@_0BF@KINCDENJ@bad?5array?5new?5length@	; `string'
PUBLIC	_TI3?AVbad_array_new_length@std@@
PUBLIC	_CTA3?AVbad_array_new_length@std@@
PUBLIC	??_R0?AVbad_array_new_length@std@@@8		; std::bad_array_new_length `RTTI Type Descriptor'
PUBLIC	_CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QEAA@AEBV01@@Z24
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	_CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QEAA@AEBV01@@Z24
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	_CT??_R0?AVexception@std@@@8??0exception@std@@QEAA@AEBV01@@Z24
PUBLIC	??_C@_0BB@FCMFBGOM@invalid?5argument@		; `string'
PUBLIC	??_C@_02DKCKIIND@?$CFs@				; `string'
PUBLIC	??_C@_0GI@KDIDHNIL@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@ ; `string'
PUBLIC	??_C@_1NA@FOAKNOEL@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ ; `string'
PUBLIC	??_C@_1EK@NIFDJFDG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAd?$AAj?$AAu?$AAs?$AAt?$AA_?$AAm?$AAa@ ; `string'
PUBLIC	??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@ ; `string'
PUBLIC	??_C@_0BO@PFKOHNJC@vector?5subscript?5out?5of?5range@ ; `string'
PUBLIC	??_C@_0GH@IJJCCHP@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@ ; `string'
PUBLIC	??_C@_1MO@MBPFCBOF@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ ; `string'
PUBLIC	??_C@_1JG@ILDNFCDK@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAu?$AAn?$AAs@ ; `string'
PUBLIC	??_C@_1EA@LEKOKFNB@?$AA?$CC?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi@ ; `string'
PUBLIC	??_C@_1IK@DJDECODN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAs?$AA4?$AA0?$AA0?$AA2?$AA6@ ; `string'
PUBLIC	??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@ ; `string'
PUBLIC	??_C@_1IK@NGAJILNN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAs?$AA4?$AA0?$AA0?$AA2?$AA6@ ; `string'
PUBLIC	??_C@_1KE@MOONLNIK@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAs?$AA4?$AA0?$AA0?$AA2?$AA6@ ; `string'
PUBLIC	??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@ ; `string'
PUBLIC	??_C@_1IK@EOKKPMMN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAs?$AA4?$AA0?$AA0?$AA2?$AA6@ ; `string'
PUBLIC	??_C@_1IK@KCJBGCFC@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAs?$AA4?$AA0?$AA0?$AA2?$AA6@ ; `string'
PUBLIC	??_C@_0BA@FOIKENOD@vector?5too?5long@		; `string'
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_array_new_length@std@@6B@		; std::bad_array_new_length::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_array_new_length@std@@8	; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	__real@0000000000000000
PUBLIC	__real@3f1a36e2eb1c432d
PUBLIC	__real@3fd3333333333333
PUBLIC	__real@400a666666666666
PUBLIC	__real@400b333333333333
PUBLIC	__real@400ccccccccccccd
PUBLIC	__real@bff3333333333333
PUBLIC	__real@bff6666666666666
PUBLIC	__real@bff8000000000000
PUBLIC	__xmm@80000000000000008000000000000000
EXTRN	??2@YAPEAX_K@Z:PROC				; operator new
EXTRN	??3@YAXPEAX_K@Z:PROC				; operator delete
EXTRN	__imp__invalid_parameter:PROC
EXTRN	__imp__wassert:PROC
EXTRN	fmod:PROC
EXTRN	__imp___acrt_iob_func:PROC
EXTRN	__imp___stdio_common_vfprintf:PROC
EXTRN	memmove:PROC
EXTRN	memset:PROC
EXTRN	__imp__CrtDbgReport:PROC
EXTRN	__imp_??0_Lockit@std@@QEAA@H@Z:PROC
EXTRN	__imp_??1_Lockit@std@@QEAA@XZ:PROC
EXTRN	__std_exception_copy:PROC
EXTRN	__std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UEAAPEAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_Ebad_alloc@std@@UEAAPEAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	??_Ebad_array_new_length@std@@UEAAPEAXI@Z:PROC	; std::bad_array_new_length::`vector deleting destructor'
EXTRN	?_Xlength_error@std@@YAXPEBD@Z:PROC		; std::_Xlength_error
EXTRN	__imp_clock:PROC
EXTRN	_CxxThrowException:PROC
EXTRN	_RTC_CheckStackVars:PROC
EXTRN	_RTC_InitBase:PROC
EXTRN	_RTC_Shutdown:PROC
EXTRN	__CxxFrameHandler4:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	??_7type_info@@6B@:BYTE				; type_info::`vftable'
EXTRN	__security_cookie:QWORD
EXTRN	_fltused:DWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$__local_stdio_printf_options DD imagerel $LN3
	DD	imagerel $LN3+11
	DD	imagerel $unwind$__local_stdio_printf_options
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vfprintf_l DD imagerel $LN3
	DD	imagerel $LN3+70
	DD	imagerel $unwind$_vfprintf_l
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$printf DD imagerel $LN3
	DD	imagerel $LN3+131
	DD	imagerel $unwind$printf
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?max@?$numeric_limits@_J@std@@SA_JXZ DD imagerel $LN3
	DD	imagerel $LN3+14
	DD	imagerel $unwind$?max@?$numeric_limits@_J@std@@SA_JXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??2@YAPEAX_KPEAX@Z DD imagerel $LN3
	DD	imagerel $LN3+18
	DD	imagerel $unwind$??2@YAPEAX_KPEAX@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$abs@H@glm@@YAHH@Z DD imagerel $LN3
	DD	imagerel $LN3+39
	DD	imagerel $unwind$??$abs@H@glm@@YAHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$epsilonEqual@N@glm@@YA_NAEBN00@Z DD imagerel $LN5
	DD	imagerel $LN5+87
	DD	imagerel $unwind$??$epsilonEqual@N@glm@@YA_NAEBN00@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$abs@N@glm@@YANN@Z DD imagerel $LN3
	DD	imagerel $LN3+28
	DD	imagerel $unwind$??$abs@N@glm@@YANN@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0exception@std@@QEAA@QEBDH@Z DD imagerel $LN3
	DD	imagerel $LN3+73
	DD	imagerel $unwind$??0exception@std@@QEAA@QEBDH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0exception@std@@QEAA@AEBV01@@Z DD imagerel $LN3
	DD	imagerel $LN3+88
	DD	imagerel $unwind$??0exception@std@@QEAA@AEBV01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1exception@std@@UEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$??1exception@std@@UEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?what@exception@std@@UEBAPEBDXZ DD imagerel $LN5
	DD	imagerel $LN5+58
	DD	imagerel $unwind$?what@exception@std@@UEBAPEBDXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_Gexception@std@@UEAAPEAXI@Z DD imagerel $LN4
	DD	imagerel $LN4+61
	DD	imagerel $unwind$??_Gexception@std@@UEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0bad_alloc@std@@AEAA@QEBD@Z DD imagerel $LN3
	DD	imagerel $LN3+62
	DD	imagerel $unwind$??0bad_alloc@std@@AEAA@QEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1bad_alloc@std@@UEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+26
	DD	imagerel $unwind$??1bad_alloc@std@@UEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0bad_alloc@std@@QEAA@AEBV01@@Z DD imagerel $LN3
	DD	imagerel $LN3+56
	DD	imagerel $unwind$??0bad_alloc@std@@QEAA@AEBV01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_Gbad_alloc@std@@UEAAPEAXI@Z DD imagerel $LN4
	DD	imagerel $LN4+61
	DD	imagerel $unwind$??_Gbad_alloc@std@@UEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0bad_array_new_length@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+53
	DD	imagerel $unwind$??0bad_array_new_length@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1bad_array_new_length@std@@UEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+26
	DD	imagerel $unwind$??1bad_array_new_length@std@@UEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0bad_array_new_length@std@@QEAA@AEBV01@@Z DD imagerel $LN3
	DD	imagerel $LN3+56
	DD	imagerel $unwind$??0bad_array_new_length@std@@QEAA@AEBV01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_Gbad_array_new_length@std@@UEAAPEAXI@Z DD imagerel $LN4
	DD	imagerel $LN4+61
	DD	imagerel $unwind$??_Gbad_array_new_length@std@@UEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Throw_bad_array_new_length@std@@YAXXZ DD imagerel $LN3
	DD	imagerel $LN3+39
	DD	imagerel $unwind$?_Throw_bad_array_new_length@std@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z DD imagerel $LN3
	DD	imagerel $LN3+26
	DD	imagerel $unwind$?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z DD imagerel $LN21
	DD	imagerel $LN21+404
	DD	imagerel $unwind$?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0_Container_proxy@std@@QEAA@PEAU_Container_base12@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+44
	DD	imagerel $unwind$??0_Container_proxy@std@@QEAA@PEAU_Container_base12@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0_Container_base12@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+25
	DD	imagerel $unwind$??0_Container_base12@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Orphan_all@_Container_base12@std@@QEAAXXZ DD imagerel $LN4
	DD	imagerel $LN4+37
	DD	imagerel $unwind$?_Orphan_all@_Container_base12@std@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Orphan_all_unlocked@_Container_base12@std@@AEAAXXZ DD imagerel $LN6
	DD	imagerel $LN6+94
	DD	imagerel $unwind$?_Orphan_all_unlocked@_Container_base12@std@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Orphan_all_locked@_Container_base12@std@@AEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+90
	DD	imagerel $unwind$?_Orphan_all_locked@_Container_base12@std@@AEAAXXZ
pdata	ENDS
pdata	SEGMENT
$pdata$?test_int16@isPowerOfTwo@@YAHXZ DD imagerel $LN8
	DD	imagerel $LN8+300
	DD	imagerel $unwind$?test_int16@isPowerOfTwo@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$isPowerOfTwo@F@glm@@YA_NF@Z DD imagerel $LN5
	DD	imagerel $LN5+72
	DD	imagerel $unwind$??$isPowerOfTwo@F@glm@@YA_NF@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?test_uint16@isPowerOfTwo@@YAHXZ DD imagerel $LN8
	DD	imagerel $LN8+297
	DD	imagerel $unwind$?test_uint16@isPowerOfTwo@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$isPowerOfTwo@G@glm@@YA_NG@Z DD imagerel $LN5
	DD	imagerel $LN5+72
	DD	imagerel $unwind$??$isPowerOfTwo@G@glm@@YA_NG@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?test_int32@isPowerOfTwo@@YAHXZ DD imagerel $LN28
	DD	imagerel $LN28+1189
	DD	imagerel $unwind$?test_int32@isPowerOfTwo@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$isPowerOfTwo@H@glm@@YA_NH@Z DD imagerel $LN5
	DD	imagerel $LN5+69
	DD	imagerel $unwind$??$isPowerOfTwo@H@glm@@YA_NH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tvec1@_N$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tvec1@_N$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec1@_N$0A@@glm@@QEAAAEA_NH@Z DD imagerel $LN5
	DD	imagerel $LN5+82
	DD	imagerel $unwind$??A?$tvec1@_N$0A@@glm@@QEAAAEA_NH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec1@_N$0A@@glm@@QEBAAEB_NH@Z DD imagerel $LN5
	DD	imagerel $LN5+82
	DD	imagerel $unwind$??A?$tvec1@_N$0A@@glm@@QEBAAEB_NH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec1@_N$0A@@glm@@QEAA@W4ctor@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+17
	DD	imagerel $unwind$??0?$tvec1@_N$0A@@glm@@QEAA@W4ctor@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec1@_N$0A@@glm@@QEAA@_N@Z DD imagerel $LN3
	DD	imagerel $LN3+29
	DD	imagerel $unwind$??0?$tvec1@_N$0A@@glm@@QEAA@_N@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tvec1@H$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tvec1@H$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec1@H$0A@@glm@@QEBAAEBHH@Z DD imagerel $LN5
	DD	imagerel $LN5+80
	DD	imagerel $unwind$??A?$tvec1@H$0A@@glm@@QEBAAEBHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec1@H$0A@@glm@@QEAA@H@Z DD imagerel $LN3
	DD	imagerel $LN3+28
	DD	imagerel $unwind$??0?$tvec1@H$0A@@glm@@QEAA@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$isPowerOfTwo@H$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@H$0A@@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+161
	DD	imagerel $unwind$??$isPowerOfTwo@H$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@H$0A@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$equal@_N$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU10@0@Z DD imagerel $LN9
	DD	imagerel $LN9+266
	DD	imagerel $unwind$??$equal@_N$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$all@$0A@Utvec1@glm@@@glm@@YA_NAEBU?$tvec1@_N$0A@@0@@Z DD imagerel $LN8
	DD	imagerel $LN8+116
	DD	imagerel $unwind$??$all@$0A@Utvec1@glm@@@glm@@YA_NAEBU?$tvec1@_N$0A@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tvec2@_N$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tvec2@_N$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec2@_N$0A@@glm@@QEAAAEA_NH@Z DD imagerel $LN5
	DD	imagerel $LN5+82
	DD	imagerel $unwind$??A?$tvec2@_N$0A@@glm@@QEAAAEA_NH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec2@_N$0A@@glm@@QEBAAEB_NH@Z DD imagerel $LN5
	DD	imagerel $LN5+82
	DD	imagerel $unwind$??A?$tvec2@_N$0A@@glm@@QEBAAEB_NH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec2@_N$0A@@glm@@QEAA@W4ctor@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+17
	DD	imagerel $unwind$??0?$tvec2@_N$0A@@glm@@QEAA@W4ctor@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec2@_N$0A@@glm@@QEAA@_N@Z DD imagerel $LN3
	DD	imagerel $LN3+42
	DD	imagerel $unwind$??0?$tvec2@_N$0A@@glm@@QEAA@_N@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tvec2@H$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tvec2@H$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec2@H$0A@@glm@@QEBAAEBHH@Z DD imagerel $LN5
	DD	imagerel $LN5+80
	DD	imagerel $unwind$??A?$tvec2@H$0A@@glm@@QEBAAEBHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec2@H$0A@@glm@@QEAA@H@Z DD imagerel $LN3
	DD	imagerel $LN3+40
	DD	imagerel $unwind$??0?$tvec2@H$0A@@glm@@QEAA@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec2@H$0A@@glm@@QEAA@HH@Z DD imagerel $LN3
	DD	imagerel $LN3+45
	DD	imagerel $unwind$??0?$tvec2@H$0A@@glm@@QEAA@HH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$isPowerOfTwo@H$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@H$0A@@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+161
	DD	imagerel $unwind$??$isPowerOfTwo@H$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@H$0A@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$equal@_N$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU10@0@Z DD imagerel $LN9
	DD	imagerel $LN9+267
	DD	imagerel $unwind$??$equal@_N$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$all@$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@_N$0A@@0@@Z DD imagerel $LN8
	DD	imagerel $LN8+116
	DD	imagerel $unwind$??$all@$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@_N$0A@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tvec3@_N$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tvec3@_N$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec3@_N$0A@@glm@@QEAAAEA_NH@Z DD imagerel $LN5
	DD	imagerel $LN5+82
	DD	imagerel $unwind$??A?$tvec3@_N$0A@@glm@@QEAAAEA_NH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec3@_N$0A@@glm@@QEBAAEB_NH@Z DD imagerel $LN5
	DD	imagerel $LN5+82
	DD	imagerel $unwind$??A?$tvec3@_N$0A@@glm@@QEBAAEB_NH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec3@_N$0A@@glm@@QEAA@W4ctor@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+17
	DD	imagerel $unwind$??0?$tvec3@_N$0A@@glm@@QEAA@W4ctor@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec3@_N$0A@@glm@@QEAA@_N@Z DD imagerel $LN3
	DD	imagerel $LN3+55
	DD	imagerel $unwind$??0?$tvec3@_N$0A@@glm@@QEAA@_N@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tvec3@H$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tvec3@H$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec3@H$0A@@glm@@QEBAAEBHH@Z DD imagerel $LN5
	DD	imagerel $LN5+80
	DD	imagerel $unwind$??A?$tvec3@H$0A@@glm@@QEBAAEBHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec3@H$0A@@glm@@QEAA@H@Z DD imagerel $LN3
	DD	imagerel $LN3+52
	DD	imagerel $unwind$??0?$tvec3@H$0A@@glm@@QEAA@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec3@H$0A@@glm@@QEAA@HHH@Z DD imagerel $LN3
	DD	imagerel $LN3+62
	DD	imagerel $unwind$??0?$tvec3@H$0A@@glm@@QEAA@HHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$isPowerOfTwo@H$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@H$0A@@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+173
	DD	imagerel $unwind$??$isPowerOfTwo@H$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@H$0A@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$equal@_N$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU10@0@Z DD imagerel $LN9
	DD	imagerel $LN9+279
	DD	imagerel $unwind$??$equal@_N$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$all@$0A@Utvec3@glm@@@glm@@YA_NAEBU?$tvec3@_N$0A@@0@@Z DD imagerel $LN8
	DD	imagerel $LN8+116
	DD	imagerel $unwind$??$all@$0A@Utvec3@glm@@@glm@@YA_NAEBU?$tvec3@_N$0A@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tvec4@_N$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tvec4@_N$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec4@_N$0A@@glm@@QEAAAEA_NH@Z DD imagerel $LN5
	DD	imagerel $LN5+82
	DD	imagerel $unwind$??A?$tvec4@_N$0A@@glm@@QEAAAEA_NH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec4@_N$0A@@glm@@QEBAAEB_NH@Z DD imagerel $LN5
	DD	imagerel $LN5+82
	DD	imagerel $unwind$??A?$tvec4@_N$0A@@glm@@QEBAAEB_NH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec4@_N$0A@@glm@@QEAA@W4ctor@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+17
	DD	imagerel $unwind$??0?$tvec4@_N$0A@@glm@@QEAA@W4ctor@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec4@_N$0A@@glm@@QEAA@_N@Z DD imagerel $LN3
	DD	imagerel $LN3+68
	DD	imagerel $unwind$??0?$tvec4@_N$0A@@glm@@QEAA@_N@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tvec4@H$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tvec4@H$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec4@H$0A@@glm@@QEBAAEBHH@Z DD imagerel $LN5
	DD	imagerel $LN5+80
	DD	imagerel $unwind$??A?$tvec4@H$0A@@glm@@QEBAAEBHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec4@H$0A@@glm@@QEAA@H@Z DD imagerel $LN3
	DD	imagerel $LN3+64
	DD	imagerel $unwind$??0?$tvec4@H$0A@@glm@@QEAA@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec4@H$0A@@glm@@QEAA@HHHH@Z DD imagerel $LN3
	DD	imagerel $LN3+74
	DD	imagerel $unwind$??0?$tvec4@H$0A@@glm@@QEAA@HHHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$isPowerOfTwo@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@H$0A@@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+179
	DD	imagerel $unwind$??$isPowerOfTwo@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@H$0A@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$equal@_N$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU10@0@Z DD imagerel $LN9
	DD	imagerel $LN9+265
	DD	imagerel $unwind$??$equal@_N$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z DD imagerel $LN8
	DD	imagerel $LN8+116
	DD	imagerel $unwind$??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?test_uint32@isPowerOfTwo@@YAHXZ DD imagerel $LN8
	DD	imagerel $LN8+305
	DD	imagerel $unwind$?test_uint32@isPowerOfTwo@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$isPowerOfTwo@I@glm@@YA_NI@Z DD imagerel $LN5
	DD	imagerel $LN5+69
	DD	imagerel $unwind$??$isPowerOfTwo@I@glm@@YA_NI@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?test@isPowerOfTwo@@YAHXZ DD imagerel $LN3
	DD	imagerel $LN3+92
	DD	imagerel $unwind$?test@isPowerOfTwo@@YAHXZ
$pdata$?test_int32@ceilPowerOfTwo_advanced@@YAHXZ DD imagerel $LN8
	DD	imagerel $LN8+472
	DD	imagerel $unwind$?test_int32@ceilPowerOfTwo_advanced@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$ceilPowerOfTwo@H@glm@@YAHH@Z DD imagerel $LN3
	DD	imagerel $LN3+44
	DD	imagerel $unwind$??$ceilPowerOfTwo@H@glm@@YAHH@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?test_uint32@ceilPowerOfTwo_advanced@@YAHXZ DD imagerel $LN8
	DD	imagerel $LN8+428
	DD	imagerel $unwind$?test_uint32@ceilPowerOfTwo_advanced@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$ceilPowerOfTwo@I@glm@@YAII@Z DD imagerel $LN3
	DD	imagerel $LN3+44
	DD	imagerel $unwind$??$ceilPowerOfTwo@I@glm@@YAII@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?perf@ceilPowerOfTwo_advanced@@YAHXZ DD imagerel $LN10
	DD	imagerel $LN10+372
	DD	imagerel $unwind$?perf@ceilPowerOfTwo_advanced@@YAHXZ
pdata	ENDS
pdata	SEGMENT
$pdata$?dtor$0@?0??perf@ceilPowerOfTwo_advanced@@YAHXZ@4HA DD imagerel ?dtor$0@?0??perf@ceilPowerOfTwo_advanced@@YAHXZ@4HA
	DD	imagerel ?dtor$0@?0??perf@ceilPowerOfTwo_advanced@@YAHXZ@4HA+35
	DD	imagerel $unwind$?dtor$0@?0??perf@ceilPowerOfTwo_advanced@@YAHXZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$allocator@I@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??0?$allocator@I@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?deallocate@?$allocator@I@std@@QEAAXQEAI_K@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$?deallocate@?$allocator@I@std@@QEAAXQEAI_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?allocate@?$allocator@I@std@@QEAAPEAI_K@Z DD imagerel $LN3
	DD	imagerel $LN3+39
	DD	imagerel $unwind$?allocate@?$allocator@I@std@@QEAAPEAI_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?max_size@?$_Default_allocator_traits@V?$allocator@I@std@@@std@@SA_KAEBV?$allocator@I@2@@Z DD imagerel $LN3
	DD	imagerel $LN3+18
	DD	imagerel $unwind$?max_size@?$_Default_allocator_traits@V?$allocator@I@std@@@std@@SA_KAEBV?$allocator@I@2@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$vector@IV?$allocator@I@std@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+75
	DD	imagerel $unwind$??0?$vector@IV?$allocator@I@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$vector@IV?$allocator@I@std@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+136
	DD	imagerel $unwind$??1?$vector@IV?$allocator@I@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?resize@?$vector@IV?$allocator@I@std@@@std@@QEAAX_K@Z DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$?resize@?$vector@IV?$allocator@I@std@@@std@@QEAAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?size@?$vector@IV?$allocator@I@std@@@std@@QEBA_KXZ DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$?size@?$vector@IV?$allocator@I@std@@@std@@QEBA_KXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?max_size@?$vector@IV?$allocator@I@std@@@std@@QEBA_KXZ DD imagerel $LN3
	DD	imagerel $LN3+67
	DD	imagerel $unwind$?max_size@?$vector@IV?$allocator@I@std@@@std@@QEBA_KXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?capacity@?$vector@IV?$allocator@I@std@@@std@@QEBA_KXZ DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$?capacity@?$vector@IV?$allocator@I@std@@@std@@QEBA_KXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$vector@IV?$allocator@I@std@@@std@@QEAAAEAI_K@Z DD imagerel $LN12
	DD	imagerel $LN12+200
	DD	imagerel $unwind$??A?$vector@IV?$allocator@I@std@@@std@@QEAAAEAI_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Ufill@?$vector@IV?$allocator@I@std@@@std@@AEAAPEAIPEAI_KU_Value_init_tag@2@@Z DD imagerel $LN3
	DD	imagerel $LN3+59
	DD	imagerel $unwind$?_Ufill@?$vector@IV?$allocator@I@std@@@std@@AEAAPEAIPEAI_KU_Value_init_tag@2@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Umove_if_noexcept1@?$vector@IV?$allocator@I@std@@@std@@AEAAXPEAI00U?$integral_constant@_N$00@2@@Z DD imagerel $LN3
	DD	imagerel $LN3+64
	DD	imagerel $unwind$?_Umove_if_noexcept1@?$vector@IV?$allocator@I@std@@@std@@AEAAXPEAI00U?$integral_constant@_N$00@2@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Umove_if_noexcept@?$vector@IV?$allocator@I@std@@@std@@AEAAXPEAI00@Z DD imagerel $LN3
	DD	imagerel $LN3+82
	DD	imagerel $unwind$?_Umove_if_noexcept@?$vector@IV?$allocator@I@std@@@std@@AEAAXPEAI00@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Destroy@?$vector@IV?$allocator@I@std@@@std@@AEAAXPEAI0@Z DD imagerel $LN3
	DD	imagerel $LN3+54
	DD	imagerel $unwind$?_Destroy@?$vector@IV?$allocator@I@std@@@std@@AEAAXPEAI0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Calculate_growth@?$vector@IV?$allocator@I@std@@@std@@AEBA_K_K@Z DD imagerel $LN5
	DD	imagerel $LN5+146
	DD	imagerel $unwind$?_Calculate_growth@?$vector@IV?$allocator@I@std@@@std@@AEBA_K_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Change_array@?$vector@IV?$allocator@I@std@@@std@@AEAAXQEAI_K1@Z DD imagerel $LN4
	DD	imagerel $LN4+249
	DD	imagerel $unwind$?_Change_array@?$vector@IV?$allocator@I@std@@@std@@AEAAXQEAI_K1@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Tidy@?$vector@IV?$allocator@I@std@@@std@@AEAAXXZ DD imagerel $LN4
	DD	imagerel $LN4+213
	DD	imagerel $unwind$?_Tidy@?$vector@IV?$allocator@I@std@@@std@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Xlength@?$vector@IV?$allocator@I@std@@@std@@CAXXZ DD imagerel $LN3
	DD	imagerel $LN3+24
	DD	imagerel $unwind$?_Xlength@?$vector@IV?$allocator@I@std@@@std@@CAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Orphan_range_unlocked@?$vector@IV?$allocator@I@std@@@std@@AEBAXPEAI0@Z DD imagerel $LN8
	DD	imagerel $LN8+161
	DD	imagerel $unwind$?_Orphan_range_unlocked@?$vector@IV?$allocator@I@std@@@std@@AEBAXPEAI0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Orphan_range_locked@?$vector@IV?$allocator@I@std@@@std@@AEBAXPEAI0@Z DD imagerel $LN4
	DD	imagerel $LN4+112
	DD	imagerel $unwind$?_Orphan_range_locked@?$vector@IV?$allocator@I@std@@@std@@AEBAXPEAI0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0??_Orphan_range_locked@?$vector@IV?$allocator@I@std@@@std@@AEBAXPEAI0@Z@4HA DD imagerel ?dtor$0@?0??_Orphan_range_locked@?$vector@IV?$allocator@I@std@@@std@@AEBAXPEAI0@Z@4HA
	DD	imagerel ?dtor$0@?0??_Orphan_range_locked@?$vector@IV?$allocator@I@std@@@std@@AEBAXPEAI0@Z@4HA+36
	DD	imagerel $unwind$?dtor$0@?0??_Orphan_range_locked@?$vector@IV?$allocator@I@std@@@std@@AEBAXPEAI0@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Orphan_range@?$vector@IV?$allocator@I@std@@@std@@AEBAXPEAI0@Z DD imagerel $LN3
	DD	imagerel $LN3+46
	DD	imagerel $unwind$?_Orphan_range@?$vector@IV?$allocator@I@std@@@std@@AEBAXPEAI0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Getal@?$vector@IV?$allocator@I@std@@@std@@AEAAAEAV?$allocator@I@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+29
	DD	imagerel $unwind$?_Getal@?$vector@IV?$allocator@I@std@@@std@@AEAAAEAV?$allocator@I@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Getal@?$vector@IV?$allocator@I@std@@@std@@AEBAAEBV?$allocator@I@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+29
	DD	imagerel $unwind$?_Getal@?$vector@IV?$allocator@I@std@@@std@@AEBAAEBV?$allocator@I@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$_Vector_val@U?$_Simple_types@I@std@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+70
	DD	imagerel $unwind$??0?$_Vector_val@U?$_Simple_types@I@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Get_first@?$_Compressed_pair@V?$allocator@I@std@@V?$_Vector_val@U?$_Simple_types@I@std@@@2@$00@std@@QEAAAEAV?$allocator@I@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$?_Get_first@?$_Compressed_pair@V?$allocator@I@std@@V?$_Vector_val@U?$_Simple_types@I@std@@@2@$00@std@@QEAAAEAV?$allocator@I@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Get_first@?$_Compressed_pair@V?$allocator@I@std@@V?$_Vector_val@U?$_Simple_types@I@std@@@2@$00@std@@QEBAAEBV?$allocator@I@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$?_Get_first@?$_Compressed_pair@V?$allocator@I@std@@V?$_Vector_val@U?$_Simple_types@I@std@@@2@$00@std@@QEBAAEBV?$allocator@I@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$ceilPowerOfTwo_loop@I@ceilPowerOfTwo_advanced@@YAII@Z DD imagerel $LN5
	DD	imagerel $LN5+60
	DD	imagerel $unwind$??$ceilPowerOfTwo_loop@I@ceilPowerOfTwo_advanced@@YAII@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?test@ceilPowerOfTwo_advanced@@YAHXZ DD imagerel $LN3
	DD	imagerel $LN3+58
	DD	imagerel $unwind$?test@ceilPowerOfTwo_advanced@@YAHXZ
$pdata$?test@roundPowerOfTwo@@YAHXZ DD imagerel $LN15
	DD	imagerel $LN15+354
	DD	imagerel $unwind$?test@roundPowerOfTwo@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$roundPowerOfTwo@I@glm@@YAII@Z DD imagerel $LN6
	DD	imagerel $LN6+128
	DD	imagerel $unwind$??$roundPowerOfTwo@I@glm@@YAII@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?test@floorPowerOfTwo@@YAHXZ DD imagerel $LN9
	DD	imagerel $LN9+189
	DD	imagerel $unwind$?test@floorPowerOfTwo@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$floorPowerOfTwo@I@glm@@YAII@Z DD imagerel $LN5
	DD	imagerel $LN5+76
	DD	imagerel $unwind$??$floorPowerOfTwo@I@glm@@YAII@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?test@ceilPowerOfTwo@@YAHXZ DD imagerel $LN9
	DD	imagerel $LN9+189
	DD	imagerel $unwind$?test@ceilPowerOfTwo@@YAHXZ
$pdata$?test_float@floorMultiple@@YAHXZ DD imagerel $LN8
	DD	imagerel $LN8+398
	DD	imagerel $unwind$?test_float@floorMultiple@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$floorMultiple@N@glm@@YANNN@Z DD imagerel $LN3
	DD	imagerel $LN3+40
	DD	imagerel $unwind$??$floorMultiple@N@glm@@YANNN@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?test@floorMultiple@@YAHXZ DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$?test@floorMultiple@@YAHXZ
$pdata$?test_float@ceilMultiple@@YAHXZ DD imagerel $LN8
	DD	imagerel $LN8+398
	DD	imagerel $unwind$?test_float@ceilMultiple@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$ceilMultiple@N@glm@@YANNN@Z DD imagerel $LN3
	DD	imagerel $LN3+40
	DD	imagerel $unwind$??$ceilMultiple@N@glm@@YANNN@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?test_int@ceilMultiple@@YAHXZ DD imagerel $LN8
	DD	imagerel $LN8+619
	DD	imagerel $unwind$?test_int@ceilMultiple@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$ceilMultiple@H@glm@@YAHHH@Z DD imagerel $LN3
	DD	imagerel $LN3+32
	DD	imagerel $unwind$??$ceilMultiple@H@glm@@YAHHH@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?test@ceilMultiple@@YAHXZ DD imagerel $LN3
	DD	imagerel $LN3+58
	DD	imagerel $unwind$?test@ceilMultiple@@YAHXZ
$pdata$main DD	imagerel $LN3
	DD	imagerel $LN3+143
	DD	imagerel $unwind$main
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Resize@U_Value_init_tag@std@@@?$vector@IV?$allocator@I@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z DD imagerel $LN6
	DD	imagerel $LN6+359
	DD	imagerel $unwind$??$_Resize@U_Value_init_tag@std@@@?$vector@IV?$allocator@I@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?allocate@?$allocator@U_Container_proxy@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z DD imagerel $LN3
	DD	imagerel $LN3+39
	DD	imagerel $unwind$?allocate@?$allocator@U_Container_proxy@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0I@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@I@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+18
	DD	imagerel $unwind$??$?0I@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@I@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$exchange@PEAU_Container_proxy@std@@$$T@std@@YAPEAU_Container_proxy@0@AEAPEAU10@$$QEA$$T@Z DD imagerel $LN3
	DD	imagerel $LN3+53
	DD	imagerel $unwind$??$exchange@PEAU_Container_proxy@std@@$$T@std@@YAPEAU_Container_proxy@0@AEAPEAU10@$$QEA$$T@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+36
	DD	imagerel $unwind$??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0$$V@?$_Compressed_pair@V?$allocator@I@std@@V?$_Vector_val@U?$_Simple_types@I@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$??$?0$$V@?$_Compressed_pair@V?$allocator@I@std@@V?$_Vector_val@U?$_Simple_types@I@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QEAAX$$QEAV?$allocator@U_Container_proxy@std@@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+100
	DD	imagerel $unwind$??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QEAAX$$QEAV?$allocator@U_Container_proxy@std@@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Destroy_range@V?$allocator@I@std@@@std@@YAXPEAIQEAIAEAV?$allocator@I@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+18
	DD	imagerel $unwind$??$_Destroy_range@V?$allocator@I@std@@@std@@YAXPEAIQEAIAEAV?$allocator@I@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z DD imagerel $LN4
	DD	imagerel $LN4+63
	DD	imagerel $unwind$??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_abs@N$00@detail@glm@@SANN@Z DD imagerel $LN5
	DD	imagerel $LN5+72
	DD	imagerel $unwind$?call@?$compute_abs@N$00@detail@glm@@SANN@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$abs@F@glm@@YAFF@Z DD imagerel $LN3
	DD	imagerel $LN3+26
	DD	imagerel $unwind$??$abs@F@glm@@YAFF@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$abs@G@glm@@YAGG@Z DD imagerel $LN3
	DD	imagerel $LN3+26
	DD	imagerel $unwind$??$abs@G@glm@@YAGG@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$abs@H$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@H$0A@@0@AEBU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$??$abs@H$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@H$0A@@0@AEBU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?GH$0A@@glm@@YA?AU?$tvec1@H$0A@@0@AEBU10@H@Z DD imagerel $LN3
	DD	imagerel $LN3+56
	DD	imagerel $unwind$??$?GH$0A@@glm@@YA?AU?$tvec1@H$0A@@0@AEBU10@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?IH$0A@@glm@@YA?AU?$tvec1@H$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+59
	DD	imagerel $unwind$??$?IH$0A@@glm@@YA?AU?$tvec1@H$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$equal@H$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@H$0A@@0@0@Z DD imagerel $LN9
	DD	imagerel $LN9+264
	DD	imagerel $unwind$??$equal@H$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@H$0A@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$abs@H$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@H$0A@@0@AEBU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$??$abs@H$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@H$0A@@0@AEBU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?GH$0A@@glm@@YA?AU?$tvec2@H$0A@@0@AEBU10@H@Z DD imagerel $LN3
	DD	imagerel $LN3+73
	DD	imagerel $unwind$??$?GH$0A@@glm@@YA?AU?$tvec2@H$0A@@0@AEBU10@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?IH$0A@@glm@@YA?AU?$tvec2@H$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+80
	DD	imagerel $unwind$??$?IH$0A@@glm@@YA?AU?$tvec2@H$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$equal@H$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@H$0A@@0@0@Z DD imagerel $LN9
	DD	imagerel $LN9+265
	DD	imagerel $unwind$??$equal@H$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@H$0A@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$abs@H$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@H$0A@@0@AEBU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$??$abs@H$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@H$0A@@0@AEBU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?GH$0A@@glm@@YA?AU?$tvec3@H$0A@@0@AEBU10@H@Z DD imagerel $LN3
	DD	imagerel $LN3+90
	DD	imagerel $unwind$??$?GH$0A@@glm@@YA?AU?$tvec3@H$0A@@0@AEBU10@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?IH$0A@@glm@@YA?AU?$tvec3@H$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+101
	DD	imagerel $unwind$??$?IH$0A@@glm@@YA?AU?$tvec3@H$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$equal@H$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@H$0A@@0@0@Z DD imagerel $LN9
	DD	imagerel $LN9+277
	DD	imagerel $unwind$??$equal@H$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@H$0A@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$abs@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@H$0A@@0@AEBU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$??$abs@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@H$0A@@0@AEBU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?GH$0A@@glm@@YA?AU?$tvec4@H$0A@@0@AEBU10@H@Z DD imagerel $LN3
	DD	imagerel $LN3+82
	DD	imagerel $unwind$??$?GH$0A@@glm@@YA?AU?$tvec4@H$0A@@0@AEBU10@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?IH$0A@@glm@@YA?AU?$tvec4@H$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+83
	DD	imagerel $unwind$??$?IH$0A@@glm@@YA?AU?$tvec4@H$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$equal@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@H$0A@@0@0@Z DD imagerel $LN9
	DD	imagerel $LN9+263
	DD	imagerel $unwind$??$equal@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@H$0A@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$abs@I@glm@@YAII@Z DD imagerel $LN3
	DD	imagerel $LN3+24
	DD	imagerel $unwind$??$abs@I@glm@@YAII@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_ceilPowerOfTwo@H$0A@Utvec1@glm@@$00@detail@glm@@SA?AU?$tvec1@H$0A@@3@AEBU43@@Z DD imagerel $LN3
	DD	imagerel $LN3+402
	DD	imagerel $unwind$?call@?$compute_ceilPowerOfTwo@H$0A@Utvec1@glm@@$00@detail@glm@@SA?AU?$tvec1@H$0A@@3@AEBU43@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_ceilPowerOfTwo@I$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@I$0A@@3@AEBU43@@Z DD imagerel $LN3
	DD	imagerel $LN3+344
	DD	imagerel $unwind$?call@?$compute_ceilPowerOfTwo@I$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@I$0A@@3@AEBU43@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec1@I$0A@@glm@@QEAA@I@Z DD imagerel $LN3
	DD	imagerel $LN3+28
	DD	imagerel $unwind$??0?$tvec1@I$0A@@glm@@QEAA@I@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$highestBitValue@I@ceilPowerOfTwo_advanced@@YAII@Z DD imagerel $LN5
	DD	imagerel $LN5+76
	DD	imagerel $unwind$??$highestBitValue@I@ceilPowerOfTwo_advanced@@YAII@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$findMSB@I@glm@@YAHI@Z DD imagerel $LN3
	DD	imagerel $LN3+44
	DD	imagerel $unwind$??$findMSB@I@glm@@YAHI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$call@N@?$compute_floorMultiple@$00$00@detail@glm@@SANNN@Z DD imagerel $LN5
	DD	imagerel $LN5+109
	DD	imagerel $unwind$??$call@N@?$compute_floorMultiple@$00$00@detail@glm@@SANNN@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$call@N@?$compute_ceilMultiple@$00$00@detail@glm@@SANNN@Z DD imagerel $LN5
	DD	imagerel $LN5+123
	DD	imagerel $unwind$??$call@N@?$compute_ceilMultiple@$00$00@detail@glm@@SANNN@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$call@H@?$compute_ceilMultiple@$0A@$00@detail@glm@@SAHHH@Z DD imagerel $LN5
	DD	imagerel $LN5+85
	DD	imagerel $unwind$??$call@H@?$compute_ceilMultiple@$0A@$00@detail@glm@@SAHHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@IV?$allocator@I@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z DD imagerel $LN11
	DD	imagerel $LN11+344
	DD	imagerel $unwind$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@IV?$allocator@I@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?catch$0@?0???$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@IV?$allocator@I@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z@4HA DD imagerel ?catch$0@?0???$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@IV?$allocator@I@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z@4HA
	DD	imagerel ?catch$0@?0???$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@IV?$allocator@I@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z@4HA+92
	DD	imagerel $unwind$?catch$0@?0???$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@IV?$allocator@I@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+43
	DD	imagerel $unwind$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Unfancy@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@PEAU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$_Unfancy@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@PEAU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Construct_in_place@U_Container_proxy@std@@PEAU_Container_base12@2@@std@@YAXAEAU_Container_proxy@0@$$QEAPEAU_Container_base12@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+80
	DD	imagerel $unwind$??$_Construct_in_place@U_Container_proxy@std@@PEAU_Container_base12@2@@std@@YAXAEAU_Container_proxy@0@$$QEAPEAU_Container_base12@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?GI$0A@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@I@Z DD imagerel $LN3
	DD	imagerel $LN3+56
	DD	imagerel $unwind$??$?GI$0A@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@I@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?5I$0A@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@I@Z DD imagerel $LN3
	DD	imagerel $LN3+69
	DD	imagerel $unwind$??$?5I$0A@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@I@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?UI$0A@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+59
	DD	imagerel $unwind$??$?UI$0A@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_ceilShift@I$0A@Utvec1@glm@@$00@detail@glm@@SA?AU?$tvec1@I$0A@@3@AEBU43@I@Z DD imagerel $LN3
	DD	imagerel $LN3+69
	DD	imagerel $unwind$?call@?$compute_ceilShift@I$0A@Utvec1@glm@@$00@detail@glm@@SA?AU?$tvec1@I$0A@@3@AEBU43@I@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_ceilShift@I$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@I$0A@@3@AEBU43@I@Z DD imagerel $LN3
	DD	imagerel $LN3+37
	DD	imagerel $unwind$?call@?$compute_ceilShift@I$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@I$0A@@3@AEBU43@I@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?HI$0A@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@I@Z DD imagerel $LN3
	DD	imagerel $LN3+54
	DD	imagerel $unwind$??$?HI$0A@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@I@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$sign@H$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@H$0A@@0@AEBU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$??$sign@H$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@H$0A@@0@AEBU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?5H$0A@@glm@@YA?AU?$tvec1@H$0A@@0@AEBU10@H@Z DD imagerel $LN3
	DD	imagerel $LN3+69
	DD	imagerel $unwind$??$?5H$0A@@glm@@YA?AU?$tvec1@H$0A@@0@AEBU10@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?UH$0A@@glm@@YA?AU?$tvec1@H$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+59
	DD	imagerel $unwind$??$?UH$0A@@glm@@YA?AU?$tvec1@H$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_ceilShift@H$0A@Utvec1@glm@@$00@detail@glm@@SA?AU?$tvec1@H$0A@@3@AEBU43@H@Z DD imagerel $LN3
	DD	imagerel $LN3+69
	DD	imagerel $unwind$?call@?$compute_ceilShift@H$0A@Utvec1@glm@@$00@detail@glm@@SA?AU?$tvec1@H$0A@@3@AEBU43@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_ceilShift@H$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@H$0A@@3@AEBU43@H@Z DD imagerel $LN3
	DD	imagerel $LN3+37
	DD	imagerel $unwind$?call@?$compute_ceilShift@H$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@H$0A@@3@AEBU43@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?HH$0A@@glm@@YA?AU?$tvec1@H$0A@@0@AEBU10@H@Z DD imagerel $LN3
	DD	imagerel $LN3+54
	DD	imagerel $unwind$??$?HH$0A@@glm@@YA?AU?$tvec1@H$0A@@0@AEBU10@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?DH$0A@@glm@@YA?AU?$tvec1@H$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+58
	DD	imagerel $unwind$??$?DH$0A@@glm@@YA?AU?$tvec1@H$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Get_size_of_n@$0BA@@std@@YA_K_K@Z DD imagerel $LN4
	DD	imagerel $LN4+64
	DD	imagerel $unwind$??$_Get_size_of_n@$0BA@@std@@YA_K_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z DD imagerel $LN5
	DD	imagerel $LN5+61
	DD	imagerel $unwind$??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Uninitialized_value_construct_n@V?$allocator@I@std@@@std@@YAPEAIPEAI_KAEAV?$allocator@I@0@@Z DD imagerel $LN7
	DD	imagerel $LN7+215
	DD	imagerel $unwind$??$_Uninitialized_value_construct_n@V?$allocator@I@std@@@std@@YAPEAIPEAI_KAEAV?$allocator@I@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???$_Uninitialized_value_construct_n@V?$allocator@I@std@@@std@@YAPEAIPEAI_KAEAV?$allocator@I@0@@Z@4HA DD imagerel ?dtor$0@?0???$_Uninitialized_value_construct_n@V?$allocator@I@std@@@std@@YAPEAIPEAI_KAEAV?$allocator@I@0@@Z@4HA
	DD	imagerel ?dtor$0@?0???$_Uninitialized_value_construct_n@V?$allocator@I@std@@@std@@YAPEAIPEAI_KAEAV?$allocator@I@0@@Z@4HA+35
	DD	imagerel $unwind$?dtor$0@?0???$_Uninitialized_value_construct_n@V?$allocator@I@std@@@std@@YAPEAIPEAI_KAEAV?$allocator@I@0@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_abs@F$00@detail@glm@@SAFF@Z DD imagerel $LN5
	DD	imagerel $LN5+49
	DD	imagerel $unwind$?call@?$compute_abs@F$00@detail@glm@@SAFF@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_abs@G$0A@@detail@glm@@SAGG@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$?call@?$compute_abs@G$0A@@detail@glm@@SAGG@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_abs_vector@H$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@H$0A@@3@AEBU43@@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$?call@?$compute_abs_vector@H$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@H$0A@@3@AEBU43@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_abs_vector@H$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@H$0A@@3@AEBU43@@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$?call@?$compute_abs_vector@H$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@H$0A@@3@AEBU43@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_abs_vector@H$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@H$0A@@3@AEBU43@@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$?call@?$compute_abs_vector@H$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@H$0A@@3@AEBU43@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_abs_vector@H$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@H$0A@@3@AEBU43@@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$?call@?$compute_abs_vector@H$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@H$0A@@3@AEBU43@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?ZH@?$tvec4@H$0A@@glm@@QEAAAEAU01@H@Z DD imagerel $LN3
	DD	imagerel $LN3+74
	DD	imagerel $unwind$??$?ZH@?$tvec4@H$0A@@glm@@QEAAAEAU01@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?_4H@?$tvec4@H$0A@@glm@@QEAAAEAU01@AEBU01@@Z DD imagerel $LN3
	DD	imagerel $LN3+83
	DD	imagerel $unwind$??$?_4H@?$tvec4@H$0A@@glm@@QEAAAEAU01@AEBU01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_abs@I$0A@@detail@glm@@SAII@Z DD imagerel $LN3
	DD	imagerel $LN3+11
	DD	imagerel $unwind$?call@?$compute_abs@I$0A@@detail@glm@@SAII@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$findMSB@I$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@H$0A@@0@AEBU?$tvec1@I$0A@@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$??$findMSB@I$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@H$0A@@0@AEBU?$tvec1@I$0A@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@2@QEAU_Container_proxy@2@_K@Z DD imagerel $LN3
	DD	imagerel $LN3+45
	DD	imagerel $unwind$?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@2@QEAU_Container_proxy@2@_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$addressof@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@AEAU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$addressof@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@AEAU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Voidify_iter@PEAU_Container_proxy@std@@@std@@YAPEAXPEAU_Container_proxy@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$_Voidify_iter@PEAU_Container_proxy@std@@@std@@YAPEAXPEAU_Container_proxy@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$forward@PEAU_Container_base12@std@@@std@@YA$$QEAPEAU_Container_base12@0@AEAPEAU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$forward@PEAU_Container_base12@std@@@std@@YA$$QEAPEAU_Container_base12@0@AEAPEAU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_sign@H$0A@Utvec1@glm@@$0A@$0A@@detail@glm@@SA?AU?$tvec1@H$0A@@3@AEBU43@@Z DD imagerel $LN3
	DD	imagerel $LN3+138
	DD	imagerel $unwind$?call@?$compute_sign@H$0A@Utvec1@glm@@$0A@$0A@@detail@glm@@SA?AU?$tvec1@H$0A@@3@AEBU43@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z DD imagerel $LN13
	DD	imagerel $LN13+259
	DD	imagerel $unwind$??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Unfancy@I@std@@YAPEAIPEAI@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$_Unfancy@I@std@@YAPEAIPEAI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Zero_range@PEAI@std@@YAPEAIQEAI0@Z DD imagerel $LN3
	DD	imagerel $LN3+87
	DD	imagerel $unwind$??$_Zero_range@PEAI@std@@YAPEAIQEAI0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$_Uninitialized_backout_al@V?$allocator@I@std@@@std@@QEAA@PEAIAEAV?$allocator@I@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+64
	DD	imagerel $unwind$??0?$_Uninitialized_backout_al@V?$allocator@I@std@@@std@@QEAA@PEAIAEAV?$allocator@I@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$_Uninitialized_backout_al@V?$allocator@I@std@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+47
	DD	imagerel $unwind$??1?$_Uninitialized_backout_al@V?$allocator@I@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Release@?$_Uninitialized_backout_al@V?$allocator@I@std@@@std@@QEAAPEAIXZ DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$?_Release@?$_Uninitialized_backout_al@V?$allocator@I@std@@@std@@QEAAPEAIXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Emplace_back@$$V@?$_Uninitialized_backout_al@V?$allocator@I@std@@@std@@QEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+69
	DD	imagerel $unwind$??$_Emplace_back@$$V@?$_Uninitialized_backout_al@V?$allocator@I@std@@@std@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$lessThan@H$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@H$0A@@0@0@Z DD imagerel $LN9
	DD	imagerel $LN9+264
	DD	imagerel $unwind$??$lessThan@H$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@H$0A@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0_N$0A@@?$tvec1@H$0A@@glm@@QEAA@AEBU?$tvec1@_N$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+33
	DD	imagerel $unwind$??$?0_N$0A@@?$tvec1@H$0A@@glm@@QEAA@AEBU?$tvec1@_N$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?GH$0A@@glm@@YA?AU?$tvec1@H$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+59
	DD	imagerel $unwind$??$?GH$0A@@glm@@YA?AU?$tvec1@H$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$functor1@HH$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@H$0A@@3@P6AHH@ZAEBU43@@Z DD imagerel $LN3
	DD	imagerel $LN3+124
	DD	imagerel $unwind$?call@?$functor1@HH$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@H$0A@@3@P6AHH@ZAEBU43@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$functor1@HH$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@H$0A@@3@P6AHH@ZAEBU43@@Z DD imagerel $LN3
	DD	imagerel $LN3+100
	DD	imagerel $unwind$?call@?$functor1@HH$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@H$0A@@3@P6AHH@ZAEBU43@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$functor1@HH$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@H$0A@@3@P6AHH@ZAEBU43@@Z DD imagerel $LN3
	DD	imagerel $LN3+77
	DD	imagerel $unwind$?call@?$functor1@HH$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@H$0A@@3@P6AHH@ZAEBU43@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$functor1@HH$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@H$0A@@3@P6AHH@ZAEBU43@@Z DD imagerel $LN3
	DD	imagerel $LN3+54
	DD	imagerel $unwind$?call@?$functor1@HH$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@H$0A@@3@P6AHH@ZAEBU43@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$min@_K@std@@YAAEB_KAEB_K0@Z DD imagerel $LN5
	DD	imagerel $LN5+74
	DD	imagerel $unwind$??$min@_K@std@@YAAEB_KAEB_K0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Get_size_of_n@$03@std@@YA_K_K@Z DD imagerel $LN4
	DD	imagerel $LN4+67
	DD	imagerel $unwind$??$_Get_size_of_n@$03@std@@YA_K_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Uninitialized_move@PEAIV?$allocator@I@std@@@std@@YAPEAIQEAI0PEAIAEAV?$allocator@I@0@@Z DD imagerel $LN7
	DD	imagerel $LN7+278
	DD	imagerel $unwind$??$_Uninitialized_move@PEAIV?$allocator@I@std@@@std@@YAPEAIQEAI0PEAIAEAV?$allocator@I@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???$_Uninitialized_move@PEAIV?$allocator@I@std@@@std@@YAPEAIQEAI0PEAIAEAV?$allocator@I@0@@Z@4HA DD imagerel ?dtor$0@?0???$_Uninitialized_move@PEAIV?$allocator@I@std@@@std@@YAPEAIQEAI0PEAIAEAV?$allocator@I@0@@Z@4HA
	DD	imagerel ?dtor$0@?0???$_Uninitialized_move@PEAIV?$allocator@I@std@@@std@@YAPEAIQEAI0PEAIAEAV?$allocator@I@0@@Z@4HA+35
	DD	imagerel $unwind$?dtor$0@?0???$_Uninitialized_move@PEAIV?$allocator@I@std@@@std@@YAPEAIQEAI0PEAIAEAV?$allocator@I@0@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_vec4_sub@H$0A@$0A@@detail@glm@@SA?AU?$tvec4@H$0A@@3@AEBU43@0@Z DD imagerel $LN3
	DD	imagerel $LN3+137
	DD	imagerel $unwind$?call@?$compute_vec4_sub@H$0A@$0A@@detail@glm@@SA?AU?$tvec4@H$0A@@3@AEBU43@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_vec4_and@H$0A@$0?0$0CA@$0A@@detail@glm@@SA?AU?$tvec4@H$0A@@3@AEBU43@0@Z DD imagerel $LN3
	DD	imagerel $LN3+137
	DD	imagerel $unwind$?call@?$compute_vec4_and@H$0A@$0?0$0CA@$0A@@detail@glm@@SA?AU?$tvec4@H$0A@@3@AEBU43@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_findMSB_vec@I$0A@Utvec1@glm@@$0CA@@detail@glm@@SA?AU?$tvec1@H$0A@@3@AEBU?$tvec1@I$0A@@3@@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$?call@?$compute_findMSB_vec@I$0A@Utvec1@glm@@$0CA@@detail@glm@@SA?AU?$tvec1@H$0A@@3@AEBU?$tvec1@I$0A@@3@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_To_address@PEAI@std@@YA?A_PAEBQEAI@Z DD imagerel $LN3
	DD	imagerel $LN3+16
	DD	imagerel $unwind$??$_To_address@PEAI@std@@YA?A_PAEBQEAI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$construct@I$$V@?$_Default_allocator_traits@V?$allocator@I@std@@@std@@SAXAEAV?$allocator@I@1@QEAI@Z DD imagerel $LN3
	DD	imagerel $LN3+72
	DD	imagerel $unwind$??$construct@I$$V@?$_Default_allocator_traits@V?$allocator@I@std@@@std@@SAXAEAV?$allocator@I@1@QEAI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Get_unwrapped@AEBQEAI@std@@YA?A_TAEBQEAI@Z DD imagerel $LN3
	DD	imagerel $LN3+16
	DD	imagerel $unwind$??$_Get_unwrapped@AEBQEAI@std@@YA?A_TAEBQEAI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$move@AEAI@std@@YA$$QEAIAEAI@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$move@AEAI@std@@YA$$QEAIAEAI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Copy_memmove@PEAIPEAI@std@@YAPEAIPEAI00@Z DD imagerel $LN3
	DD	imagerel $LN3+161
	DD	imagerel $unwind$??$_Copy_memmove@PEAIPEAI@std@@YAPEAIPEAI00@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Emplace_back@I@?$_Uninitialized_backout_al@V?$allocator@I@std@@@std@@QEAAX$$QEAI@Z DD imagerel $LN3
	DD	imagerel $LN3+97
	DD	imagerel $unwind$??$_Emplace_back@I@?$_Uninitialized_backout_al@V?$allocator@I@std@@@std@@QEAAX$$QEAI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$functor1@HI$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@H$0A@@3@P6AHI@ZAEBU?$tvec1@I$0A@@3@@Z DD imagerel $LN3
	DD	imagerel $LN3+54
	DD	imagerel $unwind$?call@?$functor1@HI$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@H$0A@@3@P6AHI@ZAEBU?$tvec1@I$0A@@3@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$compute_findMSB_32@I@detail@glm@@YAHI@Z DD imagerel $LN5
	DD	imagerel $LN5+112
	DD	imagerel $unwind$??$compute_findMSB_32@I@detail@glm@@YAHI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Voidify_iter@PEAI@std@@YAPEAXPEAI@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$_Voidify_iter@PEAI@std@@YAPEAXPEAI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$forward@I@std@@YA$$QEAIAEAI@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$forward@I@std@@YA$$QEAIAEAI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$construct@II@?$_Default_allocator_traits@V?$allocator@I@std@@@std@@SAXAEAV?$allocator@I@1@QEAI$$QEAI@Z DD imagerel $LN3
	DD	imagerel $LN3+73
	DD	imagerel $unwind$??$construct@II@?$_Default_allocator_traits@V?$allocator@I@std@@@std@@SAXAEAV?$allocator@I@1@QEAI$$QEAI@Z
pdata	ENDS
;	COMDAT __xmm@80000000000000008000000000000000
CONST	SEGMENT
__xmm@80000000000000008000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 00H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __real@bff8000000000000
CONST	SEGMENT
__real@bff8000000000000 DQ 0bff8000000000000r	; -1.5
CONST	ENDS
;	COMDAT __real@bff6666666666666
CONST	SEGMENT
__real@bff6666666666666 DQ 0bff6666666666666r	; -1.4
CONST	ENDS
;	COMDAT __real@bff3333333333333
CONST	SEGMENT
__real@bff3333333333333 DQ 0bff3333333333333r	; -1.2
CONST	ENDS
;	COMDAT __real@400ccccccccccccd
CONST	SEGMENT
__real@400ccccccccccccd DQ 0400ccccccccccccdr	; 3.6
CONST	ENDS
;	COMDAT __real@400b333333333333
CONST	SEGMENT
__real@400b333333333333 DQ 0400b333333333333r	; 3.4
CONST	ENDS
;	COMDAT __real@400a666666666666
CONST	SEGMENT
__real@400a666666666666 DQ 0400a666666666666r	; 3.3
CONST	ENDS
;	COMDAT __real@3fd3333333333333
CONST	SEGMENT
__real@3fd3333333333333 DQ 03fd3333333333333r	; 0.3
CONST	ENDS
;	COMDAT __real@3f1a36e2eb1c432d
CONST	SEGMENT
__real@3f1a36e2eb1c432d DQ 03f1a36e2eb1c432dr	; 0.0001
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
_RTC_Shutdown.rtc$TMZ DQ FLAT:_RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
_RTC_InitBase.rtc$IMZ DQ FLAT:_RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_array_new_length@std@@8 DD imagerel ??_R0?AVbad_array_new_length@std@@@8 ; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R2bad_array_new_length@std@@8 DD imagerel ??_R1A@?0A@EA@bad_array_new_length@std@@8 ; std::bad_array_new_length::`RTTI Base Class Array'
	DD	imagerel ??_R1A@?0A@EA@bad_alloc@std@@8
	DD	imagerel ??_R1A@?0A@EA@exception@std@@8
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R3bad_array_new_length@std@@8 DD 00H			; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	imagerel ??_R2bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_array_new_length@std@@6B@
rdata$r	SEGMENT
??_R4bad_array_new_length@std@@6B@ DD 01H		; std::bad_array_new_length::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AVbad_array_new_length@std@@@8
	DD	imagerel ??_R3bad_array_new_length@std@@8
	DD	imagerel ??_R4bad_array_new_length@std@@6B@
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD imagerel ??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD imagerel ??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	imagerel ??_R1A@?0A@EA@exception@std@@8
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	imagerel ??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 01H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AVbad_alloc@std@@@8
	DD	imagerel ??_R3bad_alloc@std@@8
	DD	imagerel ??_R4bad_alloc@std@@6B@
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD imagerel ??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD imagerel ??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	imagerel ??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 01H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AVexception@std@@@8
	DD	imagerel ??_R3exception@std@@8
	DD	imagerel ??_R4exception@std@@6B@
rdata$r	ENDS
;	COMDAT ??_C@_0BA@FOIKENOD@vector?5too?5long@
CONST	SEGMENT
??_C@_0BA@FOIKENOD@vector?5too?5long@ DB 'vector too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1IK@KCJBGCFC@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAs?$AA4?$AA0?$AA0?$AA2?$AA6@
CONST	SEGMENT
??_C@_1IK@KCJBGCFC@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAs?$AA4?$AA0?$AA0?$AA2?$AA6@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'U', 00H, 's', 00H, 'e', 00H, 'r', 00H
	DB	's', 00H, '\', 00H, 's', 00H, '4', 00H, '0', 00H, '0', 00H, '2'
	DB	00H, '6', 00H, '7', 00H, '5', 00H, '\', 00H, 'D', 00H, 'o', 00H
	DB	'w', 00H, 'n', 00H, 'l', 00H, 'o', 00H, 'a', 00H, 'd', 00H, 's'
	DB	00H, '\', 00H, 'g', 00H, 'l', 00H, 'm', 00H, '-', 00H, '0', 00H
	DB	'.', 00H, '9', 00H, '.', 00H, '8', 00H, '.', 00H, '5', 00H, '\'
	DB	00H, 'g', 00H, 'l', 00H, 'm', 00H, '\', 00H, 'g', 00H, 'l', 00H
	DB	'm', 00H, '\', 00H, 'd', 00H, 'e', 00H, 't', 00H, 'a', 00H, 'i'
	DB	00H, 'l', 00H, '\', 00H, 't', 00H, 'y', 00H, 'p', 00H, 'e', 00H
	DB	'_', 00H, 'v', 00H, 'e', 00H, 'c', 00H, '3', 00H, '.', 00H, 'i'
	DB	00H, 'n', 00H, 'l', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1IK@EOKKPMMN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAs?$AA4?$AA0?$AA0?$AA2?$AA6@
CONST	SEGMENT
??_C@_1IK@EOKKPMMN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAs?$AA4?$AA0?$AA0?$AA2?$AA6@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'U', 00H, 's', 00H, 'e', 00H, 'r', 00H
	DB	's', 00H, '\', 00H, 's', 00H, '4', 00H, '0', 00H, '0', 00H, '2'
	DB	00H, '6', 00H, '7', 00H, '5', 00H, '\', 00H, 'D', 00H, 'o', 00H
	DB	'w', 00H, 'n', 00H, 'l', 00H, 'o', 00H, 'a', 00H, 'd', 00H, 's'
	DB	00H, '\', 00H, 'g', 00H, 'l', 00H, 'm', 00H, '-', 00H, '0', 00H
	DB	'.', 00H, '9', 00H, '.', 00H, '8', 00H, '.', 00H, '5', 00H, '\'
	DB	00H, 'g', 00H, 'l', 00H, 'm', 00H, '\', 00H, 'g', 00H, 'l', 00H
	DB	'm', 00H, '\', 00H, 'd', 00H, 'e', 00H, 't', 00H, 'a', 00H, 'i'
	DB	00H, 'l', 00H, '\', 00H, 't', 00H, 'y', 00H, 'p', 00H, 'e', 00H
	DB	'_', 00H, 'v', 00H, 'e', 00H, 'c', 00H, '1', 00H, '.', 00H, 'i'
	DB	00H, 'n', 00H, 'l', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@
CONST	SEGMENT
??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@ DB 'x'
	DB	00H, '.', 00H, 'l', 00H, 'e', 00H, 'n', 00H, 'g', 00H, 't', 00H
	DB	'h', 00H, '(', 00H, ')', 00H, ' ', 00H, '=', 00H, '=', 00H, ' '
	DB	00H, 'y', 00H, '.', 00H, 'l', 00H, 'e', 00H, 'n', 00H, 'g', 00H
	DB	't', 00H, 'h', 00H, '(', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1KE@MOONLNIK@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAs?$AA4?$AA0?$AA0?$AA2?$AA6@
CONST	SEGMENT
??_C@_1KE@MOONLNIK@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAs?$AA4?$AA0?$AA0?$AA2?$AA6@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'U', 00H, 's', 00H, 'e', 00H, 'r', 00H
	DB	's', 00H, '\', 00H, 's', 00H, '4', 00H, '0', 00H, '0', 00H, '2'
	DB	00H, '6', 00H, '7', 00H, '5', 00H, '\', 00H, 'D', 00H, 'o', 00H
	DB	'w', 00H, 'n', 00H, 'l', 00H, 'o', 00H, 'a', 00H, 'd', 00H, 's'
	DB	00H, '\', 00H, 'g', 00H, 'l', 00H, 'm', 00H, '-', 00H, '0', 00H
	DB	'.', 00H, '9', 00H, '.', 00H, '8', 00H, '.', 00H, '5', 00H, '\'
	DB	00H, 'g', 00H, 'l', 00H, 'm', 00H, '\', 00H, 'g', 00H, 'l', 00H
	DB	'm', 00H, '\', 00H, 'd', 00H, 'e', 00H, 't', 00H, 'a', 00H, 'i'
	DB	00H, 'l', 00H, '\', 00H, 'f', 00H, 'u', 00H, 'n', 00H, 'c', 00H
	DB	'_', 00H, 'v', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r'
	DB	00H, '_', 00H, 'r', 00H, 'e', 00H, 'l', 00H, 'a', 00H, 't', 00H
	DB	'i', 00H, 'o', 00H, 'n', 00H, 'a', 00H, 'l', 00H, '.', 00H, 'i'
	DB	00H, 'n', 00H, 'l', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1IK@NGAJILNN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAs?$AA4?$AA0?$AA0?$AA2?$AA6@
CONST	SEGMENT
??_C@_1IK@NGAJILNN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAs?$AA4?$AA0?$AA0?$AA2?$AA6@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'U', 00H, 's', 00H, 'e', 00H, 'r', 00H
	DB	's', 00H, '\', 00H, 's', 00H, '4', 00H, '0', 00H, '0', 00H, '2'
	DB	00H, '6', 00H, '7', 00H, '5', 00H, '\', 00H, 'D', 00H, 'o', 00H
	DB	'w', 00H, 'n', 00H, 'l', 00H, 'o', 00H, 'a', 00H, 'd', 00H, 's'
	DB	00H, '\', 00H, 'g', 00H, 'l', 00H, 'm', 00H, '-', 00H, '0', 00H
	DB	'.', 00H, '9', 00H, '.', 00H, '8', 00H, '.', 00H, '5', 00H, '\'
	DB	00H, 'g', 00H, 'l', 00H, 'm', 00H, '\', 00H, 'g', 00H, 'l', 00H
	DB	'm', 00H, '\', 00H, 'd', 00H, 'e', 00H, 't', 00H, 'a', 00H, 'i'
	DB	00H, 'l', 00H, '\', 00H, 't', 00H, 'y', 00H, 'p', 00H, 'e', 00H
	DB	'_', 00H, 'v', 00H, 'e', 00H, 'c', 00H, '4', 00H, '.', 00H, 'i'
	DB	00H, 'n', 00H, 'l', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
CONST	SEGMENT
??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@ DB 'i'
	DB	00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H, '0', 00H, ' ', 00H
	DB	'&', 00H, '&', 00H, ' ', 00H, 'i', 00H, ' ', 00H, '<', 00H, ' '
	DB	00H, 't', 00H, 'h', 00H, 'i', 00H, 's', 00H, '-', 00H, '>', 00H
	DB	'l', 00H, 'e', 00H, 'n', 00H, 'g', 00H, 't', 00H, 'h', 00H, '('
	DB	00H, ')', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1IK@DJDECODN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAs?$AA4?$AA0?$AA0?$AA2?$AA6@
CONST	SEGMENT
??_C@_1IK@DJDECODN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAs?$AA4?$AA0?$AA0?$AA2?$AA6@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'U', 00H, 's', 00H, 'e', 00H, 'r', 00H
	DB	's', 00H, '\', 00H, 's', 00H, '4', 00H, '0', 00H, '0', 00H, '2'
	DB	00H, '6', 00H, '7', 00H, '5', 00H, '\', 00H, 'D', 00H, 'o', 00H
	DB	'w', 00H, 'n', 00H, 'l', 00H, 'o', 00H, 'a', 00H, 'd', 00H, 's'
	DB	00H, '\', 00H, 'g', 00H, 'l', 00H, 'm', 00H, '-', 00H, '0', 00H
	DB	'.', 00H, '9', 00H, '.', 00H, '8', 00H, '.', 00H, '5', 00H, '\'
	DB	00H, 'g', 00H, 'l', 00H, 'm', 00H, '\', 00H, 'g', 00H, 'l', 00H
	DB	'm', 00H, '\', 00H, 'd', 00H, 'e', 00H, 't', 00H, 'a', 00H, 'i'
	DB	00H, 'l', 00H, '\', 00H, 't', 00H, 'y', 00H, 'p', 00H, 'e', 00H
	DB	'_', 00H, 'v', 00H, 'e', 00H, 'c', 00H, '2', 00H, '.', 00H, 'i'
	DB	00H, 'n', 00H, 'l', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1EA@LEKOKFNB@?$AA?$CC?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi@
CONST	SEGMENT
??_C@_1EA@LEKOKFNB@?$AA?$CC?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi@ DB '"'
	DB	00H, 'v', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H
	DB	' ', 00H, 's', 00H, 'u', 00H, 'b', 00H, 's', 00H, 'c', 00H, 'r'
	DB	00H, 'i', 00H, 'p', 00H, 't', 00H, ' ', 00H, 'o', 00H, 'u', 00H
	DB	't', 00H, ' ', 00H, 'o', 00H, 'f', 00H, ' ', 00H, 'r', 00H, 'a'
	DB	00H, 'n', 00H, 'g', 00H, 'e', 00H, '"', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1JG@ILDNFCDK@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAu?$AAn?$AAs@
CONST	SEGMENT
??_C@_1JG@ILDNFCDK@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAu?$AAn?$AAs@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'v', 00H, 'e', 00H
	DB	'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, '<', 00H, 'u', 00H, 'n'
	DB	00H, 's', 00H, 'i', 00H, 'g', 00H, 'n', 00H, 'e', 00H, 'd', 00H
	DB	' ', 00H, 'i', 00H, 'n', 00H, 't', 00H, ',', 00H, 'c', 00H, 'l'
	DB	00H, 'a', 00H, 's', 00H, 's', 00H, ' ', 00H, 's', 00H, 't', 00H
	DB	'd', 00H, ':', 00H, ':', 00H, 'a', 00H, 'l', 00H, 'l', 00H, 'o'
	DB	00H, 'c', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '<', 00H
	DB	'u', 00H, 'n', 00H, 's', 00H, 'i', 00H, 'g', 00H, 'n', 00H, 'e'
	DB	00H, 'd', 00H, ' ', 00H, 'i', 00H, 'n', 00H, 't', 00H, '>', 00H
	DB	' ', 00H, '>', 00H, ':', 00H, ':', 00H, 'o', 00H, 'p', 00H, 'e'
	DB	00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, ' ', 00H
	DB	'[', 00H, ']', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1MO@MBPFCBOF@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
CONST	SEGMENT
??_C@_1MO@MBPFCBOF@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'P', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'F', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'M', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'V', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 'S', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	'\', 00H, '2', 00H, '0', 00H, '1', 00H, '9', 00H, '\', 00H, 'C'
	DB	00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H, 'i', 00H
	DB	't', 00H, 'y', 00H, '\', 00H, 'V', 00H, 'C', 00H, '\', 00H, 'T'
	DB	00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'M', 00H
	DB	'S', 00H, 'V', 00H, 'C', 00H, '\', 00H, '1', 00H, '4', 00H, '.'
	DB	00H, '2', 00H, '9', 00H, '.', 00H, '3', 00H, '0', 00H, '0', 00H
	DB	'3', 00H, '7', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l'
	DB	00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'v', 00H, 'e', 00H
	DB	'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0GH@IJJCCHP@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
CONST	SEGMENT
??_C@_0GH@IJJCCHP@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@ DB 'C:\Prog'
	DB	'ram Files (x86)\Microsoft Visual Studio\2019\Community\VC\Too'
	DB	'ls\MSVC\14.29.30037\include\vector', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@PFKOHNJC@vector?5subscript?5out?5of?5range@
CONST	SEGMENT
??_C@_0BO@PFKOHNJC@vector?5subscript?5out?5of?5range@ DB 'vector subscrip'
	DB	't out of range', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@
CONST	SEGMENT
??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@ DB '"'
	DB	00H, 'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 'a', 00H, 'r', 00H, 'g', 00H, 'u', 00H, 'm'
	DB	00H, 'e', 00H, 'n', 00H, 't', 00H, '"', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1EK@NIFDJFDG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAd?$AAj?$AAu?$AAs?$AAt?$AA_?$AAm?$AAa@
CONST	SEGMENT
??_C@_1EK@NIFDJFDG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAd?$AAj?$AAu?$AAs?$AAt?$AA_?$AAm?$AAa@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'A', 00H
	DB	'd', 00H, 'j', 00H, 'u', 00H, 's', 00H, 't', 00H, '_', 00H, 'm'
	DB	00H, 'a', 00H, 'n', 00H, 'u', 00H, 'a', 00H, 'l', 00H, 'l', 00H
	DB	'y', 00H, '_', 00H, 'v', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'o'
	DB	00H, 'r', 00H, '_', 00H, 'a', 00H, 'l', 00H, 'i', 00H, 'g', 00H
	DB	'n', 00H, 'e', 00H, 'd', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1NA@FOAKNOEL@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
CONST	SEGMENT
??_C@_1NA@FOAKNOEL@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'P', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'F', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'M', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'V', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 'S', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	'\', 00H, '2', 00H, '0', 00H, '1', 00H, '9', 00H, '\', 00H, 'C'
	DB	00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H, 'i', 00H
	DB	't', 00H, 'y', 00H, '\', 00H, 'V', 00H, 'C', 00H, '\', 00H, 'T'
	DB	00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'M', 00H
	DB	'S', 00H, 'V', 00H, 'C', 00H, '\', 00H, '1', 00H, '4', 00H, '.'
	DB	00H, '2', 00H, '9', 00H, '.', 00H, '3', 00H, '0', 00H, '0', 00H
	DB	'3', 00H, '7', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l'
	DB	00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'x', 00H, 'm', 00H
	DB	'e', 00H, 'm', 00H, 'o', 00H, 'r', 00H, 'y', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0GI@KDIDHNIL@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
CONST	SEGMENT
??_C@_0GI@KDIDHNIL@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@ DB 'C:\Pro'
	DB	'gram Files (x86)\Microsoft Visual Studio\2019\Community\VC\To'
	DB	'ols\MSVC\14.29.30037\include\xmemory', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_02DKCKIIND@?$CFs@
CONST	SEGMENT
??_C@_02DKCKIIND@?$CFs@ DB '%s', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@FCMFBGOM@invalid?5argument@
CONST	SEGMENT
??_C@_0BB@FCMFBGOM@invalid?5argument@ DB 'invalid argument', 00H ; `string'
CONST	ENDS
;	COMDAT _CT??_R0?AVexception@std@@@8??0exception@std@@QEAA@AEBV01@@Z24
xdata$x	SEGMENT
_CT??_R0?AVexception@std@@@8??0exception@std@@QEAA@AEBV01@@Z24 DD 00H
	DD	imagerel ??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	018H
	DD	imagerel ??0exception@std@@QEAA@AEBV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DQ FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT _CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QEAA@AEBV01@@Z24
xdata$x	SEGMENT
_CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QEAA@AEBV01@@Z24 DD 010H
	DD	imagerel ??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	018H
	DD	imagerel ??0bad_alloc@std@@QEAA@AEBV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
data$r	SEGMENT
??_R0?AVbad_alloc@std@@@8 DQ FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVbad_alloc@std@@', 00H
data$r	ENDS
;	COMDAT _CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QEAA@AEBV01@@Z24
xdata$x	SEGMENT
_CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QEAA@AEBV01@@Z24 DD 00H
	DD	imagerel ??_R0?AVbad_array_new_length@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	018H
	DD	imagerel ??0bad_array_new_length@std@@QEAA@AEBV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_array_new_length@std@@@8
data$r	SEGMENT
??_R0?AVbad_array_new_length@std@@@8 DQ FLAT:??_7type_info@@6B@ ; std::bad_array_new_length `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVbad_array_new_length@std@@', 00H
data$r	ENDS
;	COMDAT _CTA3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
_CTA3?AVbad_array_new_length@std@@ DD 03H
	DD	imagerel _CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QEAA@AEBV01@@Z24
	DD	imagerel _CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QEAA@AEBV01@@Z24
	DD	imagerel _CT??_R0?AVexception@std@@@8??0exception@std@@QEAA@AEBV01@@Z24
xdata$x	ENDS
;	COMDAT _TI3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
_TI3?AVbad_array_new_length@std@@ DD 00H
	DD	imagerel ??1bad_array_new_length@std@@UEAA@XZ
	DD	00H
	DD	imagerel _CTA3?AVbad_array_new_length@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
CONST	SEGMENT
??_C@_0BF@KINCDENJ@bad?5array?5new?5length@ DB 'bad array new length', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7bad_array_new_length@std@@6B@
CONST	SEGMENT
??_7bad_array_new_length@std@@6B@ DQ FLAT:??_R4bad_array_new_length@std@@6B@ ; std::bad_array_new_length::`vftable'
	DQ	FLAT:??_Ebad_array_new_length@std@@UEAAPEAXI@Z
	DQ	FLAT:?what@exception@std@@UEBAPEBDXZ
CONST	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DQ FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DQ	FLAT:??_Ebad_alloc@std@@UEAAPEAXI@Z
	DQ	FLAT:?what@exception@std@@UEBAPEBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DQ FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DQ	FLAT:??_Eexception@std@@UEAAPEAXI@Z
	DQ	FLAT:?what@exception@std@@UEBAPEBDXZ
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$construct@II@?$_Default_allocator_traits@V?$allocator@I@std@@@std@@SAXAEAV?$allocator@I@1@QEAI$$QEAI@Z DD 021401H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$forward@I@std@@YA$$QEAIAEAI@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Voidify_iter@PEAI@std@@YAPEAXPEAI@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$compute_findMSB_32@I@detail@glm@@YAHI@Z DD 021e01H
	DD	070057209H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$compute_findMSB_32@I@detail@glm@@YAHI@Z$rtcName$0 DB 052H ; glm::detail::compute_findMSB_32<unsigned int>
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$compute_findMSB_32@I@detail@glm@@YAHI@Z$rtcVarDesc DD 024H ; glm::detail::compute_findMSB_32<unsigned int>
	DD	04H
	DQ	FLAT:??$compute_findMSB_32@I@detail@glm@@YAHI@Z$rtcName$0
	ORG $+48
??$compute_findMSB_32@I@detail@glm@@YAHI@Z$rtcFrameData DD 01H ; glm::detail::compute_findMSB_32<unsigned int>
	DD	00H
	DQ	FLAT:??$compute_findMSB_32@I@detail@glm@@YAHI@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$functor1@HI$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@H$0A@@3@P6AHI@ZAEBU?$tvec1@I$0A@@3@@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Emplace_back@I@?$_Uninitialized_backout_al@V?$allocator@I@std@@@std@@QEAAX$$QEAI@Z DD 020f01H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Copy_memmove@PEAIPEAI@std@@YAPEAIPEAI00@Z DD 021401H
	DD	07010b214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$move@AEAI@std@@YA$$QEAIAEAI@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Get_unwrapped@AEBQEAI@std@@YA?A_TAEBQEAI@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$construct@I$$V@?$_Default_allocator_traits@V?$allocator@I@std@@@std@@SAXAEAV?$allocator@I@1@QEAI@Z DD 020f01H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_To_address@PEAI@std@@YA?A_PAEBQEAI@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_findMSB_vec@I$0A@Utvec1@glm@@$0CA@@detail@glm@@SA?AU?$tvec1@H$0A@@3@AEBU?$tvec1@I$0A@@3@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_vec4_and@H$0A@$0?0$0CA@$0A@@detail@glm@@SA?AU?$tvec4@H$0A@@3@AEBU43@0@Z DD 021401H
	DD	070107214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_vec4_sub@H$0A@$0A@@detail@glm@@SA?AU?$tvec4@H$0A@@3@AEBU43@0@Z DD 021401H
	DD	070107214H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???$_Uninitialized_move@PEAIV?$allocator@I@std@@@std@@YAPEAIQEAI0PEAIAEAV?$allocator@I@0@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$_Uninitialized_move@PEAIV?$allocator@I@std@@@std@@YAPEAIQEAI0PEAIAEAV?$allocator@I@0@@Z DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??$_Uninitialized_move@PEAIV?$allocator@I@std@@@std@@YAPEAIQEAI0PEAIAEAV?$allocator@I@0@@Z DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0???$_Uninitialized_move@PEAIV?$allocator@I@std@@@std@@YAPEAIQEAI0PEAIAEAV?$allocator@I@0@@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$_Uninitialized_move@PEAIV?$allocator@I@std@@@std@@YAPEAIQEAI0PEAIAEAV?$allocator@I@0@@Z DB 028H
	DD	imagerel $stateUnwindMap$??$_Uninitialized_move@PEAIV?$allocator@I@std@@@std@@YAPEAIQEAI0PEAIAEAV?$allocator@I@0@@Z
	DD	imagerel $ip2state$??$_Uninitialized_move@PEAIV?$allocator@I@std@@@std@@YAPEAIQEAI0PEAIAEAV?$allocator@I@0@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Uninitialized_move@PEAIV?$allocator@I@std@@@std@@YAPEAIQEAI0PEAIAEAV?$allocator@I@0@@Z DD 022f11H
	DD	07015b219H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??$_Uninitialized_move@PEAIV?$allocator@I@std@@@std@@YAPEAIQEAI0PEAIAEAV?$allocator@I@0@@Z
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$_Uninitialized_move@PEAIV?$allocator@I@std@@@std@@YAPEAIQEAI0PEAIAEAV?$allocator@I@0@@Z$rtcName$0 DB 05fH ; std::_Uninitialized_move<unsigned int *,std::allocator<unsigned int> >
	DB	042H
	DB	061H
	DB	063H
	DB	06bH
	DB	06fH
	DB	075H
	DB	074H
	DB	00H
	ORG $+7
??$_Uninitialized_move@PEAIV?$allocator@I@std@@@std@@YAPEAIQEAI0PEAIAEAV?$allocator@I@0@@Z$rtcVarDesc DD 038H ; std::_Uninitialized_move<unsigned int *,std::allocator<unsigned int> >
	DD	018H
	DQ	FLAT:??$_Uninitialized_move@PEAIV?$allocator@I@std@@@std@@YAPEAIQEAI0PEAIAEAV?$allocator@I@0@@Z$rtcName$0
	ORG $+48
??$_Uninitialized_move@PEAIV?$allocator@I@std@@@std@@YAPEAIQEAI0PEAIAEAV?$allocator@I@0@@Z$rtcFrameData DD 01H ; std::_Uninitialized_move<unsigned int *,std::allocator<unsigned int> >
	DD	00H
	DQ	FLAT:??$_Uninitialized_move@PEAIV?$allocator@I@std@@@std@@YAPEAIQEAI0PEAIAEAV?$allocator@I@0@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Get_size_of_n@$03@std@@YA_K_K@Z DD 020a01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$min@_K@std@@YAAEB_KAEB_K0@Z DD 020f01H
	DD	0700b120fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$functor1@HH$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@H$0A@@3@P6AHH@ZAEBU43@@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$functor1@HH$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@H$0A@@3@P6AHH@ZAEBU43@@Z DD 021401H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$functor1@HH$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@H$0A@@3@P6AHH@ZAEBU43@@Z DD 021401H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$functor1@HH$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@H$0A@@3@P6AHH@ZAEBU43@@Z DD 021401H
	DD	070107214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?GH$0A@@glm@@YA?AU?$tvec1@H$0A@@0@AEBU10@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0_N$0A@@?$tvec1@H$0A@@glm@@QEAA@AEBU?$tvec1@_N$0A@@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$lessThan@H$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@H$0A@@0@0@Z DD 022a01H
	DD	070109214H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$lessThan@H$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@H$0A@@0@0@Z$rtcName$0 DB 052H ; glm::lessThan<int,0,glm::tvec1>
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$lessThan@H$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@H$0A@@0@0@Z$rtcVarDesc DD 024H ; glm::lessThan<int,0,glm::tvec1>
	DD	01H
	DQ	FLAT:??$lessThan@H$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@H$0A@@0@0@Z$rtcName$0
	ORG $+48
??$lessThan@H$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@H$0A@@0@0@Z$rtcFrameData DD 01H ; glm::lessThan<int,0,glm::tvec1>
	DD	00H
	DQ	FLAT:??$lessThan@H$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@H$0A@@0@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Emplace_back@$$V@?$_Uninitialized_backout_al@V?$allocator@I@std@@@std@@QEAAXXZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Release@?$_Uninitialized_backout_al@V?$allocator@I@std@@@std@@QEAAPEAIXZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$_Uninitialized_backout_al@V?$allocator@I@std@@@std@@QEAA@XZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$_Uninitialized_backout_al@V?$allocator@I@std@@@std@@QEAA@PEAIAEAV?$allocator@I@1@@Z DD 011001H
	DD	07010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Zero_range@PEAI@std@@YAPEAIQEAI0@Z DD 020f01H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Unfancy@I@std@@YAPEAIPEAI@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z DD 020a01H
	DD	07006920aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_sign@H$0A@Utvec1@glm@@$0A@$0A@@detail@glm@@SA?AU?$tvec1@H$0A@@3@AEBU43@@Z DD 020f01H
	DD	0700b720fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$forward@PEAU_Container_base12@std@@@std@@YA$$QEAPEAU_Container_base12@0@AEAPEAU10@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Voidify_iter@PEAU_Container_proxy@std@@@std@@YAPEAXPEAU_Container_proxy@0@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$addressof@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@AEAU10@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@2@QEAU_Container_proxy@2@_K@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$findMSB@I$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@H$0A@@0@AEBU?$tvec1@I$0A@@0@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_abs@I$0A@@detail@glm@@SAII@Z DD 010501H
	DD	07005H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?_4H@?$tvec4@H$0A@@glm@@QEAAAEAU01@AEBU01@@Z DD 031001H
	DD	0700c8210H
	DD	0600bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?ZH@?$tvec4@H$0A@@glm@@QEAAAEAU01@H@Z DD 030f01H
	DD	0700b820fH
	DD	0600aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_abs_vector@H$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@H$0A@@3@AEBU43@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_abs_vector@H$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@H$0A@@3@AEBU43@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_abs_vector@H$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@H$0A@@3@AEBU43@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_abs_vector@H$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@H$0A@@3@AEBU43@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_abs@G$0A@@detail@glm@@SAGG@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_abs@F$00@detail@glm@@SAFF@Z DD 020a01H
	DD	07006120aH
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???$_Uninitialized_value_construct_n@V?$allocator@I@std@@@std@@YAPEAIPEAI_KAEAV?$allocator@I@0@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$_Uninitialized_value_construct_n@V?$allocator@I@std@@@std@@YAPEAIPEAI_KAEAV?$allocator@I@0@@Z DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??$_Uninitialized_value_construct_n@V?$allocator@I@std@@@std@@YAPEAIPEAI_KAEAV?$allocator@I@0@@Z DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0???$_Uninitialized_value_construct_n@V?$allocator@I@std@@@std@@YAPEAIPEAI_KAEAV?$allocator@I@0@@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$_Uninitialized_value_construct_n@V?$allocator@I@std@@@std@@YAPEAIPEAI_KAEAV?$allocator@I@0@@Z DB 028H
	DD	imagerel $stateUnwindMap$??$_Uninitialized_value_construct_n@V?$allocator@I@std@@@std@@YAPEAIPEAI_KAEAV?$allocator@I@0@@Z
	DD	imagerel $ip2state$??$_Uninitialized_value_construct_n@V?$allocator@I@std@@@std@@YAPEAIPEAI_KAEAV?$allocator@I@0@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Uninitialized_value_construct_n@V?$allocator@I@std@@@std@@YAPEAIPEAI_KAEAV?$allocator@I@0@@Z DD 022a11H
	DD	07010b214H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??$_Uninitialized_value_construct_n@V?$allocator@I@std@@@std@@YAPEAIPEAI_KAEAV?$allocator@I@0@@Z
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$_Uninitialized_value_construct_n@V?$allocator@I@std@@@std@@YAPEAIPEAI_KAEAV?$allocator@I@0@@Z$rtcName$0 DB 05fH ; std::_Uninitialized_value_construct_n<std::allocator<unsigned int> >
	DB	042H
	DB	061H
	DB	063H
	DB	06bH
	DB	06fH
	DB	075H
	DB	074H
	DB	00H
	ORG $+7
??$_Uninitialized_value_construct_n@V?$allocator@I@std@@@std@@YAPEAIPEAI_KAEAV?$allocator@I@0@@Z$rtcVarDesc DD 038H ; std::_Uninitialized_value_construct_n<std::allocator<unsigned int> >
	DD	018H
	DQ	FLAT:??$_Uninitialized_value_construct_n@V?$allocator@I@std@@@std@@YAPEAIPEAI_KAEAV?$allocator@I@0@@Z$rtcName$0
	ORG $+48
??$_Uninitialized_value_construct_n@V?$allocator@I@std@@@std@@YAPEAIPEAI_KAEAV?$allocator@I@0@@Z$rtcFrameData DD 01H ; std::_Uninitialized_value_construct_n<std::allocator<unsigned int> >
	DD	00H
	DQ	FLAT:??$_Uninitialized_value_construct_n@V?$allocator@I@std@@@std@@YAPEAIPEAI_KAEAV?$allocator@I@0@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Get_size_of_n@$0BA@@std@@YA_K_K@Z DD 020a01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?DH$0A@@glm@@YA?AU?$tvec1@H$0A@@0@AEBU10@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?HH$0A@@glm@@YA?AU?$tvec1@H$0A@@0@AEBU10@H@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_ceilShift@H$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@H$0A@@3@AEBU43@H@Z DD 011001H
	DD	07010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_ceilShift@H$0A@Utvec1@glm@@$00@detail@glm@@SA?AU?$tvec1@H$0A@@3@AEBU43@H@Z DD 021401H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?UH$0A@@glm@@YA?AU?$tvec1@H$0A@@0@AEBU10@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?5H$0A@@glm@@YA?AU?$tvec1@H$0A@@0@AEBU10@H@Z DD 021401H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$sign@H$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@H$0A@@0@AEBU10@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?HI$0A@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@I@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_ceilShift@I$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@I$0A@@3@AEBU43@I@Z DD 011001H
	DD	07010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_ceilShift@I$0A@Utvec1@glm@@$00@detail@glm@@SA?AU?$tvec1@I$0A@@3@AEBU43@I@Z DD 021401H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?UI$0A@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?5I$0A@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@I@Z DD 021401H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?GI$0A@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@I@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Construct_in_place@U_Container_proxy@std@@PEAU_Container_base12@2@@std@@YAXAEAU_Container_proxy@0@$$QEAPEAU_Container_base12@0@@Z DD 020f01H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Unfancy@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@PEAU10@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z DB 060H
	DD	imagerel $ip2state$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z DD 020f19H
	DD	0700b320fH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?catch$0@?0???$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@IV?$allocator@I@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@IV?$allocator@I@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z DB 06H
	DB	00H
	DB	00H
	DB	'-', 03H
	DB	02H
	DB	0ccH
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$handlerMap$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@IV?$allocator@I@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z DB 02H
	DB	01H
	DB	080H
	DD	imagerel ?catch$0@?0???$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@IV?$allocator@I@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$tryMap$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@IV?$allocator@I@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z DB 02H
	DB	00H
	DB	00H
	DB	02H
	DD	imagerel $handlerMap$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@IV?$allocator@I@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@IV?$allocator@I@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z DB 04H
	DB	08H
	DB	010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@IV?$allocator@I@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z DB 038H
	DD	imagerel $stateUnwindMap$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@IV?$allocator@I@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z
	DD	imagerel $tryMap$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@IV?$allocator@I@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z
	DD	imagerel $ip2state$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@IV?$allocator@I@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@IV?$allocator@I@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z DD 021419H
	DD	07010d214H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@IV?$allocator@I@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$call@H@?$compute_ceilMultiple@$0A@$00@detail@glm@@SAHHH@Z DD 020d01H
	DD	07009120dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$call@N@?$compute_ceilMultiple@$00$00@detail@glm@@SANNN@Z DD 021101H
	DD	0700d5211H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$call@N@?$compute_floorMultiple@$00$00@detail@glm@@SANNN@Z DD 021101H
	DD	0700d5211H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$findMSB@I@glm@@YAHI@Z DD 020901H
	DD	070055209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$highestBitValue@I@ceilPowerOfTwo_advanced@@YAII@Z DD 020901H
	DD	070051209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec1@I$0A@@glm@@QEAA@I@Z DD 010a01H
	DD	0700aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_ceilPowerOfTwo@I$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@I$0A@@3@AEBU43@@Z DD 022501H
	DD	0700bb20fH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?call@?$compute_ceilPowerOfTwo@I$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@I$0A@@3@AEBU43@@Z$rtcName$0 DB 076H ; glm::detail::compute_ceilPowerOfTwo<unsigned int,0,glm::tvec1,0>::call
	DB	00H
	ORG $+14
?call@?$compute_ceilPowerOfTwo@I$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@I$0A@@3@AEBU43@@Z$rtcVarDesc DD 024H ; glm::detail::compute_ceilPowerOfTwo<unsigned int,0,glm::tvec1,0>::call
	DD	04H
	DQ	FLAT:?call@?$compute_ceilPowerOfTwo@I$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@I$0A@@3@AEBU43@@Z$rtcName$0
	ORG $+48
?call@?$compute_ceilPowerOfTwo@I$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@I$0A@@3@AEBU43@@Z$rtcFrameData DD 01H ; glm::detail::compute_ceilPowerOfTwo<unsigned int,0,glm::tvec1,0>::call
	DD	00H
	DQ	FLAT:?call@?$compute_ceilPowerOfTwo@I$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@I$0A@@3@AEBU43@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_ceilPowerOfTwo@H$0A@Utvec1@glm@@$00@detail@glm@@SA?AU?$tvec1@H$0A@@3@AEBU43@@Z DD 022b01H
	DD	0700bf212H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?call@?$compute_ceilPowerOfTwo@H$0A@Utvec1@glm@@$00@detail@glm@@SA?AU?$tvec1@H$0A@@3@AEBU43@@Z$rtcName$0 DB 053H ; glm::detail::compute_ceilPowerOfTwo<int,0,glm::tvec1,1>::call
	DB	069H
	DB	067H
	DB	06eH
	DB	00H
	ORG $+3
?call@?$compute_ceilPowerOfTwo@H$0A@Utvec1@glm@@$00@detail@glm@@SA?AU?$tvec1@H$0A@@3@AEBU43@@Z$rtcName$1 DB 076H ; glm::detail::compute_ceilPowerOfTwo<int,0,glm::tvec1,1>::call
	DB	00H
	ORG $+6
?call@?$compute_ceilPowerOfTwo@H$0A@Utvec1@glm@@$00@detail@glm@@SA?AU?$tvec1@H$0A@@3@AEBU43@@Z$rtcVarDesc DD 044H ; glm::detail::compute_ceilPowerOfTwo<int,0,glm::tvec1,1>::call
	DD	04H
	DQ	FLAT:?call@?$compute_ceilPowerOfTwo@H$0A@Utvec1@glm@@$00@detail@glm@@SA?AU?$tvec1@H$0A@@3@AEBU43@@Z$rtcName$1
	DD	024H
	DD	04H
	DQ	FLAT:?call@?$compute_ceilPowerOfTwo@H$0A@Utvec1@glm@@$00@detail@glm@@SA?AU?$tvec1@H$0A@@3@AEBU43@@Z$rtcName$0
	ORG $+96
?call@?$compute_ceilPowerOfTwo@H$0A@Utvec1@glm@@$00@detail@glm@@SA?AU?$tvec1@H$0A@@3@AEBU43@@Z$rtcFrameData DD 02H ; glm::detail::compute_ceilPowerOfTwo<int,0,glm::tvec1,1>::call
	DD	00H
	DQ	FLAT:?call@?$compute_ceilPowerOfTwo@H$0A@Utvec1@glm@@$00@detail@glm@@SA?AU?$tvec1@H$0A@@3@AEBU43@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$abs@I@glm@@YAII@Z DD 020901H
	DD	070053209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$equal@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@H$0A@@0@0@Z DD 022a01H
	DD	070109214H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$equal@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@H$0A@@0@0@Z$rtcName$0 DB 052H ; glm::equal<int,0,glm::tvec4>
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$equal@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@H$0A@@0@0@Z$rtcVarDesc DD 024H ; glm::equal<int,0,glm::tvec4>
	DD	04H
	DQ	FLAT:??$equal@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@H$0A@@0@0@Z$rtcName$0
	ORG $+48
??$equal@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@H$0A@@0@0@Z$rtcFrameData DD 01H ; glm::equal<int,0,glm::tvec4>
	DD	00H
	DQ	FLAT:??$equal@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@H$0A@@0@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?IH$0A@@glm@@YA?AU?$tvec4@H$0A@@0@AEBU10@0@Z DD 031501H
	DD	070116215H
	DD	06010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?GH$0A@@glm@@YA?AU?$tvec4@H$0A@@0@AEBU10@H@Z DD 031501H
	DD	070116215H
	DD	06010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$abs@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@H$0A@@0@AEBU10@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$equal@H$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@H$0A@@0@0@Z DD 032b01H
	DD	07011a215H
	DD	06010H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$equal@H$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@H$0A@@0@0@Z$rtcName$0 DB 052H ; glm::equal<int,0,glm::tvec3>
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$equal@H$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@H$0A@@0@0@Z$rtcVarDesc DD 024H ; glm::equal<int,0,glm::tvec3>
	DD	03H
	DQ	FLAT:??$equal@H$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@H$0A@@0@0@Z$rtcName$0
	ORG $+48
??$equal@H$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@H$0A@@0@0@Z$rtcFrameData DD 01H ; glm::equal<int,0,glm::tvec3>
	DD	00H
	DQ	FLAT:??$equal@H$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@H$0A@@0@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?IH$0A@@glm@@YA?AU?$tvec3@H$0A@@0@AEBU10@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?GH$0A@@glm@@YA?AU?$tvec3@H$0A@@0@AEBU10@H@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$abs@H$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@H$0A@@0@AEBU10@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$equal@H$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@H$0A@@0@0@Z DD 022a01H
	DD	070109214H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$equal@H$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@H$0A@@0@0@Z$rtcName$0 DB 052H ; glm::equal<int,0,glm::tvec2>
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$equal@H$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@H$0A@@0@0@Z$rtcVarDesc DD 024H ; glm::equal<int,0,glm::tvec2>
	DD	02H
	DQ	FLAT:??$equal@H$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@H$0A@@0@0@Z$rtcName$0
	ORG $+48
??$equal@H$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@H$0A@@0@0@Z$rtcFrameData DD 01H ; glm::equal<int,0,glm::tvec2>
	DD	00H
	DQ	FLAT:??$equal@H$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@H$0A@@0@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?IH$0A@@glm@@YA?AU?$tvec2@H$0A@@0@AEBU10@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?GH$0A@@glm@@YA?AU?$tvec2@H$0A@@0@AEBU10@H@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$abs@H$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@H$0A@@0@AEBU10@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$equal@H$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@H$0A@@0@0@Z DD 022a01H
	DD	070109214H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$equal@H$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@H$0A@@0@0@Z$rtcName$0 DB 052H ; glm::equal<int,0,glm::tvec1>
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$equal@H$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@H$0A@@0@0@Z$rtcVarDesc DD 024H ; glm::equal<int,0,glm::tvec1>
	DD	01H
	DQ	FLAT:??$equal@H$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@H$0A@@0@0@Z$rtcName$0
	ORG $+48
??$equal@H$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@H$0A@@0@0@Z$rtcFrameData DD 01H ; glm::equal<int,0,glm::tvec1>
	DD	00H
	DQ	FLAT:??$equal@H$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@H$0A@@0@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?IH$0A@@glm@@YA?AU?$tvec1@H$0A@@0@AEBU10@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?GH$0A@@glm@@YA?AU?$tvec1@H$0A@@0@AEBU10@H@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$abs@H$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@H$0A@@0@AEBU10@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$abs@G@glm@@YAGG@Z DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$abs@F@glm@@YAFF@Z DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_abs@N$00@detail@glm@@SANN@Z DD 020b01H
	DD	07007320bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z DB 060H
	DD	imagerel $ip2state$??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z DD 020f19H
	DD	0700b320fH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Destroy_range@V?$allocator@I@std@@@std@@YAXPEAIQEAIAEAV?$allocator@I@0@@Z DD 011001H
	DD	07010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QEAAX$$QEAV?$allocator@U_Container_proxy@std@@@1@@Z DD 020f01H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0$$V@?$_Compressed_pair@V?$allocator@I@std@@V?$_Vector_val@U?$_Simple_types@I@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$exchange@PEAU_Container_proxy@std@@$$T@std@@YAPEAU_Container_proxy@0@AEAPEAU10@$$QEA$$T@Z DD 020f01H
	DD	0700b120fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0I@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@I@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?allocate@?$allocator@U_Container_proxy@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Resize@U_Value_init_tag@std@@@?$vector@IV?$allocator@I@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z DD 021401H
	DD	07010b214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$ceilMultiple@H@glm@@YAHHH@Z DD 020d01H
	DD	07009320dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$ceilMultiple@N@glm@@YANNN@Z DD 021101H
	DD	0700d5211H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$floorMultiple@N@glm@@YANNN@Z DD 021101H
	DD	0700d5211H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$floorPowerOfTwo@I@glm@@YAII@Z DD 020901H
	DD	070055209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$roundPowerOfTwo@I@glm@@YAII@Z DD 020901H
	DD	070055209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$ceilPowerOfTwo_loop@I@ceilPowerOfTwo_advanced@@YAII@Z DD 020901H
	DD	070055209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Get_first@?$_Compressed_pair@V?$allocator@I@std@@V?$_Vector_val@U?$_Simple_types@I@std@@@2@$00@std@@QEBAAEBV?$allocator@I@2@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Get_first@?$_Compressed_pair@V?$allocator@I@std@@V?$_Vector_val@U?$_Simple_types@I@std@@@2@$00@std@@QEAAAEAV?$allocator@I@2@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$_Vector_val@U?$_Simple_types@I@std@@@std@@QEAA@XZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Getal@?$vector@IV?$allocator@I@std@@@std@@AEBAAEBV?$allocator@I@2@XZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Getal@?$vector@IV?$allocator@I@std@@@std@@AEAAAEAV?$allocator@I@2@XZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Orphan_range@?$vector@IV?$allocator@I@std@@@std@@AEBAXPEAI0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0??_Orphan_range_locked@?$vector@IV?$allocator@I@std@@@std@@AEBAXPEAI0@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?_Orphan_range_locked@?$vector@IV?$allocator@I@std@@@std@@AEBAXPEAI0@Z DB 06H
	DB	00H
	DB	00H
	DB	'v'
	DB	02H
	DB	'*'
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?_Orphan_range_locked@?$vector@IV?$allocator@I@std@@@std@@AEBAXPEAI0@Z DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0??_Orphan_range_locked@?$vector@IV?$allocator@I@std@@@std@@AEBAXPEAI0@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$?_Orphan_range_locked@?$vector@IV?$allocator@I@std@@@std@@AEBAXPEAI0@Z DB 028H
	DD	imagerel $stateUnwindMap$?_Orphan_range_locked@?$vector@IV?$allocator@I@std@@@std@@AEBAXPEAI0@Z
	DD	imagerel $ip2state$?_Orphan_range_locked@?$vector@IV?$allocator@I@std@@@std@@AEBAXPEAI0@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Orphan_range_locked@?$vector@IV?$allocator@I@std@@@std@@AEBAXPEAI0@Z DD 022a11H
	DD	070107214H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$?_Orphan_range_locked@?$vector@IV?$allocator@I@std@@@std@@AEBAXPEAI0@Z
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?_Orphan_range_locked@?$vector@IV?$allocator@I@std@@@std@@AEBAXPEAI0@Z$rtcName$0 DB 05fH ; std::vector<unsigned int,std::allocator<unsigned int> >::_Orphan_range_locked
	DB	04cH
	DB	06fH
	DB	063H
	DB	06bH
	DB	00H
	ORG $+10
?_Orphan_range_locked@?$vector@IV?$allocator@I@std@@@std@@AEBAXPEAI0@Z$rtcVarDesc DD 024H ; std::vector<unsigned int,std::allocator<unsigned int> >::_Orphan_range_locked
	DD	04H
	DQ	FLAT:?_Orphan_range_locked@?$vector@IV?$allocator@I@std@@@std@@AEBAXPEAI0@Z$rtcName$0
	ORG $+48
?_Orphan_range_locked@?$vector@IV?$allocator@I@std@@@std@@AEBAXPEAI0@Z$rtcFrameData DD 01H ; std::vector<unsigned int,std::allocator<unsigned int> >::_Orphan_range_locked
	DD	00H
	DQ	FLAT:?_Orphan_range_locked@?$vector@IV?$allocator@I@std@@@std@@AEBAXPEAI0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Orphan_range_unlocked@?$vector@IV?$allocator@I@std@@@std@@AEBAXPEAI0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Xlength@?$vector@IV?$allocator@I@std@@@std@@CAXXZ DD 020601H
	DD	070023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?_Tidy@?$vector@IV?$allocator@I@std@@@std@@AEAAXXZ DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$?_Tidy@?$vector@IV?$allocator@I@std@@@std@@AEAAXXZ DB 060H
	DD	imagerel $ip2state$?_Tidy@?$vector@IV?$allocator@I@std@@@std@@AEAAXXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Tidy@?$vector@IV?$allocator@I@std@@@std@@AEAAXXZ DD 020a19H
	DD	07006920aH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$?_Tidy@?$vector@IV?$allocator@I@std@@@std@@AEAAXXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Change_array@?$vector@IV?$allocator@I@std@@@std@@AEAAXQEAI_K1@Z DD 021901H
	DD	070159219H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Calculate_growth@?$vector@IV?$allocator@I@std@@@std@@AEBA_K_K@Z DD 020f01H
	DD	0700b720fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Destroy@?$vector@IV?$allocator@I@std@@@std@@AEAAXPEAI0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Umove_if_noexcept@?$vector@IV?$allocator@I@std@@@std@@AEAAXPEAI00@Z DD 021901H
	DD	070157219H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Umove_if_noexcept1@?$vector@IV?$allocator@I@std@@@std@@AEAAXPEAI00U?$integral_constant@_N$00@2@@Z DD 021901H
	DD	070153219H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Ufill@?$vector@IV?$allocator@I@std@@@std@@AEAAPEAIPEAI_KU_Value_init_tag@2@@Z DD 021901H
	DD	070153219H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$vector@IV?$allocator@I@std@@@std@@QEAAAEAI_K@Z DD 020f01H
	DD	0700b720fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?capacity@?$vector@IV?$allocator@I@std@@@std@@QEBA_KXZ DD 020a01H
	DD	07006120aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?max_size@?$vector@IV?$allocator@I@std@@@std@@QEBA_KXZ DD 020a01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?size@?$vector@IV?$allocator@I@std@@@std@@QEBA_KXZ DD 020a01H
	DD	07006120aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?resize@?$vector@IV?$allocator@I@std@@@std@@QEAAX_K@Z DD 020f01H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$vector@IV?$allocator@I@std@@@std@@QEAA@XZ DD 022001H
	DD	07006920aH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??1?$vector@IV?$allocator@I@std@@@std@@QEAA@XZ$rtcName$0 DB 024H ; std::vector<unsigned int,std::allocator<unsigned int> >::~vector<unsigned int,std::allocator<unsigned int> >
	DB	053H
	DB	031H
	DB	00H
	ORG $+12
??1?$vector@IV?$allocator@I@std@@@std@@QEAA@XZ$rtcVarDesc DD 034H ; std::vector<unsigned int,std::allocator<unsigned int> >::~vector<unsigned int,std::allocator<unsigned int> >
	DD	01H
	DQ	FLAT:??1?$vector@IV?$allocator@I@std@@@std@@QEAA@XZ$rtcName$0
	ORG $+48
??1?$vector@IV?$allocator@I@std@@@std@@QEAA@XZ$rtcFrameData DD 01H ; std::vector<unsigned int,std::allocator<unsigned int> >::~vector<unsigned int,std::allocator<unsigned int> >
	DD	00H
	DQ	FLAT:??1?$vector@IV?$allocator@I@std@@@std@@QEAA@XZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0?$vector@IV?$allocator@I@std@@@std@@QEAA@XZ DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??0?$vector@IV?$allocator@I@std@@@std@@QEAA@XZ DB 060H
	DD	imagerel $ip2state$??0?$vector@IV?$allocator@I@std@@@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$vector@IV?$allocator@I@std@@@std@@QEAA@XZ DD 020a19H
	DD	07006520aH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??0?$vector@IV?$allocator@I@std@@@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?max_size@?$_Default_allocator_traits@V?$allocator@I@std@@@std@@SA_KAEBV?$allocator@I@2@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?allocate@?$allocator@I@std@@QEAAPEAI_K@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?deallocate@?$allocator@I@std@@QEAAXQEAI_K@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$allocator@I@std@@QEAA@XZ DD 010601H
	DD	07006H
xdata	ENDS
voltbl	SEGMENT
_volmd	DDSymXIndex: 	FLAT:?dtor$0@?0??perf@ceilPowerOfTwo_advanced@@YAHXZ@4HA
	DD	00H
	DD	05H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$ceilPowerOfTwo@I@glm@@YAII@Z DD 020901H
	DD	070055209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$ceilPowerOfTwo@H@glm@@YAHH@Z DD 020901H
	DD	070055209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$isPowerOfTwo@I@glm@@YA_NI@Z DD 020901H
	DD	070055209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z DD 020a01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$equal@_N$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU10@0@Z DD 022a01H
	DD	070109214H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$equal@_N$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU10@0@Z$rtcName$0 DB 052H ; glm::equal<bool,0,glm::tvec4>
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$equal@_N$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU10@0@Z$rtcVarDesc DD 024H ; glm::equal<bool,0,glm::tvec4>
	DD	04H
	DQ	FLAT:??$equal@_N$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU10@0@Z$rtcName$0
	ORG $+48
??$equal@_N$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU10@0@Z$rtcFrameData DD 01H ; glm::equal<bool,0,glm::tvec4>
	DD	00H
	DQ	FLAT:??$equal@_N$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU10@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$isPowerOfTwo@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@H$0A@@0@@Z DD 022b01H
	DD	0700bf212H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$isPowerOfTwo@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@H$0A@@0@@Z$rtcName$0 DB 052H ; glm::isPowerOfTwo<int,0,glm::tvec4>
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$isPowerOfTwo@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@H$0A@@0@@Z$rtcVarDesc DD 028H ; glm::isPowerOfTwo<int,0,glm::tvec4>
	DD	010H
	DQ	FLAT:??$isPowerOfTwo@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@H$0A@@0@@Z$rtcName$0
	ORG $+48
??$isPowerOfTwo@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@H$0A@@0@@Z$rtcFrameData DD 01H ; glm::isPowerOfTwo<int,0,glm::tvec4>
	DD	00H
	DQ	FLAT:??$isPowerOfTwo@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@H$0A@@0@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec4@H$0A@@glm@@QEAA@HHHH@Z DD 011401H
	DD	07014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec4@H$0A@@glm@@QEAA@H@Z DD 010a01H
	DD	0700aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec4@H$0A@@glm@@QEBAAEBHH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tvec4@H$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec4@_N$0A@@glm@@QEAA@_N@Z DD 010a01H
	DD	0700aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec4@_N$0A@@glm@@QEAA@W4ctor@1@@Z DD 010a01H
	DD	0700aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec4@_N$0A@@glm@@QEBAAEB_NH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec4@_N$0A@@glm@@QEAAAEA_NH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tvec4@_N$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$all@$0A@Utvec3@glm@@@glm@@YA_NAEBU?$tvec3@_N$0A@@0@@Z DD 020a01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$equal@_N$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU10@0@Z DD 032b01H
	DD	07011a215H
	DD	06010H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$equal@_N$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU10@0@Z$rtcName$0 DB 052H ; glm::equal<bool,0,glm::tvec3>
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$equal@_N$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU10@0@Z$rtcVarDesc DD 024H ; glm::equal<bool,0,glm::tvec3>
	DD	03H
	DQ	FLAT:??$equal@_N$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU10@0@Z$rtcName$0
	ORG $+48
??$equal@_N$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU10@0@Z$rtcFrameData DD 01H ; glm::equal<bool,0,glm::tvec3>
	DD	00H
	DQ	FLAT:??$equal@_N$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU10@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$isPowerOfTwo@H$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@H$0A@@0@@Z DD 022801H
	DD	0700bd20fH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$isPowerOfTwo@H$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@H$0A@@0@@Z$rtcName$0 DB 052H ; glm::isPowerOfTwo<int,0,glm::tvec3>
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$isPowerOfTwo@H$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@H$0A@@0@@Z$rtcVarDesc DD 028H ; glm::isPowerOfTwo<int,0,glm::tvec3>
	DD	0cH
	DQ	FLAT:??$isPowerOfTwo@H$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@H$0A@@0@@Z$rtcName$0
	ORG $+48
??$isPowerOfTwo@H$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@H$0A@@0@@Z$rtcFrameData DD 01H ; glm::isPowerOfTwo<int,0,glm::tvec3>
	DD	00H
	DQ	FLAT:??$isPowerOfTwo@H$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@H$0A@@0@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec3@H$0A@@glm@@QEAA@HHH@Z DD 011401H
	DD	07014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec3@H$0A@@glm@@QEAA@H@Z DD 010a01H
	DD	0700aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec3@H$0A@@glm@@QEBAAEBHH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tvec3@H$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec3@_N$0A@@glm@@QEAA@_N@Z DD 010a01H
	DD	0700aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec3@_N$0A@@glm@@QEAA@W4ctor@1@@Z DD 010a01H
	DD	0700aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec3@_N$0A@@glm@@QEBAAEB_NH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec3@_N$0A@@glm@@QEAAAEA_NH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tvec3@_N$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$all@$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@_N$0A@@0@@Z DD 020a01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$equal@_N$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU10@0@Z DD 022a01H
	DD	070109214H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$equal@_N$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU10@0@Z$rtcName$0 DB 052H ; glm::equal<bool,0,glm::tvec2>
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$equal@_N$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU10@0@Z$rtcVarDesc DD 024H ; glm::equal<bool,0,glm::tvec2>
	DD	02H
	DQ	FLAT:??$equal@_N$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU10@0@Z$rtcName$0
	ORG $+48
??$equal@_N$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU10@0@Z$rtcFrameData DD 01H ; glm::equal<bool,0,glm::tvec2>
	DD	00H
	DQ	FLAT:??$equal@_N$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU10@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$isPowerOfTwo@H$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@H$0A@@0@@Z DD 022501H
	DD	0700bb20fH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$isPowerOfTwo@H$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@H$0A@@0@@Z$rtcName$0 DB 052H ; glm::isPowerOfTwo<int,0,glm::tvec2>
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$isPowerOfTwo@H$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@H$0A@@0@@Z$rtcVarDesc DD 028H ; glm::isPowerOfTwo<int,0,glm::tvec2>
	DD	08H
	DQ	FLAT:??$isPowerOfTwo@H$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@H$0A@@0@@Z$rtcName$0
	ORG $+48
??$isPowerOfTwo@H$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@H$0A@@0@@Z$rtcFrameData DD 01H ; glm::isPowerOfTwo<int,0,glm::tvec2>
	DD	00H
	DQ	FLAT:??$isPowerOfTwo@H$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@H$0A@@0@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec2@H$0A@@glm@@QEAA@HH@Z DD 010f01H
	DD	0700fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec2@H$0A@@glm@@QEAA@H@Z DD 010a01H
	DD	0700aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec2@H$0A@@glm@@QEBAAEBHH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tvec2@H$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec2@_N$0A@@glm@@QEAA@_N@Z DD 010a01H
	DD	0700aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec2@_N$0A@@glm@@QEAA@W4ctor@1@@Z DD 010a01H
	DD	0700aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec2@_N$0A@@glm@@QEBAAEB_NH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec2@_N$0A@@glm@@QEAAAEA_NH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tvec2@_N$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$all@$0A@Utvec1@glm@@@glm@@YA_NAEBU?$tvec1@_N$0A@@0@@Z DD 020a01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$equal@_N$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU10@0@Z DD 022a01H
	DD	070109214H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$equal@_N$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU10@0@Z$rtcName$0 DB 052H ; glm::equal<bool,0,glm::tvec1>
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$equal@_N$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU10@0@Z$rtcVarDesc DD 024H ; glm::equal<bool,0,glm::tvec1>
	DD	01H
	DQ	FLAT:??$equal@_N$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU10@0@Z$rtcName$0
	ORG $+48
??$equal@_N$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU10@0@Z$rtcFrameData DD 01H ; glm::equal<bool,0,glm::tvec1>
	DD	00H
	DQ	FLAT:??$equal@_N$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU10@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$isPowerOfTwo@H$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@H$0A@@0@@Z DD 022501H
	DD	0700b920fH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$isPowerOfTwo@H$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@H$0A@@0@@Z$rtcName$0 DB 052H ; glm::isPowerOfTwo<int,0,glm::tvec1>
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$isPowerOfTwo@H$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@H$0A@@0@@Z$rtcVarDesc DD 024H ; glm::isPowerOfTwo<int,0,glm::tvec1>
	DD	04H
	DQ	FLAT:??$isPowerOfTwo@H$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@H$0A@@0@@Z$rtcName$0
	ORG $+48
??$isPowerOfTwo@H$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@H$0A@@0@@Z$rtcFrameData DD 01H ; glm::isPowerOfTwo<int,0,glm::tvec1>
	DD	00H
	DQ	FLAT:??$isPowerOfTwo@H$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@H$0A@@0@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec1@H$0A@@glm@@QEAA@H@Z DD 010a01H
	DD	0700aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec1@H$0A@@glm@@QEBAAEBHH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tvec1@H$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec1@_N$0A@@glm@@QEAA@_N@Z DD 010a01H
	DD	0700aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec1@_N$0A@@glm@@QEAA@W4ctor@1@@Z DD 010a01H
	DD	0700aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec1@_N$0A@@glm@@QEBAAEB_NH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec1@_N$0A@@glm@@QEAAAEA_NH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tvec1@_N$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$isPowerOfTwo@H@glm@@YA_NH@Z DD 020901H
	DD	070055209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$isPowerOfTwo@G@glm@@YA_NG@Z DD 020a01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$isPowerOfTwo@F@glm@@YA_NF@Z DD 020a01H
	DD	07006520aH
xdata	ENDS
voltbl	SEGMENT
_volmd	DDSymXIndex: 	FLAT:?test_int@ceilMultiple@@YAHXZ
	DD	024H
	DD	0252H
_volmd	DDSymXIndex: 	FLAT:?test_float@ceilMultiple@@YAHXZ
	DD	024H
	DD	0175H
_volmd	DDSymXIndex: 	FLAT:?test_float@floorMultiple@@YAHXZ
	DD	024H
	DD	0175H
_volmd	DDSymXIndex: 	FLAT:?test_uint32@ceilPowerOfTwo_advanced@@YAHXZ
	DD	024H
	DD	0193H
_volmd	DDSymXIndex: 	FLAT:?test_int32@ceilPowerOfTwo_advanced@@YAHXZ
	DD	024H
	DD	01bfH
_volmd	DDSymXIndex: 	FLAT:?test_uint32@isPowerOfTwo@@YAHXZ
	DD	024H
	DD	0118H
_volmd	DDSymXIndex: 	FLAT:?test_int32@isPowerOfTwo@@YAHXZ
	DD	024H
	DD	048cH
_volmd	DDSymXIndex: 	FLAT:?test_uint16@isPowerOfTwo@@YAHXZ
	DD	024H
	DD	0113H
_volmd	DDSymXIndex: 	FLAT:?test_int16@isPowerOfTwo@@YAHXZ
	DD	024H
	DD	0116H
voltbl	ENDS
xdata	SEGMENT
$unwind$?test_int16@isPowerOfTwo@@YAHXZ DD 022919H
	DD	07002f209H
	DD	imagerel __GSHandlerCheck
	DD	070H
$unwind$?test_uint16@isPowerOfTwo@@YAHXZ DD 022919H
	DD	07002f209H
	DD	imagerel __GSHandlerCheck
	DD	070H
$unwind$?test_int32@isPowerOfTwo@@YAHXZ DD 032c19H
	DD	0340109H
	DD	07002H
	DD	imagerel __GSHandlerCheck
	DD	0198H
$unwind$?test_uint32@isPowerOfTwo@@YAHXZ DD 032c19H
	DD	0140109H
	DD	07002H
	DD	imagerel __GSHandlerCheck
	DD	090H
$unwind$?test@isPowerOfTwo@@YAHXZ DD 020601H
	DD	070025206H
$unwind$?test_int32@ceilPowerOfTwo_advanced@@YAHXZ DD 032c19H
	DD	01a0109H
	DD	07002H
	DD	imagerel __GSHandlerCheck
	DD	0c0H
$unwind$?test_uint32@ceilPowerOfTwo_advanced@@YAHXZ DD 032c19H
	DD	0180109H
	DD	07002H
	DD	imagerel __GSHandlerCheck
	DD	0b0H
$unwind$?perf@ceilPowerOfTwo_advanced@@YAHXZ DD 031a11H
	DD	0120109H
	DD	07002H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$?perf@ceilPowerOfTwo_advanced@@YAHXZ
$cppxdata$?perf@ceilPowerOfTwo_advanced@@YAHXZ DB 028H
	DD	imagerel $stateUnwindMap$?perf@ceilPowerOfTwo_advanced@@YAHXZ
	DD	imagerel $ip2state$?perf@ceilPowerOfTwo_advanced@@YAHXZ
$stateUnwindMap$?perf@ceilPowerOfTwo_advanced@@YAHXZ DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0??perf@ceilPowerOfTwo_advanced@@YAHXZ@4HA
$ip2state$?perf@ceilPowerOfTwo_advanced@@YAHXZ DB 06H
	DB	00H
	DB	00H
	DB	'Z'
	DB	02H
	DB	'i', 04H
	DB	00H
	ORG $+1
$unwind$?dtor$0@?0??perf@ceilPowerOfTwo_advanced@@YAHXZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
$unwind$?test@ceilPowerOfTwo_advanced@@YAHXZ DD 020601H
	DD	070025206H
$unwind$?test@roundPowerOfTwo@@YAHXZ DD 020601H
	DD	07002b206H
$unwind$?test@floorPowerOfTwo@@YAHXZ DD 020601H
	DD	070027206H
$unwind$?test@ceilPowerOfTwo@@YAHXZ DD 020601H
	DD	070027206H
$unwind$?test_float@floorMultiple@@YAHXZ DD 032c19H
	DD	0180109H
	DD	07002H
	DD	imagerel __GSHandlerCheck
	DD	0b8H
$unwind$?test@floorMultiple@@YAHXZ DD 020601H
	DD	070025206H
$unwind$?test_float@ceilMultiple@@YAHXZ DD 032c19H
	DD	0180109H
	DD	07002H
	DD	imagerel __GSHandlerCheck
	DD	0b8H
$unwind$?test_int@ceilMultiple@@YAHXZ DD 032c19H
	DD	0200109H
	DD	07002H
	DD	imagerel __GSHandlerCheck
	DD	0f0H
$unwind$?test@ceilMultiple@@YAHXZ DD 020601H
	DD	070025206H
$unwind$main DD	020601H
	DD	070025206H
xdata	ENDS
CONST	SEGMENT
?test_int16@isPowerOfTwo@@YAHXZ$rtcName$0 DB 044H	; isPowerOfTwo::test_int16
	DB	061H
	DB	074H
	DB	061H
	DB	00H
	ORG $+3
?test_int16@isPowerOfTwo@@YAHXZ$rtcVarDesc DD 028H	; isPowerOfTwo::test_int16
	DD	018H
	DQ	FLAT:?test_int16@isPowerOfTwo@@YAHXZ$rtcName$0
	ORG $+48
?test_int16@isPowerOfTwo@@YAHXZ$rtcFrameData DD 01H	; isPowerOfTwo::test_int16
	DD	00H
	DQ	FLAT:?test_int16@isPowerOfTwo@@YAHXZ$rtcVarDesc
?test_uint16@isPowerOfTwo@@YAHXZ$rtcName$0 DB 044H	; isPowerOfTwo::test_uint16
	DB	061H
	DB	074H
	DB	061H
	DB	00H
	ORG $+3
?test_uint16@isPowerOfTwo@@YAHXZ$rtcFrameData DD 01H	; isPowerOfTwo::test_uint16
	DD	00H
	DQ	FLAT:?test_uint16@isPowerOfTwo@@YAHXZ$rtcVarDesc
?test_int32@isPowerOfTwo@@YAHXZ$rtcName$0 DB 044H	; isPowerOfTwo::test_int32
	DB	061H
	DB	074H
	DB	061H
	DB	00H
	ORG $+3
?test_uint16@isPowerOfTwo@@YAHXZ$rtcVarDesc DD 028H	; isPowerOfTwo::test_uint16
	DD	018H
	DQ	FLAT:?test_uint16@isPowerOfTwo@@YAHXZ$rtcName$0
	ORG $+48
?test_int32@isPowerOfTwo@@YAHXZ$rtcName$1 DB 052H	; isPowerOfTwo::test_int32
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+1
?test_int32@isPowerOfTwo@@YAHXZ$rtcName$2 DB 052H	; isPowerOfTwo::test_int32
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+1
?test_int32@isPowerOfTwo@@YAHXZ$rtcName$3 DB 052H	; isPowerOfTwo::test_int32
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+1
?test_int32@isPowerOfTwo@@YAHXZ$rtcName$4 DB 052H	; isPowerOfTwo::test_int32
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+1
?test_int32@isPowerOfTwo@@YAHXZ$rtcVarDesc DD 0124H	; isPowerOfTwo::test_int32
	DD	04H
	DQ	FLAT:?test_int32@isPowerOfTwo@@YAHXZ$rtcName$4
	DD	0f4H
	DD	03H
	DQ	FLAT:?test_int32@isPowerOfTwo@@YAHXZ$rtcName$3
	DD	0c4H
	DD	02H
	DQ	FLAT:?test_int32@isPowerOfTwo@@YAHXZ$rtcName$2
	DD	094H
	DD	01H
	DQ	FLAT:?test_int32@isPowerOfTwo@@YAHXZ$rtcName$1
	DD	028H
	DD	030H
	DQ	FLAT:?test_int32@isPowerOfTwo@@YAHXZ$rtcName$0
	ORG $+240
?test_int32@isPowerOfTwo@@YAHXZ$rtcFrameData DD 05H	; isPowerOfTwo::test_int32
	DD	00H
	DQ	FLAT:?test_int32@isPowerOfTwo@@YAHXZ$rtcVarDesc
?test_uint32@isPowerOfTwo@@YAHXZ$rtcName$0 DB 044H	; isPowerOfTwo::test_uint32
	DB	061H
	DB	074H
	DB	061H
	DB	00H
	ORG $+3
?test_uint32@isPowerOfTwo@@YAHXZ$rtcFrameData DD 01H	; isPowerOfTwo::test_uint32
	DD	00H
	DQ	FLAT:?test_uint32@isPowerOfTwo@@YAHXZ$rtcVarDesc
?test_int32@ceilPowerOfTwo_advanced@@YAHXZ$rtcName$0 DB 044H ; ceilPowerOfTwo_advanced::test_int32
	DB	061H
	DB	074H
	DB	061H
	DB	00H
	ORG $+3
?test_uint32@isPowerOfTwo@@YAHXZ$rtcVarDesc DD 028H	; isPowerOfTwo::test_uint32
	DD	030H
	DQ	FLAT:?test_uint32@isPowerOfTwo@@YAHXZ$rtcName$0
	ORG $+48
?test_int32@ceilPowerOfTwo_advanced@@YAHXZ$rtcVarDesc DD 030H ; ceilPowerOfTwo_advanced::test_int32
	DD	060H
	DQ	FLAT:?test_int32@ceilPowerOfTwo_advanced@@YAHXZ$rtcName$0
	ORG $+48
?test_int32@ceilPowerOfTwo_advanced@@YAHXZ$rtcFrameData DD 01H ; ceilPowerOfTwo_advanced::test_int32
	DD	00H
	DQ	FLAT:?test_int32@ceilPowerOfTwo_advanced@@YAHXZ$rtcVarDesc
?test_uint32@ceilPowerOfTwo_advanced@@YAHXZ$rtcName$0 DB 044H ; ceilPowerOfTwo_advanced::test_uint32
	DB	061H
	DB	074H
	DB	061H
	DB	00H
	ORG $+3
?test_uint32@ceilPowerOfTwo_advanced@@YAHXZ$rtcFrameData DD 01H ; ceilPowerOfTwo_advanced::test_uint32
	DD	00H
	DQ	FLAT:?test_uint32@ceilPowerOfTwo_advanced@@YAHXZ$rtcVarDesc
?perf@ceilPowerOfTwo_advanced@@YAHXZ$rtcName$0 DB 076H	; ceilPowerOfTwo_advanced::perf
	DB	00H
	ORG $+6
?test_uint32@ceilPowerOfTwo_advanced@@YAHXZ$rtcVarDesc DD 030H ; ceilPowerOfTwo_advanced::test_uint32
	DD	050H
	DQ	FLAT:?test_uint32@ceilPowerOfTwo_advanced@@YAHXZ$rtcName$0
	ORG $+48
?perf@ceilPowerOfTwo_advanced@@YAHXZ$rtcVarDesc DD 038H	; ceilPowerOfTwo_advanced::perf
	DD	020H
	DQ	FLAT:?perf@ceilPowerOfTwo_advanced@@YAHXZ$rtcName$0
	ORG $+48
?perf@ceilPowerOfTwo_advanced@@YAHXZ$rtcFrameData DD 01H ; ceilPowerOfTwo_advanced::perf
	DD	00H
	DQ	FLAT:?perf@ceilPowerOfTwo_advanced@@YAHXZ$rtcVarDesc
?test_float@floorMultiple@@YAHXZ$rtcName$0 DB 044H	; floorMultiple::test_float
	DB	061H
	DB	074H
	DB	061H
	DB	00H
	ORG $+3
?test_float@floorMultiple@@YAHXZ$rtcName$1 DB 052H	; floorMultiple::test_float
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+1
?test_float@floorMultiple@@YAHXZ$rtcVarDesc DD 098H	; floorMultiple::test_float
	DD	08H
	DQ	FLAT:?test_float@floorMultiple@@YAHXZ$rtcName$1
	DD	030H
	DD	040H
	DQ	FLAT:?test_float@floorMultiple@@YAHXZ$rtcName$0
	ORG $+96
?test_float@floorMultiple@@YAHXZ$rtcFrameData DD 02H	; floorMultiple::test_float
	DD	00H
	DQ	FLAT:?test_float@floorMultiple@@YAHXZ$rtcVarDesc
?test_float@ceilMultiple@@YAHXZ$rtcName$0 DB 044H	; ceilMultiple::test_float
	DB	061H
	DB	074H
	DB	061H
	DB	00H
	ORG $+3
?test_float@ceilMultiple@@YAHXZ$rtcName$1 DB 052H	; ceilMultiple::test_float
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+1
?test_float@ceilMultiple@@YAHXZ$rtcVarDesc DD 098H	; ceilMultiple::test_float
	DD	08H
	DQ	FLAT:?test_float@ceilMultiple@@YAHXZ$rtcName$1
	DD	030H
	DD	040H
	DQ	FLAT:?test_float@ceilMultiple@@YAHXZ$rtcName$0
	ORG $+96
?test_float@ceilMultiple@@YAHXZ$rtcFrameData DD 02H	; ceilMultiple::test_float
	DD	00H
	DQ	FLAT:?test_float@ceilMultiple@@YAHXZ$rtcVarDesc
?test_int@ceilMultiple@@YAHXZ$rtcName$0 DB 044H		; ceilMultiple::test_int
	DB	061H
	DB	074H
	DB	061H
	DB	00H
	ORG $+3
?test_int@ceilMultiple@@YAHXZ$rtcFrameData DD 01H	; ceilMultiple::test_int
	DD	00H
	DQ	FLAT:?test_int@ceilMultiple@@YAHXZ$rtcVarDesc
	ORG $+8
?test_int@ceilMultiple@@YAHXZ$rtcVarDesc DD 030H	; ceilMultiple::test_int
	DD	090H
	DQ	FLAT:?test_int@ceilMultiple@@YAHXZ$rtcName$0
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Orphan_all_locked@_Container_base12@std@@AEAAXXZ DD 022001H
	DD	07006720aH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?_Orphan_all_locked@_Container_base12@std@@AEAAXXZ$rtcName$0 DB 05fH ; std::_Container_base12::_Orphan_all_locked
	DB	04cH
	DB	06fH
	DB	063H
	DB	06bH
	DB	00H
	ORG $+10
?_Orphan_all_locked@_Container_base12@std@@AEAAXXZ$rtcVarDesc DD 024H ; std::_Container_base12::_Orphan_all_locked
	DD	04H
	DQ	FLAT:?_Orphan_all_locked@_Container_base12@std@@AEAAXXZ$rtcName$0
	ORG $+48
?_Orphan_all_locked@_Container_base12@std@@AEAAXXZ$rtcFrameData DD 01H ; std::_Container_base12::_Orphan_all_locked
	DD	00H
	DQ	FLAT:?_Orphan_all_locked@_Container_base12@std@@AEAAXXZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Orphan_all_unlocked@_Container_base12@std@@AEAAXXZ DD 020a01H
	DD	07006120aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Orphan_all@_Container_base12@std@@QEAAXXZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0_Container_base12@std@@QEAA@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0_Container_proxy@std@@QEAA@PEAU_Container_base12@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z DD 020f01H
	DD	0700b920fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Throw_bad_array_new_length@std@@YAXXZ DD 020601H
	DD	070027206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_Gbad_array_new_length@std@@UEAAPEAXI@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0bad_array_new_length@std@@QEAA@AEBV01@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1bad_array_new_length@std@@UEAA@XZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0bad_array_new_length@std@@QEAA@XZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_Gbad_alloc@std@@UEAAPEAXI@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0bad_alloc@std@@QEAA@AEBV01@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1bad_alloc@std@@UEAA@XZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0bad_alloc@std@@AEAA@QEBD@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_Gexception@std@@UEAAPEAXI@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?what@exception@std@@UEBAPEBDXZ DD 020a01H
	DD	07006120aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1exception@std@@UEAA@XZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0exception@std@@QEAA@AEBV01@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0exception@std@@QEAA@QEBDH@Z DD 011001H
	DD	07010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$abs@N@glm@@YANN@Z DD 020b01H
	DD	07007520bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$epsilonEqual@N@glm@@YA_NAEBN00@Z DD 021401H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$abs@H@glm@@YAHH@Z DD 020901H
	DD	070051209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??2@YAPEAX_KPEAX@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?max@?$numeric_limits@_J@std@@SA_JXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$printf DD 022f01H
	DD	070159219H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
printf$rtcName$0 DB 05fH
	DB	041H
	DB	072H
	DB	067H
	DB	04cH
	DB	069H
	DB	073H
	DB	074H
	DB	00H
	ORG $+7
printf$rtcVarDesc DD 038H
	DD	08H
	DQ	FLAT:printf$rtcName$0
	ORG $+48
printf$rtcFrameData DD 01H
	DD	00H
	DQ	FLAT:printf$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vfprintf_l DD 021901H
	DD	070155219H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__local_stdio_printf_options DD 010201H
	DD	07002H
xdata	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xmemory
;	COMDAT ??$construct@II@?$_Default_allocator_traits@V?$allocator@I@std@@@std@@SAXAEAV?$allocator@I@1@QEAI$$QEAI@Z
_TEXT	SEGMENT
$T1 = 32
__formal$ = 64
_Ptr$ = 72
<_Args_0>$ = 80
??$construct@II@?$_Default_allocator_traits@V?$allocator@I@std@@@std@@SAXAEAV?$allocator@I@1@QEAI$$QEAI@Z PROC ; std::_Default_allocator_traits<std::allocator<unsigned int> >::construct<unsigned int,unsigned int>, COMDAT

; 707  :     static _CONSTEXPR20_DYNALLOC void construct(_Alloc&, _Objty* const _Ptr, _Types&&... _Args) {

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 708  : #ifdef __cpp_lib_constexpr_dynamic_alloc
; 709  :         if (_STD is_constant_evaluated()) {
; 710  :             _STD construct_at(_Ptr, _STD forward<_Types>(_Args)...);
; 711  :         } else
; 712  : #endif // __cpp_lib_constexpr_dynamic_alloc
; 713  :         {
; 714  :             ::new (_Voidify_iter(_Ptr)) _Objty(_STD forward<_Types>(_Args)...);

	mov	rcx, QWORD PTR _Ptr$[rsp]
	call	??$_Voidify_iter@PEAI@std@@YAPEAXPEAI@Z	; std::_Voidify_iter<unsigned int *>
	mov	rdx, rax
	mov	ecx, 4
	call	??2@YAPEAX_KPEAX@Z			; operator new
	mov	QWORD PTR $T1[rsp], rax
	mov	rcx, QWORD PTR <_Args_0>$[rsp]
	call	??$forward@I@std@@YA$$QEAIAEAI@Z	; std::forward<unsigned int>
	mov	rcx, QWORD PTR $T1[rsp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR [rcx], eax

; 715  :         }
; 716  :     }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$construct@II@?$_Default_allocator_traits@V?$allocator@I@std@@@std@@SAXAEAV?$allocator@I@1@QEAI$$QEAI@Z ENDP ; std::_Default_allocator_traits<std::allocator<unsigned int> >::construct<unsigned int,unsigned int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\type_traits
;	COMDAT ??$forward@I@std@@YA$$QEAIAEAI@Z
_TEXT	SEGMENT
_Arg$ = 16
??$forward@I@std@@YA$$QEAIAEAI@Z PROC			; std::forward<unsigned int>, COMDAT

; 1443 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1444 :     return static_cast<_Ty&&>(_Arg);

	mov	rax, QWORD PTR _Arg$[rsp]

; 1445 : }

	pop	rdi
	ret	0
??$forward@I@std@@YA$$QEAIAEAI@Z ENDP			; std::forward<unsigned int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xutility
;	COMDAT ??$_Voidify_iter@PEAI@std@@YAPEAXPEAI@Z
_TEXT	SEGMENT
_It$ = 16
??$_Voidify_iter@PEAI@std@@YAPEAXPEAI@Z PROC		; std::_Voidify_iter<unsigned int *>, COMDAT

; 130  : _NODISCARD constexpr void* _Voidify_iter(_Iter _It) noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 131  :     if constexpr (is_pointer_v<_Iter>) {
; 132  :         return const_cast<void*>(static_cast<const volatile void*>(_It));

	mov	rax, QWORD PTR _It$[rsp]

; 133  :     } else {
; 134  :         return const_cast<void*>(static_cast<const volatile void*>(_STD addressof(*_It)));
; 135  :     }
; 136  : }

	pop	rdi
	ret	0
??$_Voidify_iter@PEAI@std@@YAPEAXPEAI@Z ENDP		; std::_Voidify_iter<unsigned int *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\s4002675\Downloads\glm-0.9.8.5\glm\glm\detail\func_integer.inl
;	COMDAT ??$compute_findMSB_32@I@detail@glm@@YAHI@Z
_TEXT	SEGMENT
Result$ = 36
IsNotNull$ = 52
tv69 = 56
Value$ = 80
??$compute_findMSB_32@I@detail@glm@@YAHI@Z PROC		; glm::detail::compute_findMSB_32<unsigned int>, COMDAT

; 144  : 		{

$LN5:
	mov	DWORD PTR [rsp+8], ecx
	push	rdi
	sub	rsp, 64					; 00000040H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 8
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, DWORD PTR [rsp+80]

; 145  : 			unsigned long Result(0);

	mov	DWORD PTR Result$[rsp], 0

; 146  : 			unsigned char IsNotNull = _BitScanReverse(&Result, *reinterpret_cast<unsigned long*>(&Value));

	mov	eax, DWORD PTR Value$[rsp]
	bsr	eax, eax
	mov	DWORD PTR Result$[rsp], eax
	setne	al
	mov	BYTE PTR IsNotNull$[rsp], al

; 147  : 			return IsNotNull ? int(Result) : -1;

	movzx	eax, BYTE PTR IsNotNull$[rsp]
	test	eax, eax
	je	SHORT $LN3@compute_fi
	mov	eax, DWORD PTR Result$[rsp]
	mov	DWORD PTR tv69[rsp], eax
	jmp	SHORT $LN4@compute_fi
$LN3@compute_fi:
	mov	DWORD PTR tv69[rsp], -1
$LN4@compute_fi:
	mov	eax, DWORD PTR tv69[rsp]

; 148  : 		}

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$compute_findMSB_32@I@detail@glm@@YAHI@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??$compute_findMSB_32@I@detail@glm@@YAHI@Z ENDP		; glm::detail::compute_findMSB_32<unsigned int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\s4002675\Downloads\glm-0.9.8.5\glm\glm\detail\_vectorize.hpp
;	COMDAT ?call@?$functor1@HI$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@H$0A@@3@P6AHI@ZAEBU?$tvec1@I$0A@@3@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
Func$ = 56
v$ = 64
?call@?$functor1@HI$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@H$0A@@3@P6AHI@ZAEBU?$tvec1@I$0A@@3@@Z PROC ; glm::detail::functor1<int,unsigned int,0,glm::tvec1>::call, COMDAT

; 21   : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 22   : 			return tvec1<R, P>(Func(v.x));

	mov	rax, QWORD PTR v$[rsp]
	mov	ecx, DWORD PTR [rax]
	call	QWORD PTR Func$[rsp]
	mov	edx, eax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec1@H$0A@@glm@@QEAA@H@Z		; glm::tvec1<int,0>::tvec1<int,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 23   : 		}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?call@?$functor1@HI$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@H$0A@@3@P6AHI@ZAEBU?$tvec1@I$0A@@3@@Z ENDP ; glm::detail::functor1<int,unsigned int,0,glm::tvec1>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xmemory
;	COMDAT ??$_Emplace_back@I@?$_Uninitialized_backout_al@V?$allocator@I@std@@@std@@QEAAX$$QEAI@Z
_TEXT	SEGMENT
tv64 = 32
this$ = 64
<_Vals_0>$ = 72
??$_Emplace_back@I@?$_Uninitialized_backout_al@V?$allocator@I@std@@@std@@QEAAX$$QEAI@Z PROC ; std::_Uninitialized_backout_al<std::allocator<unsigned int> >::_Emplace_back<unsigned int>, COMDAT

; 1610 :     _CONSTEXPR20_DYNALLOC void _Emplace_back(_Types&&... _Vals) { // construct a new element at *_Last and increment

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 1611 :         allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

	mov	rcx, QWORD PTR <_Vals_0>$[rsp]
	call	??$forward@I@std@@YA$$QEAIAEAI@Z	; std::forward<unsigned int>
	mov	QWORD PTR tv64[rsp], rax
	mov	rcx, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	call	??$_Unfancy@I@std@@YAPEAIPEAI@Z		; std::_Unfancy<unsigned int>
	mov	rcx, QWORD PTR tv64[rsp]
	mov	r8, rcx
	mov	rdx, rax
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+16]
	call	??$construct@II@?$_Default_allocator_traits@V?$allocator@I@std@@@std@@SAXAEAV?$allocator@I@1@QEAI$$QEAI@Z ; std::_Default_allocator_traits<std::allocator<unsigned int> >::construct<unsigned int,unsigned int>

; 1612 :         ++_Last;

	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax+8]
	add	rax, 4
	mov	rcx, QWORD PTR this$[rsp]
	mov	QWORD PTR [rcx+8], rax

; 1613 :     }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$_Emplace_back@I@?$_Uninitialized_backout_al@V?$allocator@I@std@@@std@@QEAAX$$QEAI@Z ENDP ; std::_Uninitialized_backout_al<std::allocator<unsigned int> >::_Emplace_back<unsigned int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xutility
;	COMDAT ??$_Copy_memmove@PEAIPEAI@std@@YAPEAIPEAI00@Z
_TEXT	SEGMENT
_FirstPtr$ = 32
_LastPtr$ = 40
_DestPtr$ = 48
_First_ch$ = 56
_Last_ch$ = 64
_Dest_ch$ = 72
_Count$ = 80
_First$ = 112
_Last$ = 120
_Dest$ = 128
??$_Copy_memmove@PEAIPEAI@std@@YAPEAIPEAI00@Z PROC	; std::_Copy_memmove<unsigned int *,unsigned int *>, COMDAT

; 4153 : _OutCtgIt _Copy_memmove(_CtgIt _First, _CtgIt _Last, _OutCtgIt _Dest) {

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 96					; 00000060H

; 4154 :     auto _FirstPtr              = _To_address(_First);

	lea	rcx, QWORD PTR _First$[rsp]
	call	??$_To_address@PEAI@std@@YA?A_PAEBQEAI@Z ; std::_To_address<unsigned int *>
	mov	QWORD PTR _FirstPtr$[rsp], rax

; 4155 :     auto _LastPtr               = _To_address(_Last);

	lea	rcx, QWORD PTR _Last$[rsp]
	call	??$_To_address@PEAI@std@@YA?A_PAEBQEAI@Z ; std::_To_address<unsigned int *>
	mov	QWORD PTR _LastPtr$[rsp], rax

; 4156 :     auto _DestPtr               = _To_address(_Dest);

	lea	rcx, QWORD PTR _Dest$[rsp]
	call	??$_To_address@PEAI@std@@YA?A_PAEBQEAI@Z ; std::_To_address<unsigned int *>
	mov	QWORD PTR _DestPtr$[rsp], rax

; 4157 :     const char* const _First_ch = const_cast<const char*>(reinterpret_cast<const volatile char*>(_FirstPtr));

	mov	rax, QWORD PTR _FirstPtr$[rsp]
	mov	QWORD PTR _First_ch$[rsp], rax

; 4158 :     const char* const _Last_ch  = const_cast<const char*>(reinterpret_cast<const volatile char*>(_LastPtr));

	mov	rax, QWORD PTR _LastPtr$[rsp]
	mov	QWORD PTR _Last_ch$[rsp], rax

; 4159 :     char* const _Dest_ch        = const_cast<char*>(reinterpret_cast<const volatile char*>(_DestPtr));

	mov	rax, QWORD PTR _DestPtr$[rsp]
	mov	QWORD PTR _Dest_ch$[rsp], rax

; 4160 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

	mov	rax, QWORD PTR _First_ch$[rsp]
	mov	rcx, QWORD PTR _Last_ch$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR _Count$[rsp], rax

; 4161 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

	mov	r8, QWORD PTR _Count$[rsp]
	mov	rdx, QWORD PTR _First_ch$[rsp]
	mov	rcx, QWORD PTR _Dest_ch$[rsp]
	call	memmove

; 4162 :     if constexpr (is_pointer_v<_OutCtgIt>) {
; 4163 :         return reinterpret_cast<_OutCtgIt>(_Dest_ch + _Count);

	mov	rax, QWORD PTR _Count$[rsp]
	mov	rcx, QWORD PTR _Dest_ch$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 4164 :     } else {
; 4165 :         return _Dest + (_LastPtr - _FirstPtr);
; 4166 :     }
; 4167 : }

	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
??$_Copy_memmove@PEAIPEAI@std@@YAPEAIPEAI00@Z ENDP	; std::_Copy_memmove<unsigned int *,unsigned int *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\type_traits
;	COMDAT ??$move@AEAI@std@@YA$$QEAIAEAI@Z
_TEXT	SEGMENT
_Arg$ = 16
??$move@AEAI@std@@YA$$QEAIAEAI@Z PROC			; std::move<unsigned int &>, COMDAT

; 1455 : _NODISCARD constexpr remove_reference_t<_Ty>&& move(_Ty&& _Arg) noexcept { // forward _Arg as movable

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1456 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

	mov	rax, QWORD PTR _Arg$[rsp]

; 1457 : }

	pop	rdi
	ret	0
??$move@AEAI@std@@YA$$QEAIAEAI@Z ENDP			; std::move<unsigned int &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xutility
;	COMDAT ??$_Get_unwrapped@AEBQEAI@std@@YA?A_TAEBQEAI@Z
_TEXT	SEGMENT
_It$ = 16
??$_Get_unwrapped@AEBQEAI@std@@YA?A_TAEBQEAI@Z PROC	; std::_Get_unwrapped<unsigned int * const &>, COMDAT

; 1324 : _NODISCARD constexpr decltype(auto) _Get_unwrapped(_Iter&& _It) {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1325 :     // unwrap an iterator previously subjected to _Adl_verify_range or otherwise validated
; 1326 :     if constexpr (is_pointer_v<decay_t<_Iter>>) { // special-case pointers and arrays
; 1327 :         return _It + 0;

	mov	rax, QWORD PTR _It$[rsp]
	mov	rax, QWORD PTR [rax]

; 1328 :     } else if constexpr (_Unwrappable_v<_Iter>) {
; 1329 :         return static_cast<_Iter&&>(_It)._Unwrapped();
; 1330 :     } else {
; 1331 :         return static_cast<_Iter&&>(_It);
; 1332 :     }
; 1333 : }

	pop	rdi
	ret	0
??$_Get_unwrapped@AEBQEAI@std@@YA?A_TAEBQEAI@Z ENDP	; std::_Get_unwrapped<unsigned int * const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xmemory
;	COMDAT ??$construct@I$$V@?$_Default_allocator_traits@V?$allocator@I@std@@@std@@SAXAEAV?$allocator@I@1@QEAI@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 40
__formal$ = 64
_Ptr$ = 72
??$construct@I$$V@?$_Default_allocator_traits@V?$allocator@I@std@@@std@@SAXAEAV?$allocator@I@1@QEAI@Z PROC ; std::_Default_allocator_traits<std::allocator<unsigned int> >::construct<unsigned int>, COMDAT

; 707  :     static _CONSTEXPR20_DYNALLOC void construct(_Alloc&, _Objty* const _Ptr, _Types&&... _Args) {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 708  : #ifdef __cpp_lib_constexpr_dynamic_alloc
; 709  :         if (_STD is_constant_evaluated()) {
; 710  :             _STD construct_at(_Ptr, _STD forward<_Types>(_Args)...);
; 711  :         } else
; 712  : #endif // __cpp_lib_constexpr_dynamic_alloc
; 713  :         {
; 714  :             ::new (_Voidify_iter(_Ptr)) _Objty(_STD forward<_Types>(_Args)...);

	mov	QWORD PTR $T1[rsp], 4
	mov	rcx, QWORD PTR _Ptr$[rsp]
	call	??$_Voidify_iter@PEAI@std@@YAPEAXPEAI@Z	; std::_Voidify_iter<unsigned int *>
	mov	rdx, rax
	mov	rcx, QWORD PTR $T1[rsp]
	call	??2@YAPEAX_KPEAX@Z			; operator new
	mov	QWORD PTR $T2[rsp], rax
	mov	rdi, QWORD PTR $T2[rsp]
	xor	eax, eax
	mov	rcx, QWORD PTR $T1[rsp]
	rep stosb

; 715  :         }
; 716  :     }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$construct@I$$V@?$_Default_allocator_traits@V?$allocator@I@std@@@std@@SAXAEAV?$allocator@I@1@QEAI@Z ENDP ; std::_Default_allocator_traits<std::allocator<unsigned int> >::construct<unsigned int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xutility
;	COMDAT ??$_To_address@PEAI@std@@YA?A_PAEBQEAI@Z
_TEXT	SEGMENT
_Val$ = 16
??$_To_address@PEAI@std@@YA?A_PAEBQEAI@Z PROC		; std::_To_address<unsigned int *>, COMDAT

; 4074 : _NODISCARD constexpr auto _To_address(const _Iter& _Val) noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 4075 :     _STL_INTERNAL_STATIC_ASSERT(is_pointer_v<_Iter>);
; 4076 :     return _Val;

	mov	rax, QWORD PTR _Val$[rsp]
	mov	rax, QWORD PTR [rax]

; 4077 : }

	pop	rdi
	ret	0
??$_To_address@PEAI@std@@YA?A_PAEBQEAI@Z ENDP		; std::_To_address<unsigned int *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\s4002675\Downloads\glm-0.9.8.5\glm\glm\detail\func_integer.inl
;	COMDAT ?call@?$compute_findMSB_vec@I$0A@Utvec1@glm@@$0CA@@detail@glm@@SA?AU?$tvec1@H$0A@@3@AEBU?$tvec1@I$0A@@3@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
?call@?$compute_findMSB_vec@I$0A@Utvec1@glm@@$0CA@@detail@glm@@SA?AU?$tvec1@H$0A@@3@AEBU?$tvec1@I$0A@@3@@Z PROC ; glm::detail::compute_findMSB_vec<unsigned int,0,glm::tvec1,32>::call, COMDAT

; 154  : 			{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 155  : 				return detail::functor1<int, T, P, vecType>::call(compute_findMSB_32, x);

	mov	r8, QWORD PTR x$[rsp]
	lea	rdx, OFFSET FLAT:??$compute_findMSB_32@I@detail@glm@@YAHI@Z ; glm::detail::compute_findMSB_32<unsigned int>
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$functor1@HI$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@H$0A@@3@P6AHI@ZAEBU?$tvec1@I$0A@@3@@Z ; glm::detail::functor1<int,unsigned int,0,glm::tvec1>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 156  : 			}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?call@?$compute_findMSB_vec@I$0A@Utvec1@glm@@$0CA@@detail@glm@@SA?AU?$tvec1@H$0A@@3@AEBU?$tvec1@I$0A@@3@@Z ENDP ; glm::detail::compute_findMSB_vec<unsigned int,0,glm::tvec1,32>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\s4002675\Downloads\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ?call@?$compute_vec4_and@H$0A@$0?0$0CA@$0A@@detail@glm@@SA?AU?$tvec4@H$0A@@3@AEBU43@0@Z
_TEXT	SEGMENT
tv80 = 48
__$ReturnUdt$ = 80
a$ = 88
b$ = 96
?call@?$compute_vec4_and@H$0A@$0?0$0CA@$0A@@detail@glm@@SA?AU?$tvec4@H$0A@@3@AEBU43@0@Z PROC ; glm::detail::compute_vec4_and<int,0,-1,32,0>::call, COMDAT

; 86   : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 87   : 			return tvec4<T, P>(a.x & b.x, a.y & b.y, a.z & b.z, a.w & b.w);

	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	mov	ecx, DWORD PTR [rcx+12]
	mov	eax, DWORD PTR [rax+12]
	and	eax, ecx
	mov	rcx, QWORD PTR a$[rsp]
	mov	rdx, QWORD PTR b$[rsp]
	mov	edx, DWORD PTR [rdx+8]
	mov	ecx, DWORD PTR [rcx+8]
	and	ecx, edx
	mov	rdx, QWORD PTR a$[rsp]
	mov	r8, QWORD PTR b$[rsp]
	mov	r8d, DWORD PTR [r8+4]
	mov	edx, DWORD PTR [rdx+4]
	and	edx, r8d
	mov	r8, QWORD PTR a$[rsp]
	mov	r9, QWORD PTR b$[rsp]
	mov	r9d, DWORD PTR [r9]
	mov	r8d, DWORD PTR [r8]
	and	r8d, r9d
	mov	DWORD PTR tv80[rsp], r8d
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, ecx
	mov	r8d, edx
	mov	eax, DWORD PTR tv80[rsp]
	mov	edx, eax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec4@H$0A@@glm@@QEAA@HHHH@Z	; glm::tvec4<int,0>::tvec4<int,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 88   : 		}

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?call@?$compute_vec4_and@H$0A@$0?0$0CA@$0A@@detail@glm@@SA?AU?$tvec4@H$0A@@3@AEBU43@0@Z ENDP ; glm::detail::compute_vec4_and<int,0,-1,32,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\s4002675\Downloads\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ?call@?$compute_vec4_sub@H$0A@$0A@@detail@glm@@SA?AU?$tvec4@H$0A@@3@AEBU43@0@Z
_TEXT	SEGMENT
tv80 = 48
__$ReturnUdt$ = 80
a$ = 88
b$ = 96
?call@?$compute_vec4_sub@H$0A@$0A@@detail@glm@@SA?AU?$tvec4@H$0A@@3@AEBU43@0@Z PROC ; glm::detail::compute_vec4_sub<int,0,0>::call, COMDAT

; 50   : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 51   : 			return tvec4<T, P>(a.x - b.x, a.y - b.y, a.z - b.z, a.w - b.w);

	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	mov	ecx, DWORD PTR [rcx+12]
	mov	eax, DWORD PTR [rax+12]
	sub	eax, ecx
	mov	rcx, QWORD PTR a$[rsp]
	mov	rdx, QWORD PTR b$[rsp]
	mov	edx, DWORD PTR [rdx+8]
	mov	ecx, DWORD PTR [rcx+8]
	sub	ecx, edx
	mov	rdx, QWORD PTR a$[rsp]
	mov	r8, QWORD PTR b$[rsp]
	mov	r8d, DWORD PTR [r8+4]
	mov	edx, DWORD PTR [rdx+4]
	sub	edx, r8d
	mov	r8, QWORD PTR a$[rsp]
	mov	r9, QWORD PTR b$[rsp]
	mov	r9d, DWORD PTR [r9]
	mov	r8d, DWORD PTR [r8]
	sub	r8d, r9d
	mov	DWORD PTR tv80[rsp], r8d
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, ecx
	mov	r8d, edx
	mov	eax, DWORD PTR tv80[rsp]
	mov	edx, eax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec4@H$0A@@glm@@QEAA@HHHH@Z	; glm::tvec4<int,0>::tvec4<int,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 52   : 		}

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?call@?$compute_vec4_sub@H$0A@$0A@@detail@glm@@SA?AU?$tvec4@H$0A@@3@AEBU43@0@Z ENDP ; glm::detail::compute_vec4_sub<int,0,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xmemory
;	COMDAT ??$_Uninitialized_move@PEAIV?$allocator@I@std@@@std@@YAPEAIQEAI0PEAIAEAV?$allocator@I@0@@Z
_TEXT	SEGMENT
_UFirst$ = 32
_ULast$ = 40
_Backout$ = 56
$T4 = 88
_First$ = 112
_Last$ = 120
_Dest$ = 128
_Al$ = 136
??$_Uninitialized_move@PEAIV?$allocator@I@std@@@std@@YAPEAIQEAI0PEAIAEAV?$allocator@I@0@@Z PROC ; std::_Uninitialized_move<unsigned int *,std::allocator<unsigned int> >, COMDAT

; 1693 :     const _InIt _First, const _InIt _Last, _Alloc_ptr_t<_Alloc> _Dest, _Alloc& _Al) {

$LN7:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 96					; 00000060H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 16
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+112]

; 1694 :     // move [_First, _Last) to raw _Dest, using _Al
; 1695 :     // note: only called internally from elsewhere in the STL
; 1696 :     using _Ptrval     = typename _Alloc::value_type*;
; 1697 :     auto _UFirst      = _Get_unwrapped(_First);

	lea	rcx, QWORD PTR _First$[rsp]
	call	??$_Get_unwrapped@AEBQEAI@std@@YA?A_TAEBQEAI@Z ; std::_Get_unwrapped<unsigned int * const &>
	mov	QWORD PTR _UFirst$[rsp], rax

; 1698 :     const auto _ULast = _Get_unwrapped(_Last);

	lea	rcx, QWORD PTR _Last$[rsp]
	call	??$_Get_unwrapped@AEBQEAI@std@@YA?A_TAEBQEAI@Z ; std::_Get_unwrapped<unsigned int * const &>
	mov	QWORD PTR _ULast$[rsp], rax

; 1699 :     if constexpr (conjunction_v<bool_constant<_Ptr_move_cat<decltype(_UFirst), _Ptrval>::_Really_trivial>,
; 1700 :                       _Uses_default_construct<_Alloc, _Ptrval, decltype(_STD move(*_UFirst))>>) {
; 1701 : #ifdef __cpp_lib_constexpr_dynamic_alloc
; 1702 :         if (!_STD is_constant_evaluated())
; 1703 : #endif // __cpp_lib_constexpr_dynamic_alloc
; 1704 :         {
; 1705 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

	mov	rcx, QWORD PTR _Dest$[rsp]
	call	??$_Unfancy@I@std@@YAPEAIPEAI@Z		; std::_Unfancy<unsigned int>
	mov	r8, rax
	mov	rdx, QWORD PTR _ULast$[rsp]
	mov	rcx, QWORD PTR _UFirst$[rsp]
	call	??$_Copy_memmove@PEAIPEAI@std@@YAPEAIPEAI00@Z ; std::_Copy_memmove<unsigned int *,unsigned int *>

; 1706 :             return _Dest + (_ULast - _UFirst);

	mov	rax, QWORD PTR _UFirst$[rsp]
	mov	rcx, QWORD PTR _ULast$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	sar	rax, 2
	mov	rcx, QWORD PTR _Dest$[rsp]
	lea	rax, QWORD PTR [rcx+rax*4]
	jmp	SHORT $LN1@Uninitiali

; 1707 :         }
; 1708 :     }
; 1709 : 
; 1710 :     _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};

	mov	r8, QWORD PTR _Al$[rsp]
	mov	rdx, QWORD PTR _Dest$[rsp]
	lea	rcx, QWORD PTR _Backout$[rsp]
	call	??0?$_Uninitialized_backout_al@V?$allocator@I@std@@@std@@QEAA@PEAIAEAV?$allocator@I@1@@Z ; std::_Uninitialized_backout_al<std::allocator<unsigned int> >::_Uninitialized_backout_al<std::allocator<unsigned int> >

; 1711 :     for (; _UFirst != _ULast; ++_UFirst) {

	jmp	SHORT $LN4@Uninitiali
$LN2@Uninitiali:
	mov	rax, QWORD PTR _UFirst$[rsp]
	add	rax, 4
	mov	QWORD PTR _UFirst$[rsp], rax
$LN4@Uninitiali:
	mov	rax, QWORD PTR _ULast$[rsp]
	cmp	QWORD PTR _UFirst$[rsp], rax
	je	SHORT $LN3@Uninitiali

; 1712 :         _Backout._Emplace_back(_STD move(*_UFirst));

	mov	rcx, QWORD PTR _UFirst$[rsp]
	call	??$move@AEAI@std@@YA$$QEAIAEAI@Z	; std::move<unsigned int &>
	mov	rdx, rax
	lea	rcx, QWORD PTR _Backout$[rsp]
	call	??$_Emplace_back@I@?$_Uninitialized_backout_al@V?$allocator@I@std@@@std@@QEAAX$$QEAI@Z ; std::_Uninitialized_backout_al<std::allocator<unsigned int> >::_Emplace_back<unsigned int>

; 1713 :     }

	jmp	SHORT $LN2@Uninitiali
$LN3@Uninitiali:

; 1714 : 
; 1715 :     return _Backout._Release();

	lea	rcx, QWORD PTR _Backout$[rsp]
	call	?_Release@?$_Uninitialized_backout_al@V?$allocator@I@std@@@std@@QEAAPEAIXZ ; std::_Uninitialized_backout_al<std::allocator<unsigned int> >::_Release
	mov	QWORD PTR $T4[rsp], rax
	lea	rcx, QWORD PTR _Backout$[rsp]
	call	??1?$_Uninitialized_backout_al@V?$allocator@I@std@@@std@@QEAA@XZ ; std::_Uninitialized_backout_al<std::allocator<unsigned int> >::~_Uninitialized_backout_al<std::allocator<unsigned int> >
	mov	rax, QWORD PTR $T4[rsp]
$LN1@Uninitiali:

; 1716 : }

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$_Uninitialized_move@PEAIV?$allocator@I@std@@@std@@YAPEAIQEAI0PEAIAEAV?$allocator@I@0@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
??$_Uninitialized_move@PEAIV?$allocator@I@std@@@std@@YAPEAIQEAI0PEAIAEAV?$allocator@I@0@@Z ENDP ; std::_Uninitialized_move<unsigned int *,std::allocator<unsigned int> >
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
_UFirst$ = 32
_ULast$ = 40
_Backout$ = 56
$T4 = 88
_First$ = 112
_Last$ = 120
_Dest$ = 128
_Al$ = 136
?dtor$0@?0???$_Uninitialized_move@PEAIV?$allocator@I@std@@@std@@YAPEAIQEAI0PEAIAEAV?$allocator@I@0@@Z@4HA PROC ; `std::_Uninitialized_move<unsigned int *,std::allocator<unsigned int> >'::`1'::dtor$0
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	lea	rcx, QWORD PTR _Backout$[rbp]
	call	??1?$_Uninitialized_backout_al@V?$allocator@I@std@@@std@@QEAA@XZ ; std::_Uninitialized_backout_al<std::allocator<unsigned int> >::~_Uninitialized_backout_al<std::allocator<unsigned int> >
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$0@?0???$_Uninitialized_move@PEAIV?$allocator@I@std@@@std@@YAPEAIQEAI0PEAIAEAV?$allocator@I@0@@Z@4HA ENDP ; `std::_Uninitialized_move<unsigned int *,std::allocator<unsigned int> >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
_UFirst$ = 32
_ULast$ = 40
_Backout$ = 56
$T4 = 88
_First$ = 112
_Last$ = 120
_Dest$ = 128
_Al$ = 136
?dtor$0@?0???$_Uninitialized_move@PEAIV?$allocator@I@std@@@std@@YAPEAIQEAI0PEAIAEAV?$allocator@I@0@@Z@4HA PROC ; `std::_Uninitialized_move<unsigned int *,std::allocator<unsigned int> >'::`1'::dtor$0
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	lea	rcx, QWORD PTR _Backout$[rbp]
	call	??1?$_Uninitialized_backout_al@V?$allocator@I@std@@@std@@QEAA@XZ ; std::_Uninitialized_backout_al<std::allocator<unsigned int> >::~_Uninitialized_backout_al<std::allocator<unsigned int> >
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$0@?0???$_Uninitialized_move@PEAIV?$allocator@I@std@@@std@@YAPEAIQEAI0PEAIAEAV?$allocator@I@0@@Z@4HA ENDP ; `std::_Uninitialized_move<unsigned int *,std::allocator<unsigned int> >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xmemory
;	COMDAT ??$_Get_size_of_n@$03@std@@YA_K_K@Z
_TEXT	SEGMENT
_Overflow_is_possible$ = 32
_Max_possible$1 = 40
_Count$ = 64
??$_Get_size_of_n@$03@std@@YA_K_K@Z PROC		; std::_Get_size_of_n<4>, COMDAT

; 59   : _NODISCARD constexpr size_t _Get_size_of_n(const size_t _Count) {

$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 60   :     constexpr bool _Overflow_is_possible = _Ty_size > 1;

	mov	BYTE PTR _Overflow_is_possible$[rsp], 1

; 61   : 
; 62   :     if constexpr (_Overflow_is_possible) {
; 63   :         constexpr size_t _Max_possible = static_cast<size_t>(-1) / _Ty_size;

	mov	rax, 4611686018427387903		; 3fffffffffffffffH
	mov	QWORD PTR _Max_possible$1[rsp], rax

; 64   :         if (_Count > _Max_possible) {

	mov	rax, 4611686018427387903		; 3fffffffffffffffH
	cmp	QWORD PTR _Count$[rsp], rax
	jbe	SHORT $LN2@Get_size_o

; 65   :             _Throw_bad_array_new_length(); // multiply overflow

	call	?_Throw_bad_array_new_length@std@@YAXXZ	; std::_Throw_bad_array_new_length
$LN2@Get_size_o:

; 66   :         }
; 67   :     }
; 68   : 
; 69   :     return _Count * _Ty_size;

	mov	rax, QWORD PTR _Count$[rsp]
	shl	rax, 2
$LN3@Get_size_o:

; 70   : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$_Get_size_of_n@$03@std@@YA_K_K@Z ENDP		; std::_Get_size_of_n<4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\utility
;	COMDAT ??$min@_K@std@@YAAEB_KAEB_K0@Z
_TEXT	SEGMENT
$T1 = 0
tv65 = 8
_Left$ = 32
_Right$ = 40
??$min@_K@std@@YAAEB_KAEB_K0@Z PROC			; std::min<unsigned __int64>, COMDAT

; 66   :     const _Ty& _Left, const _Ty& _Right) noexcept(noexcept(_Right < _Left)) /* strengthened */ {

$LN5:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 16

; 67   :     // return smaller of _Left and _Right
; 68   :     return _Right < _Left ? _Right : _Left;

	mov	rax, QWORD PTR _Right$[rsp]
	mov	rcx, QWORD PTR _Left$[rsp]
	mov	rcx, QWORD PTR [rcx]
	cmp	QWORD PTR [rax], rcx
	jae	SHORT $LN3@min
	mov	rax, QWORD PTR _Right$[rsp]
	mov	QWORD PTR tv65[rsp], rax
	jmp	SHORT $LN4@min
$LN3@min:
	mov	rax, QWORD PTR _Left$[rsp]
	mov	QWORD PTR tv65[rsp], rax
$LN4@min:
	mov	rax, QWORD PTR tv65[rsp]
	mov	QWORD PTR $T1[rsp], rax
	mov	rax, QWORD PTR $T1[rsp]

; 69   : }

	add	rsp, 16
	pop	rdi
	ret	0
??$min@_K@std@@YAAEB_KAEB_K0@Z ENDP			; std::min<unsigned __int64>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\s4002675\Downloads\glm-0.9.8.5\glm\glm\detail\_vectorize.hpp
;	COMDAT ?call@?$functor1@HH$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@H$0A@@3@P6AHH@ZAEBU43@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
Func$ = 56
v$ = 64
?call@?$functor1@HH$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@H$0A@@3@P6AHH@ZAEBU43@@Z PROC ; glm::detail::functor1<int,int,0,glm::tvec1>::call, COMDAT

; 21   : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 22   : 			return tvec1<R, P>(Func(v.x));

	mov	rax, QWORD PTR v$[rsp]
	mov	ecx, DWORD PTR [rax]
	call	QWORD PTR Func$[rsp]
	mov	edx, eax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec1@H$0A@@glm@@QEAA@H@Z		; glm::tvec1<int,0>::tvec1<int,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 23   : 		}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?call@?$functor1@HH$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@H$0A@@3@P6AHH@ZAEBU43@@Z ENDP ; glm::detail::functor1<int,int,0,glm::tvec1>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\s4002675\Downloads\glm-0.9.8.5\glm\glm\detail\_vectorize.hpp
;	COMDAT ?call@?$functor1@HH$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@H$0A@@3@P6AHH@ZAEBU43@@Z
_TEXT	SEGMENT
tv66 = 32
__$ReturnUdt$ = 64
Func$ = 72
v$ = 80
?call@?$functor1@HH$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@H$0A@@3@P6AHH@ZAEBU43@@Z PROC ; glm::detail::functor1<int,int,0,glm::tvec2>::call, COMDAT

; 30   : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 31   : 			return tvec2<R, P>(Func(v.x), Func(v.y));

	mov	rax, QWORD PTR v$[rsp]
	mov	ecx, DWORD PTR [rax+4]
	call	QWORD PTR Func$[rsp]
	mov	DWORD PTR tv66[rsp], eax
	mov	rcx, QWORD PTR v$[rsp]
	mov	ecx, DWORD PTR [rcx]
	call	QWORD PTR Func$[rsp]
	mov	ecx, DWORD PTR tv66[rsp]
	mov	r8d, ecx
	mov	edx, eax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec2@H$0A@@glm@@QEAA@HH@Z		; glm::tvec2<int,0>::tvec2<int,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 32   : 		}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?call@?$functor1@HH$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@H$0A@@3@P6AHH@ZAEBU43@@Z ENDP ; glm::detail::functor1<int,int,0,glm::tvec2>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\s4002675\Downloads\glm-0.9.8.5\glm\glm\detail\_vectorize.hpp
;	COMDAT ?call@?$functor1@HH$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@H$0A@@3@P6AHH@ZAEBU43@@Z
_TEXT	SEGMENT
tv66 = 32
tv70 = 36
__$ReturnUdt$ = 64
Func$ = 72
v$ = 80
?call@?$functor1@HH$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@H$0A@@3@P6AHH@ZAEBU43@@Z PROC ; glm::detail::functor1<int,int,0,glm::tvec3>::call, COMDAT

; 39   : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 40   : 			return tvec3<R, P>(Func(v.x), Func(v.y), Func(v.z));

	mov	rax, QWORD PTR v$[rsp]
	mov	ecx, DWORD PTR [rax+8]
	call	QWORD PTR Func$[rsp]
	mov	DWORD PTR tv66[rsp], eax
	mov	rcx, QWORD PTR v$[rsp]
	mov	ecx, DWORD PTR [rcx+4]
	call	QWORD PTR Func$[rsp]
	mov	DWORD PTR tv70[rsp], eax
	mov	rcx, QWORD PTR v$[rsp]
	mov	ecx, DWORD PTR [rcx]
	call	QWORD PTR Func$[rsp]
	mov	ecx, DWORD PTR tv66[rsp]
	mov	r9d, ecx
	mov	ecx, DWORD PTR tv70[rsp]
	mov	r8d, ecx
	mov	edx, eax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec3@H$0A@@glm@@QEAA@HHH@Z	; glm::tvec3<int,0>::tvec3<int,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 41   : 		}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?call@?$functor1@HH$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@H$0A@@3@P6AHH@ZAEBU43@@Z ENDP ; glm::detail::functor1<int,int,0,glm::tvec3>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\s4002675\Downloads\glm-0.9.8.5\glm\glm\detail\_vectorize.hpp
;	COMDAT ?call@?$functor1@HH$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@H$0A@@3@P6AHH@ZAEBU43@@Z
_TEXT	SEGMENT
tv66 = 48
tv70 = 52
tv74 = 56
__$ReturnUdt$ = 80
Func$ = 88
v$ = 96
?call@?$functor1@HH$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@H$0A@@3@P6AHH@ZAEBU43@@Z PROC ; glm::detail::functor1<int,int,0,glm::tvec4>::call, COMDAT

; 48   : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 49   : 			return tvec4<R, P>(Func(v.x), Func(v.y), Func(v.z), Func(v.w));

	mov	rax, QWORD PTR v$[rsp]
	mov	ecx, DWORD PTR [rax+12]
	call	QWORD PTR Func$[rsp]
	mov	DWORD PTR tv66[rsp], eax
	mov	rcx, QWORD PTR v$[rsp]
	mov	ecx, DWORD PTR [rcx+8]
	call	QWORD PTR Func$[rsp]
	mov	DWORD PTR tv70[rsp], eax
	mov	rcx, QWORD PTR v$[rsp]
	mov	ecx, DWORD PTR [rcx+4]
	call	QWORD PTR Func$[rsp]
	mov	DWORD PTR tv74[rsp], eax
	mov	rcx, QWORD PTR v$[rsp]
	mov	ecx, DWORD PTR [rcx]
	call	QWORD PTR Func$[rsp]
	mov	ecx, DWORD PTR tv66[rsp]
	mov	DWORD PTR [rsp+32], ecx
	mov	ecx, DWORD PTR tv70[rsp]
	mov	r9d, ecx
	mov	ecx, DWORD PTR tv74[rsp]
	mov	r8d, ecx
	mov	edx, eax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec4@H$0A@@glm@@QEAA@HHHH@Z	; glm::tvec4<int,0>::tvec4<int,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 50   : 		}

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?call@?$functor1@HH$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@H$0A@@3@P6AHH@ZAEBU43@@Z ENDP ; glm::detail::functor1<int,int,0,glm::tvec4>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\s4002675\Downloads\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??$?GH$0A@@glm@@YA?AU?$tvec1@H$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
v1$ = 56
v2$ = 64
??$?GH$0A@@glm@@YA?AU?$tvec1@H$0A@@0@AEBU10@0@Z PROC	; glm::operator-<int,0>, COMDAT

; 351  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 352  : 		return tvec1<T, P>(

	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	mov	ecx, DWORD PTR [rcx]
	mov	eax, DWORD PTR [rax]
	sub	eax, ecx
	mov	edx, eax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec1@H$0A@@glm@@QEAA@H@Z		; glm::tvec1<int,0>::tvec1<int,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 353  : 			v1.x - v2.x);
; 354  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?GH$0A@@glm@@YA?AU?$tvec1@H$0A@@0@AEBU10@0@Z ENDP	; glm::operator-<int,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\s4002675\Downloads\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??$?0_N$0A@@?$tvec1@H$0A@@glm@@QEAA@AEBU?$tvec1@_N$0A@@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0_N$0A@@?$tvec1@H$0A@@glm@@QEAA@AEBU?$tvec1@_N$0A@@1@@Z PROC ; glm::tvec1<int,0>::tvec1<int,0><bool,0>, COMDAT

; 47   : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 46   : 		: x(static_cast<T>(v.x))

	mov	rax, QWORD PTR v$[rsp]
	movzx	eax, BYTE PTR [rax]
	mov	rcx, QWORD PTR this$[rsp]
	mov	DWORD PTR [rcx], eax

; 47   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0_N$0A@@?$tvec1@H$0A@@glm@@QEAA@AEBU?$tvec1@_N$0A@@1@@Z ENDP ; glm::tvec1<int,0>::tvec1<int,0><bool,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\s4002675\Downloads\glm-0.9.8.5\glm\glm\detail\func_vector_relational.inl
;	COMDAT ??$lessThan@H$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@H$0A@@0@0@Z
_TEXT	SEGMENT
Result$ = 36
i$4 = 52
tv64 = 56
tv80 = 64
tv86 = 72
__$ReturnUdt$ = 96
x$ = 104
y$ = 112
??$lessThan@H$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@H$0A@@0@0@Z PROC ; glm::lessThan<int,0,glm::tvec1>, COMDAT

; 10   : 	{

$LN9:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+96]

; 11   : 		assert(x.length() == y.length());

	call	?length@?$tvec1@H$0A@@glm@@SAHXZ	; glm::tvec1<int,0>::length
	mov	DWORD PTR tv64[rsp], eax
	call	?length@?$tvec1@H$0A@@glm@@SAHXZ	; glm::tvec1<int,0>::length
	mov	ecx, DWORD PTR tv64[rsp]
	cmp	ecx, eax
	je	SHORT $LN6@lessThan
	mov	r8d, 11
	lea	rdx, OFFSET FLAT:??_C@_1KE@MOONLNIK@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAs?$AA4?$AA0?$AA0?$AA2?$AA6@
	lea	rcx, OFFSET FLAT:??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN6@lessThan:

; 12   : 
; 13   : 		vecType<bool, P> Result(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??0?$tvec1@_N$0A@@glm@@QEAA@W4ctor@1@@Z	; glm::tvec1<bool,0>::tvec1<bool,0>

; 14   : 		for(length_t i = 0; i < x.length(); ++i)

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@lessThan
$LN2@lessThan:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN4@lessThan:
	call	?length@?$tvec1@H$0A@@glm@@SAHXZ	; glm::tvec1<int,0>::length
	cmp	DWORD PTR i$4[rsp], eax
	jge	SHORT $LN3@lessThan

; 15   : 			Result[i] = x[i] < y[i];

	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	??A?$tvec1@H$0A@@glm@@QEBAAEBHH@Z	; glm::tvec1<int,0>::operator[]
	mov	QWORD PTR tv80[rsp], rax
	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	call	??A?$tvec1@H$0A@@glm@@QEBAAEBHH@Z	; glm::tvec1<int,0>::operator[]
	mov	eax, DWORD PTR [rax]
	mov	rcx, QWORD PTR tv80[rsp]
	cmp	DWORD PTR [rcx], eax
	jge	SHORT $LN7@lessThan
	mov	DWORD PTR tv86[rsp], 1
	jmp	SHORT $LN8@lessThan
$LN7@lessThan:
	mov	DWORD PTR tv86[rsp], 0
$LN8@lessThan:
	mov	edx, DWORD PTR i$4[rsp]
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tvec1@_N$0A@@glm@@QEAAAEA_NH@Z	; glm::tvec1<bool,0>::operator[]
	movzx	ecx, BYTE PTR tv86[rsp]
	mov	BYTE PTR [rax], cl
	jmp	SHORT $LN2@lessThan
$LN3@lessThan:

; 16   : 
; 17   : 		return Result;

	mov	rax, QWORD PTR __$ReturnUdt$[rsp]
	movzx	ecx, BYTE PTR Result$[rsp]
	mov	BYTE PTR [rax], cl
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 18   : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$lessThan@H$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@H$0A@@0@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??$lessThan@H$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@H$0A@@0@0@Z ENDP ; glm::lessThan<int,0,glm::tvec1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xmemory
;	COMDAT ??$_Emplace_back@$$V@?$_Uninitialized_backout_al@V?$allocator@I@std@@@std@@QEAAXXZ
_TEXT	SEGMENT
this$ = 48
??$_Emplace_back@$$V@?$_Uninitialized_backout_al@V?$allocator@I@std@@@std@@QEAAXXZ PROC ; std::_Uninitialized_backout_al<std::allocator<unsigned int> >::_Emplace_back<>, COMDAT

; 1610 :     _CONSTEXPR20_DYNALLOC void _Emplace_back(_Types&&... _Vals) { // construct a new element at *_Last and increment

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 1611 :         allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	??$_Unfancy@I@std@@YAPEAIPEAI@Z		; std::_Unfancy<unsigned int>
	mov	rdx, rax
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+16]
	call	??$construct@I$$V@?$_Default_allocator_traits@V?$allocator@I@std@@@std@@SAXAEAV?$allocator@I@1@QEAI@Z ; std::_Default_allocator_traits<std::allocator<unsigned int> >::construct<unsigned int>

; 1612 :         ++_Last;

	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax+8]
	add	rax, 4
	mov	rcx, QWORD PTR this$[rsp]
	mov	QWORD PTR [rcx+8], rax

; 1613 :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$_Emplace_back@$$V@?$_Uninitialized_backout_al@V?$allocator@I@std@@@std@@QEAAXXZ ENDP ; std::_Uninitialized_backout_al<std::allocator<unsigned int> >::_Emplace_back<>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xmemory
;	COMDAT ?_Release@?$_Uninitialized_backout_al@V?$allocator@I@std@@@std@@QEAAPEAIXZ
_TEXT	SEGMENT
this$ = 16
?_Release@?$_Uninitialized_backout_al@V?$allocator@I@std@@@std@@QEAAPEAIXZ PROC ; std::_Uninitialized_backout_al<std::allocator<unsigned int> >::_Release, COMDAT

; 1615 :     constexpr pointer _Release() { // suppress any exception handling backout and return _Last

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1616 :         _First = _Last;

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	QWORD PTR [rax], rcx

; 1617 :         return _Last;

	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax+8]

; 1618 :     }

	pop	rdi
	ret	0
?_Release@?$_Uninitialized_backout_al@V?$allocator@I@std@@@std@@QEAAPEAIXZ ENDP ; std::_Uninitialized_backout_al<std::allocator<unsigned int> >::_Release
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xmemory
;	COMDAT ??1?$_Uninitialized_backout_al@V?$allocator@I@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1?$_Uninitialized_backout_al@V?$allocator@I@std@@@std@@QEAA@XZ PROC ; std::_Uninitialized_backout_al<std::allocator<unsigned int> >::~_Uninitialized_backout_al<std::allocator<unsigned int> >, COMDAT

; 1605 :     _CONSTEXPR20_DYNALLOC ~_Uninitialized_backout_al() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 1606 :         _Destroy_range(_First, _Last, _Al);

	mov	rax, QWORD PTR this$[rsp]
	mov	r8, QWORD PTR [rax+16]
	mov	rax, QWORD PTR this$[rsp]
	mov	rdx, QWORD PTR [rax+8]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	??$_Destroy_range@V?$allocator@I@std@@@std@@YAXPEAIQEAIAEAV?$allocator@I@0@@Z ; std::_Destroy_range<std::allocator<unsigned int> >

; 1607 :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??1?$_Uninitialized_backout_al@V?$allocator@I@std@@@std@@QEAA@XZ ENDP ; std::_Uninitialized_backout_al<std::allocator<unsigned int> >::~_Uninitialized_backout_al<std::allocator<unsigned int> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xmemory
;	COMDAT ??0?$_Uninitialized_backout_al@V?$allocator@I@std@@@std@@QEAA@PEAIAEAV?$allocator@I@1@@Z
_TEXT	SEGMENT
this$ = 16
_Dest$ = 24
_Al_$ = 32
??0?$_Uninitialized_backout_al@V?$allocator@I@std@@@std@@QEAA@PEAIAEAV?$allocator@I@1@@Z PROC ; std::_Uninitialized_backout_al<std::allocator<unsigned int> >::_Uninitialized_backout_al<std::allocator<unsigned int> >, COMDAT

; 1600 :         : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR _Dest$[rsp]
	mov	QWORD PTR [rax], rcx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR _Dest$[rsp]
	mov	QWORD PTR [rax+8], rcx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR _Al_$[rsp]
	mov	QWORD PTR [rax+16], rcx
	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$_Uninitialized_backout_al@V?$allocator@I@std@@@std@@QEAA@PEAIAEAV?$allocator@I@1@@Z ENDP ; std::_Uninitialized_backout_al<std::allocator<unsigned int> >::_Uninitialized_backout_al<std::allocator<unsigned int> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xmemory
;	COMDAT ??$_Zero_range@PEAI@std@@YAPEAIQEAI0@Z
_TEXT	SEGMENT
_First_ch$ = 32
_Last_ch$ = 40
_First$ = 64
_Last$ = 72
??$_Zero_range@PEAI@std@@YAPEAIQEAI0@Z PROC		; std::_Zero_range<unsigned int *>, COMDAT

; 1786 : _Ptr _Zero_range(const _Ptr _First, const _Ptr _Last) { // fill [_First, _Last) with zeroes

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 1787 :     char* const _First_ch = reinterpret_cast<char*>(_To_address(_First));

	lea	rcx, QWORD PTR _First$[rsp]
	call	??$_To_address@PEAI@std@@YA?A_PAEBQEAI@Z ; std::_To_address<unsigned int *>
	mov	QWORD PTR _First_ch$[rsp], rax

; 1788 :     char* const _Last_ch  = reinterpret_cast<char*>(_To_address(_Last));

	lea	rcx, QWORD PTR _Last$[rsp]
	call	??$_To_address@PEAI@std@@YA?A_PAEBQEAI@Z ; std::_To_address<unsigned int *>
	mov	QWORD PTR _Last_ch$[rsp], rax

; 1789 :     _CSTD memset(_First_ch, 0, static_cast<size_t>(_Last_ch - _First_ch));

	mov	rax, QWORD PTR _First_ch$[rsp]
	mov	rcx, QWORD PTR _Last_ch$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	r8, rax
	xor	edx, edx
	mov	rcx, QWORD PTR _First_ch$[rsp]
	call	memset

; 1790 :     return _Last;

	mov	rax, QWORD PTR _Last$[rsp]

; 1791 : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$_Zero_range@PEAI@std@@YAPEAIQEAI0@Z ENDP		; std::_Zero_range<unsigned int *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xstddef
;	COMDAT ??$_Unfancy@I@std@@YAPEAIPEAI@Z
_TEXT	SEGMENT
_Ptr$ = 16
??$_Unfancy@I@std@@YAPEAIPEAI@Z PROC			; std::_Unfancy<unsigned int>, COMDAT

; 288  : _NODISCARD constexpr _Ty* _Unfancy(_Ty* _Ptr) noexcept { // do nothing for plain pointers

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 289  :     return _Ptr;

	mov	rax, QWORD PTR _Ptr$[rsp]

; 290  : }

	pop	rdi
	ret	0
??$_Unfancy@I@std@@YAPEAIPEAI@Z ENDP			; std::_Unfancy<unsigned int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xmemory
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z
_TEXT	SEGMENT
_Block_size$ = 48
_Ptr_container$ = 56
_Ptr$ = 64
_Bytes$ = 96
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 134  : __declspec(allocator) void* _Allocate_manually_vector_aligned(const size_t _Bytes) {

$LN13:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H

; 135  :     // allocate _Bytes manually aligned to at least _Big_allocation_alignment
; 136  :     const size_t _Block_size = _Non_user_size + _Bytes;

	mov	rax, QWORD PTR _Bytes$[rsp]
	add	rax, 47					; 0000002fH
	mov	QWORD PTR _Block_size$[rsp], rax

; 137  :     if (_Block_size <= _Bytes) {

	mov	rax, QWORD PTR _Bytes$[rsp]
	cmp	QWORD PTR _Block_size$[rsp], rax
	ja	SHORT $LN8@Allocate_m

; 138  :         _Throw_bad_array_new_length(); // add overflow

	call	?_Throw_bad_array_new_length@std@@YAXXZ	; std::_Throw_bad_array_new_length
$LN8@Allocate_m:

; 139  :     }
; 140  : 
; 141  :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

	mov	rcx, QWORD PTR _Block_size$[rsp]
	call	?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z ; std::_Default_allocate_traits::_Allocate
	mov	QWORD PTR _Ptr_container$[rsp], rax
$LN4@Allocate_m:

; 142  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

	cmp	QWORD PTR _Ptr_container$[rsp], 0
	je	SHORT $LN9@Allocate_m
	jmp	SHORT $LN10@Allocate_m
$LN9@Allocate_m:
$LN7@Allocate_m:
	lea	rax, OFFSET FLAT:$SG58545
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG58546
	mov	QWORD PTR [rsp+32], rax
	xor	r9d, r9d
	mov	r8d, 142				; 0000008eH
	lea	rdx, OFFSET FLAT:$SG58547
	mov	ecx, 2
	call	QWORD PTR __imp__CrtDbgReport
	cmp	eax, 1
	jne	SHORT $LN12@Allocate_m
	int	3
	xor	eax, eax
$LN12@Allocate_m:
	mov	QWORD PTR [rsp+32], 0
	mov	r9d, 142				; 0000008eH
	lea	r8, OFFSET FLAT:$SG58548
	lea	rdx, OFFSET FLAT:$SG58549
	lea	rcx, OFFSET FLAT:$SG58550
	call	QWORD PTR __imp__invalid_parameter
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN7@Allocate_m
$LN10@Allocate_m:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN4@Allocate_m

; 143  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

	mov	rax, QWORD PTR _Ptr_container$[rsp]
	add	rax, 47					; 0000002fH
	and	rax, -32				; ffffffffffffffe0H
	mov	QWORD PTR _Ptr$[rsp], rax

; 144  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

	mov	eax, 8
	imul	rax, rax, -1
	mov	rcx, QWORD PTR _Ptr$[rsp]
	mov	rdx, QWORD PTR _Ptr_container$[rsp]
	mov	QWORD PTR [rcx+rax], rdx

; 145  : 
; 146  : #ifdef _DEBUG
; 147  :     static_cast<uintptr_t*>(_Ptr)[-2] = _Big_allocation_sentinel;

	mov	eax, 8
	imul	rax, rax, -2
	mov	rcx, QWORD PTR _Ptr$[rsp]
	mov	rdx, -361700864190383366		; fafafafafafafafaH
	mov	QWORD PTR [rcx+rax], rdx

; 148  : #endif // _DEBUG
; 149  :     return _Ptr;

	mov	rax, QWORD PTR _Ptr$[rsp]
$LN11@Allocate_m:

; 150  : }

	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\s4002675\Downloads\glm-0.9.8.5\glm\glm\detail\func_common.inl
;	COMDAT ?call@?$compute_sign@H$0A@Utvec1@glm@@$0A@$0A@@detail@glm@@SA?AU?$tvec1@H$0A@@3@AEBU43@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 36
$T3 = 40
$T4 = 44
$T5 = 48
$T6 = 52
tv66 = 56
__$ReturnUdt$ = 80
x$ = 88
?call@?$compute_sign@H$0A@Utvec1@glm@@$0A@$0A@@detail@glm@@SA?AU?$tvec1@H$0A@@3@AEBU43@@Z PROC ; glm::detail::compute_sign<int,0,glm::tvec1,0,0>::call, COMDAT

; 186  : 		{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 187  : 			return vecType<T, P>(glm::lessThan(vecType<T, P>(0), x)) - vecType<T, P>(glm::lessThan(x, vecType<T, P>(0)));

	xor	edx, edx
	lea	rcx, QWORD PTR $T2[rsp]
	call	??0?$tvec1@H$0A@@glm@@QEAA@H@Z		; glm::tvec1<int,0>::tvec1<int,0>
	mov	r8, rax
	mov	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$lessThan@H$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@H$0A@@0@0@Z ; glm::lessThan<int,0,glm::tvec1>
	mov	rdx, rax
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?0_N$0A@@?$tvec1@H$0A@@glm@@QEAA@AEBU?$tvec1@_N$0A@@1@@Z ; glm::tvec1<int,0>::tvec1<int,0><bool,0>
	mov	QWORD PTR tv66[rsp], rax
	xor	edx, edx
	lea	rcx, QWORD PTR $T5[rsp]
	call	??0?$tvec1@H$0A@@glm@@QEAA@H@Z		; glm::tvec1<int,0>::tvec1<int,0>
	mov	r8, QWORD PTR x$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T6[rsp]
	call	??$lessThan@H$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@H$0A@@0@0@Z ; glm::lessThan<int,0,glm::tvec1>
	mov	rdx, rax
	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?0_N$0A@@?$tvec1@H$0A@@glm@@QEAA@AEBU?$tvec1@_N$0A@@1@@Z ; glm::tvec1<int,0>::tvec1<int,0><bool,0>
	mov	rcx, QWORD PTR tv66[rsp]
	mov	r8, rcx
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$?GH$0A@@glm@@YA?AU?$tvec1@H$0A@@0@AEBU10@0@Z ; glm::operator-<int,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 188  : 		}

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?call@?$compute_sign@H$0A@Utvec1@glm@@$0A@$0A@@detail@glm@@SA?AU?$tvec1@H$0A@@3@AEBU43@@Z ENDP ; glm::detail::compute_sign<int,0,glm::tvec1,0,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\type_traits
;	COMDAT ??$forward@PEAU_Container_base12@std@@@std@@YA$$QEAPEAU_Container_base12@0@AEAPEAU10@@Z
_TEXT	SEGMENT
_Arg$ = 16
??$forward@PEAU_Container_base12@std@@@std@@YA$$QEAPEAU_Container_base12@0@AEAPEAU10@@Z PROC ; std::forward<std::_Container_base12 *>, COMDAT

; 1443 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1444 :     return static_cast<_Ty&&>(_Arg);

	mov	rax, QWORD PTR _Arg$[rsp]

; 1445 : }

	pop	rdi
	ret	0
??$forward@PEAU_Container_base12@std@@@std@@YA$$QEAPEAU_Container_base12@0@AEAPEAU10@@Z ENDP ; std::forward<std::_Container_base12 *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xutility
;	COMDAT ??$_Voidify_iter@PEAU_Container_proxy@std@@@std@@YAPEAXPEAU_Container_proxy@0@@Z
_TEXT	SEGMENT
_It$ = 16
??$_Voidify_iter@PEAU_Container_proxy@std@@@std@@YAPEAXPEAU_Container_proxy@0@@Z PROC ; std::_Voidify_iter<std::_Container_proxy *>, COMDAT

; 130  : _NODISCARD constexpr void* _Voidify_iter(_Iter _It) noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 131  :     if constexpr (is_pointer_v<_Iter>) {
; 132  :         return const_cast<void*>(static_cast<const volatile void*>(_It));

	mov	rax, QWORD PTR _It$[rsp]

; 133  :     } else {
; 134  :         return const_cast<void*>(static_cast<const volatile void*>(_STD addressof(*_It)));
; 135  :     }
; 136  : }

	pop	rdi
	ret	0
??$_Voidify_iter@PEAU_Container_proxy@std@@@std@@YAPEAXPEAU_Container_proxy@0@@Z ENDP ; std::_Voidify_iter<std::_Container_proxy *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xstddef
;	COMDAT ??$addressof@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@AEAU10@@Z
_TEXT	SEGMENT
_Val$ = 16
??$addressof@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@AEAU10@@Z PROC ; std::addressof<std::_Container_proxy>, COMDAT

; 274  : _NODISCARD constexpr _Ty* addressof(_Ty& _Val) noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 275  :     return __builtin_addressof(_Val);

	mov	rax, QWORD PTR _Val$[rsp]

; 276  : }

	pop	rdi
	ret	0
??$addressof@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@AEAU10@@Z ENDP ; std::addressof<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xmemory
;	COMDAT ?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@2@QEAU_Container_proxy@2@_K@Z
_TEXT	SEGMENT
_Al$ = 48
_Ptr$ = 56
_Count$ = 64
?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@2@QEAU_Container_proxy@2@_K@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate, COMDAT

; 693  :     static _CONSTEXPR20_DYNALLOC void deallocate(_Alloc& _Al, const pointer _Ptr, const size_type _Count) {

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 694  :         // no overflow check on the following multiply; we assume _Allocate did that check
; 695  : #ifdef __cpp_lib_constexpr_dynamic_alloc // TRANSITION, GH-1532
; 696  :         if (_STD is_constant_evaluated()) {
; 697  :             _Al.deallocate(_Ptr, _Count);
; 698  :         } else
; 699  : #endif // __cpp_lib_constexpr_dynamic_alloc
; 700  :         {
; 701  :             (void) _Al;
; 702  :             _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

	imul	rax, QWORD PTR _Count$[rsp], 16
	mov	rdx, rax
	mov	rcx, QWORD PTR _Ptr$[rsp]
	call	??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z ; std::_Deallocate<16,0>

; 703  :         }
; 704  :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@2@QEAU_Container_proxy@2@_K@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\s4002675\Downloads\glm-0.9.8.5\glm\glm\detail\func_integer.inl
;	COMDAT ??$findMSB@I$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@H$0A@@0@AEBU?$tvec1@I$0A@@0@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
??$findMSB@I$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@H$0A@@0@AEBU?$tvec1@I$0A@@0@@Z PROC ; glm::findMSB<unsigned int,0,glm::tvec1>, COMDAT

; 358  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 359  : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_integer, "'findMSB' only accept integer values");
; 360  : 
; 361  : 		return detail::compute_findMSB_vec<T, P, vecType, sizeof(T) * 8>::call(x);

	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_findMSB_vec@I$0A@Utvec1@glm@@$0CA@@detail@glm@@SA?AU?$tvec1@H$0A@@3@AEBU?$tvec1@I$0A@@3@@Z ; glm::detail::compute_findMSB_vec<unsigned int,0,glm::tvec1,32>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 362  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$findMSB@I$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@H$0A@@0@AEBU?$tvec1@I$0A@@0@@Z ENDP ; glm::findMSB<unsigned int,0,glm::tvec1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\s4002675\Downloads\glm-0.9.8.5\glm\glm\detail\func_common.inl
;	COMDAT ?call@?$compute_abs@I$0A@@detail@glm@@SAII@Z
_TEXT	SEGMENT
x$ = 16
?call@?$compute_abs@I$0A@@detail@glm@@SAII@Z PROC	; glm::detail::compute_abs<unsigned int,0>::call, COMDAT

; 102  : 		{

$LN3:
	mov	DWORD PTR [rsp+8], ecx
	push	rdi

; 103  : 			GLM_STATIC_ASSERT(
; 104  : 				(!std::numeric_limits<genFIType>::is_signed && std::numeric_limits<genFIType>::is_integer) || GLM_UNRESTRICTED_GENTYPE,
; 105  : 				"'abs' only accept floating-point and integer scalar or vector inputs");
; 106  : 			return x;

	mov	eax, DWORD PTR x$[rsp]

; 107  : 		}

	pop	rdi
	ret	0
?call@?$compute_abs@I$0A@@detail@glm@@SAII@Z ENDP	; glm::detail::compute_abs<unsigned int,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\s4002675\Downloads\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?_4H@?$tvec4@H$0A@@glm@@QEAAAEAU01@AEBU01@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 48
this$ = 96
v$ = 104
??$?_4H@?$tvec4@H$0A@@glm@@QEAAAEAU01@AEBU01@@Z PROC	; glm::tvec4<int,0>::operator&=<int>, COMDAT

; 528  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 72					; 00000048H

; 529  : 		return (*this = detail::compute_vec4_and<T, P, detail::is_int<T>::value, sizeof(T) * 8, detail::is_aligned<P>::value>::call(*this, tvec4<T, P>(v)));

	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR v$[rsp]
	mov	ecx, 16
	rep movsb
	lea	r8, QWORD PTR $T1[rsp]
	mov	rdx, QWORD PTR this$[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	?call@?$compute_vec4_and@H$0A@$0?0$0CA@$0A@@detail@glm@@SA?AU?$tvec4@H$0A@@3@AEBU43@0@Z ; glm::detail::compute_vec4_and<int,0,-1,32,0>::call
	mov	rdi, QWORD PTR this$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR this$[rsp]

; 530  : 	}

	add	rsp, 72					; 00000048H
	pop	rdi
	pop	rsi
	ret	0
??$?_4H@?$tvec4@H$0A@@glm@@QEAAAEAU01@AEBU01@@Z ENDP	; glm::tvec4<int,0>::operator&=<int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\s4002675\Downloads\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?ZH@?$tvec4@H$0A@@glm@@QEAAAEAU01@H@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 48
this$ = 96
scalar$ = 104
??$?ZH@?$tvec4@H$0A@@glm@@QEAAAEAU01@H@Z PROC		; glm::tvec4<int,0>::operator-=<int>, COMDAT

; 390  : 	{

$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 72					; 00000048H

; 391  : 		return (*this = detail::compute_vec4_sub<T, P, detail::is_aligned<P>::value>::call(*this, tvec4<T, P>(scalar)));

	mov	edx, DWORD PTR scalar$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??0?$tvec4@H$0A@@glm@@QEAA@H@Z		; glm::tvec4<int,0>::tvec4<int,0>
	mov	r8, rax
	mov	rdx, QWORD PTR this$[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	?call@?$compute_vec4_sub@H$0A@$0A@@detail@glm@@SA?AU?$tvec4@H$0A@@3@AEBU43@0@Z ; glm::detail::compute_vec4_sub<int,0,0>::call
	mov	rdi, QWORD PTR this$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR this$[rsp]

; 392  : 	}

	add	rsp, 72					; 00000048H
	pop	rdi
	pop	rsi
	ret	0
??$?ZH@?$tvec4@H$0A@@glm@@QEAAAEAU01@H@Z ENDP		; glm::tvec4<int,0>::operator-=<int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\s4002675\Downloads\glm-0.9.8.5\glm\glm\detail\func_common.inl
;	COMDAT ?call@?$compute_abs_vector@H$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@H$0A@@3@AEBU43@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
?call@?$compute_abs_vector@H$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@H$0A@@3@AEBU43@@Z PROC ; glm::detail::compute_abs_vector<int,0,glm::tvec4,0>::call, COMDAT

; 114  : 		{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 115  : 			return detail::functor1<T, T, P, vecType>::call(abs, x);

	mov	r8, QWORD PTR x$[rsp]
	lea	rdx, OFFSET FLAT:??$abs@H@glm@@YAHH@Z	; glm::abs<int>
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$functor1@HH$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@H$0A@@3@P6AHH@ZAEBU43@@Z ; glm::detail::functor1<int,int,0,glm::tvec4>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 116  : 		}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?call@?$compute_abs_vector@H$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@H$0A@@3@AEBU43@@Z ENDP ; glm::detail::compute_abs_vector<int,0,glm::tvec4,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\s4002675\Downloads\glm-0.9.8.5\glm\glm\detail\func_common.inl
;	COMDAT ?call@?$compute_abs_vector@H$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@H$0A@@3@AEBU43@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
?call@?$compute_abs_vector@H$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@H$0A@@3@AEBU43@@Z PROC ; glm::detail::compute_abs_vector<int,0,glm::tvec3,0>::call, COMDAT

; 114  : 		{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 115  : 			return detail::functor1<T, T, P, vecType>::call(abs, x);

	mov	r8, QWORD PTR x$[rsp]
	lea	rdx, OFFSET FLAT:??$abs@H@glm@@YAHH@Z	; glm::abs<int>
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$functor1@HH$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@H$0A@@3@P6AHH@ZAEBU43@@Z ; glm::detail::functor1<int,int,0,glm::tvec3>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 116  : 		}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?call@?$compute_abs_vector@H$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@H$0A@@3@AEBU43@@Z ENDP ; glm::detail::compute_abs_vector<int,0,glm::tvec3,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\s4002675\Downloads\glm-0.9.8.5\glm\glm\detail\func_common.inl
;	COMDAT ?call@?$compute_abs_vector@H$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@H$0A@@3@AEBU43@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
?call@?$compute_abs_vector@H$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@H$0A@@3@AEBU43@@Z PROC ; glm::detail::compute_abs_vector<int,0,glm::tvec2,0>::call, COMDAT

; 114  : 		{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 115  : 			return detail::functor1<T, T, P, vecType>::call(abs, x);

	mov	r8, QWORD PTR x$[rsp]
	lea	rdx, OFFSET FLAT:??$abs@H@glm@@YAHH@Z	; glm::abs<int>
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$functor1@HH$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@H$0A@@3@P6AHH@ZAEBU43@@Z ; glm::detail::functor1<int,int,0,glm::tvec2>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 116  : 		}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?call@?$compute_abs_vector@H$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@H$0A@@3@AEBU43@@Z ENDP ; glm::detail::compute_abs_vector<int,0,glm::tvec2,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\s4002675\Downloads\glm-0.9.8.5\glm\glm\detail\func_common.inl
;	COMDAT ?call@?$compute_abs_vector@H$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@H$0A@@3@AEBU43@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
?call@?$compute_abs_vector@H$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@H$0A@@3@AEBU43@@Z PROC ; glm::detail::compute_abs_vector<int,0,glm::tvec1,0>::call, COMDAT

; 114  : 		{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 115  : 			return detail::functor1<T, T, P, vecType>::call(abs, x);

	mov	r8, QWORD PTR x$[rsp]
	lea	rdx, OFFSET FLAT:??$abs@H@glm@@YAHH@Z	; glm::abs<int>
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$functor1@HH$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@H$0A@@3@P6AHH@ZAEBU43@@Z ; glm::detail::functor1<int,int,0,glm::tvec1>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 116  : 		}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?call@?$compute_abs_vector@H$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@H$0A@@3@AEBU43@@Z ENDP ; glm::detail::compute_abs_vector<int,0,glm::tvec1,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\s4002675\Downloads\glm-0.9.8.5\glm\glm\detail\func_common.inl
;	COMDAT ?call@?$compute_abs@G$0A@@detail@glm@@SAGG@Z
_TEXT	SEGMENT
x$ = 16
?call@?$compute_abs@G$0A@@detail@glm@@SAGG@Z PROC	; glm::detail::compute_abs<unsigned short,0>::call, COMDAT

; 102  : 		{

$LN3:
	mov	WORD PTR [rsp+8], cx
	push	rdi

; 103  : 			GLM_STATIC_ASSERT(
; 104  : 				(!std::numeric_limits<genFIType>::is_signed && std::numeric_limits<genFIType>::is_integer) || GLM_UNRESTRICTED_GENTYPE,
; 105  : 				"'abs' only accept floating-point and integer scalar or vector inputs");
; 106  : 			return x;

	movzx	eax, WORD PTR x$[rsp]

; 107  : 		}

	pop	rdi
	ret	0
?call@?$compute_abs@G$0A@@detail@glm@@SAGG@Z ENDP	; glm::detail::compute_abs<unsigned short,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\s4002675\Downloads\glm-0.9.8.5\glm\glm\detail\func_common.inl
;	COMDAT ?call@?$compute_abs@F$00@detail@glm@@SAFF@Z
_TEXT	SEGMENT
tv69 = 0
x$ = 32
?call@?$compute_abs@F$00@detail@glm@@SAFF@Z PROC	; glm::detail::compute_abs<short,1>::call, COMDAT

; 77   : 		{

$LN5:
	mov	WORD PTR [rsp+8], cx
	push	rdi
	sub	rsp, 16

; 78   : 			GLM_STATIC_ASSERT(
; 79   : 				std::numeric_limits<genFIType>::is_iec559 || std::numeric_limits<genFIType>::is_signed || GLM_UNRESTRICTED_GENTYPE,
; 80   : 				"'abs' only accept floating-point and integer scalar or vector inputs");
; 81   : 
; 82   : 			return x >= genFIType(0) ? x : -x;

	movsx	eax, WORD PTR x$[rsp]
	test	eax, eax
	jl	SHORT $LN3@call
	movsx	eax, WORD PTR x$[rsp]
	mov	DWORD PTR tv69[rsp], eax
	jmp	SHORT $LN4@call
$LN3@call:
	movsx	eax, WORD PTR x$[rsp]
	neg	eax
	mov	DWORD PTR tv69[rsp], eax
$LN4@call:
	movzx	eax, WORD PTR tv69[rsp]

; 83   : 			// TODO, perf comp with: *(((int *) &x) + 1) &= 0x7fffffff;
; 84   : 		}

	add	rsp, 16
	pop	rdi
	ret	0
?call@?$compute_abs@F$00@detail@glm@@SAFF@Z ENDP	; glm::detail::compute_abs<short,1>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xmemory
;	COMDAT ??$_Uninitialized_value_construct_n@V?$allocator@I@std@@@std@@YAPEAIPEAI_KAEAV?$allocator@I@0@@Z
_TEXT	SEGMENT
_PFirst$4 = 32
_Backout$ = 56
$T5 = 88
_First$ = 112
_Count$ = 120
_Al$ = 128
??$_Uninitialized_value_construct_n@V?$allocator@I@std@@@std@@YAPEAIPEAI_KAEAV?$allocator@I@0@@Z PROC ; std::_Uninitialized_value_construct_n<std::allocator<unsigned int> >, COMDAT

; 1795 :     _Alloc_ptr_t<_Alloc> _First, _Alloc_size_t<_Alloc> _Count, _Alloc& _Al) {

$LN7:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 96					; 00000060H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 16
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+112]

; 1796 :     // value-initialize _Count objects to raw _First, using _Al
; 1797 :     using _Ptrty = typename _Alloc::value_type*;
; 1798 :     if constexpr (_Use_memset_value_construct_v<_Ptrty> && _Uses_default_construct<_Alloc, _Ptrty>::value) {
; 1799 : #ifdef __cpp_lib_constexpr_dynamic_alloc
; 1800 :         if (!_STD is_constant_evaluated())
; 1801 : #endif // __cpp_lib_constexpr_dynamic_alloc
; 1802 :         {
; 1803 :             auto _PFirst = _Unfancy(_First);

	mov	rcx, QWORD PTR _First$[rsp]
	call	??$_Unfancy@I@std@@YAPEAIPEAI@Z		; std::_Unfancy<unsigned int>
	mov	QWORD PTR _PFirst$4[rsp], rax

; 1804 :             _Zero_range(_PFirst, _PFirst + _Count);

	mov	rax, QWORD PTR _PFirst$4[rsp]
	mov	rcx, QWORD PTR _Count$[rsp]
	lea	rax, QWORD PTR [rax+rcx*4]
	mov	rdx, rax
	mov	rcx, QWORD PTR _PFirst$4[rsp]
	call	??$_Zero_range@PEAI@std@@YAPEAIQEAI0@Z	; std::_Zero_range<unsigned int *>

; 1805 :             return _First + _Count;

	mov	rax, QWORD PTR _First$[rsp]
	mov	rcx, QWORD PTR _Count$[rsp]
	lea	rax, QWORD PTR [rax+rcx*4]
	jmp	SHORT $LN1@Uninitiali

; 1806 :         }
; 1807 :     }
; 1808 : 
; 1809 :     _Uninitialized_backout_al<_Alloc> _Backout{_First, _Al};

	mov	r8, QWORD PTR _Al$[rsp]
	mov	rdx, QWORD PTR _First$[rsp]
	lea	rcx, QWORD PTR _Backout$[rsp]
	call	??0?$_Uninitialized_backout_al@V?$allocator@I@std@@@std@@QEAA@PEAIAEAV?$allocator@I@1@@Z ; std::_Uninitialized_backout_al<std::allocator<unsigned int> >::_Uninitialized_backout_al<std::allocator<unsigned int> >

; 1810 :     for (; 0 < _Count; --_Count) {

	jmp	SHORT $LN4@Uninitiali
$LN2@Uninitiali:
	mov	rax, QWORD PTR _Count$[rsp]
	dec	rax
	mov	QWORD PTR _Count$[rsp], rax
$LN4@Uninitiali:
	cmp	QWORD PTR _Count$[rsp], 0
	jbe	SHORT $LN3@Uninitiali

; 1811 :         _Backout._Emplace_back();

	lea	rcx, QWORD PTR _Backout$[rsp]
	call	??$_Emplace_back@$$V@?$_Uninitialized_backout_al@V?$allocator@I@std@@@std@@QEAAXXZ ; std::_Uninitialized_backout_al<std::allocator<unsigned int> >::_Emplace_back<>

; 1812 :     }

	jmp	SHORT $LN2@Uninitiali
$LN3@Uninitiali:

; 1813 : 
; 1814 :     return _Backout._Release();

	lea	rcx, QWORD PTR _Backout$[rsp]
	call	?_Release@?$_Uninitialized_backout_al@V?$allocator@I@std@@@std@@QEAAPEAIXZ ; std::_Uninitialized_backout_al<std::allocator<unsigned int> >::_Release
	mov	QWORD PTR $T5[rsp], rax
	lea	rcx, QWORD PTR _Backout$[rsp]
	call	??1?$_Uninitialized_backout_al@V?$allocator@I@std@@@std@@QEAA@XZ ; std::_Uninitialized_backout_al<std::allocator<unsigned int> >::~_Uninitialized_backout_al<std::allocator<unsigned int> >
	mov	rax, QWORD PTR $T5[rsp]
$LN1@Uninitiali:

; 1815 : }

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$_Uninitialized_value_construct_n@V?$allocator@I@std@@@std@@YAPEAIPEAI_KAEAV?$allocator@I@0@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
??$_Uninitialized_value_construct_n@V?$allocator@I@std@@@std@@YAPEAIPEAI_KAEAV?$allocator@I@0@@Z ENDP ; std::_Uninitialized_value_construct_n<std::allocator<unsigned int> >
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
_PFirst$4 = 32
_Backout$ = 56
$T5 = 88
_First$ = 112
_Count$ = 120
_Al$ = 128
?dtor$0@?0???$_Uninitialized_value_construct_n@V?$allocator@I@std@@@std@@YAPEAIPEAI_KAEAV?$allocator@I@0@@Z@4HA PROC ; `std::_Uninitialized_value_construct_n<std::allocator<unsigned int> >'::`1'::dtor$0
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	lea	rcx, QWORD PTR _Backout$[rbp]
	call	??1?$_Uninitialized_backout_al@V?$allocator@I@std@@@std@@QEAA@XZ ; std::_Uninitialized_backout_al<std::allocator<unsigned int> >::~_Uninitialized_backout_al<std::allocator<unsigned int> >
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$0@?0???$_Uninitialized_value_construct_n@V?$allocator@I@std@@@std@@YAPEAIPEAI_KAEAV?$allocator@I@0@@Z@4HA ENDP ; `std::_Uninitialized_value_construct_n<std::allocator<unsigned int> >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
_PFirst$4 = 32
_Backout$ = 56
$T5 = 88
_First$ = 112
_Count$ = 120
_Al$ = 128
?dtor$0@?0???$_Uninitialized_value_construct_n@V?$allocator@I@std@@@std@@YAPEAIPEAI_KAEAV?$allocator@I@0@@Z@4HA PROC ; `std::_Uninitialized_value_construct_n<std::allocator<unsigned int> >'::`1'::dtor$0
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	lea	rcx, QWORD PTR _Backout$[rbp]
	call	??1?$_Uninitialized_backout_al@V?$allocator@I@std@@@std@@QEAA@XZ ; std::_Uninitialized_backout_al<std::allocator<unsigned int> >::~_Uninitialized_backout_al<std::allocator<unsigned int> >
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$0@?0???$_Uninitialized_value_construct_n@V?$allocator@I@std@@@std@@YAPEAIPEAI_KAEAV?$allocator@I@0@@Z@4HA ENDP ; `std::_Uninitialized_value_construct_n<std::allocator<unsigned int> >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xmemory
;	COMDAT ??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z
_TEXT	SEGMENT
_Bytes$ = 48
??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z PROC ; std::_Allocate<16,std::_Default_allocate_traits,0>, COMDAT

; 230  : __declspec(allocator) _CONSTEXPR20_DYNALLOC void* _Allocate(const size_t _Bytes) {

$LN5:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 231  :     // allocate _Bytes when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 232  : #if defined(_M_IX86) || defined(_M_X64)
; 233  : #ifdef __cpp_lib_constexpr_dynamic_alloc // TRANSITION, GH-1532
; 234  :     if (!_STD is_constant_evaluated())
; 235  : #endif // __cpp_lib_constexpr_dynamic_alloc
; 236  :     {
; 237  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

	cmp	QWORD PTR _Bytes$[rsp], 4096		; 00001000H
	jb	SHORT $LN2@Allocate

; 238  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

	mov	rcx, QWORD PTR _Bytes$[rsp]
	call	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
	jmp	SHORT $LN1@Allocate
$LN2@Allocate:

; 239  :         }
; 240  :     }
; 241  : #endif // defined(_M_IX86) || defined(_M_X64)
; 242  : 
; 243  :     if (_Bytes != 0) {

	cmp	QWORD PTR _Bytes$[rsp], 0
	je	SHORT $LN3@Allocate

; 244  :         return _Traits::_Allocate(_Bytes);

	mov	rcx, QWORD PTR _Bytes$[rsp]
	call	?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z ; std::_Default_allocate_traits::_Allocate
	jmp	SHORT $LN1@Allocate
$LN3@Allocate:

; 245  :     }
; 246  : 
; 247  :     return nullptr;

	xor	eax, eax
$LN1@Allocate:

; 248  : }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z ENDP ; std::_Allocate<16,std::_Default_allocate_traits,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xmemory
;	COMDAT ??$_Get_size_of_n@$0BA@@std@@YA_K_K@Z
_TEXT	SEGMENT
_Overflow_is_possible$ = 32
_Max_possible$1 = 40
_Count$ = 64
??$_Get_size_of_n@$0BA@@std@@YA_K_K@Z PROC		; std::_Get_size_of_n<16>, COMDAT

; 59   : _NODISCARD constexpr size_t _Get_size_of_n(const size_t _Count) {

$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 60   :     constexpr bool _Overflow_is_possible = _Ty_size > 1;

	mov	BYTE PTR _Overflow_is_possible$[rsp], 1

; 61   : 
; 62   :     if constexpr (_Overflow_is_possible) {
; 63   :         constexpr size_t _Max_possible = static_cast<size_t>(-1) / _Ty_size;

	mov	rax, 1152921504606846975		; 0fffffffffffffffH
	mov	QWORD PTR _Max_possible$1[rsp], rax

; 64   :         if (_Count > _Max_possible) {

	mov	rax, 1152921504606846975		; 0fffffffffffffffH
	cmp	QWORD PTR _Count$[rsp], rax
	jbe	SHORT $LN2@Get_size_o

; 65   :             _Throw_bad_array_new_length(); // multiply overflow

	call	?_Throw_bad_array_new_length@std@@YAXXZ	; std::_Throw_bad_array_new_length
$LN2@Get_size_o:

; 66   :         }
; 67   :     }
; 68   : 
; 69   :     return _Count * _Ty_size;

	imul	rax, QWORD PTR _Count$[rsp], 16
$LN3@Get_size_o:

; 70   : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$_Get_size_of_n@$0BA@@std@@YA_K_K@Z ENDP		; std::_Get_size_of_n<16>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\s4002675\Downloads\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??$?DH$0A@@glm@@YA?AU?$tvec1@H$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
v1$ = 56
v2$ = 64
??$?DH$0A@@glm@@YA?AU?$tvec1@H$0A@@0@AEBU10@0@Z PROC	; glm::operator*<int,0>, COMDAT

; 372  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 373  : 		return tvec1<T, P>(

	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	mov	eax, DWORD PTR [rax]
	imul	eax, DWORD PTR [rcx]
	mov	edx, eax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec1@H$0A@@glm@@QEAA@H@Z		; glm::tvec1<int,0>::tvec1<int,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 374  : 			v1.x * v2.x);
; 375  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?DH$0A@@glm@@YA?AU?$tvec1@H$0A@@0@AEBU10@0@Z ENDP	; glm::operator*<int,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\s4002675\Downloads\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??$?HH$0A@@glm@@YA?AU?$tvec1@H$0A@@0@AEBU10@H@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
v$ = 56
scalar$ = 64
??$?HH$0A@@glm@@YA?AU?$tvec1@H$0A@@0@AEBU10@H@Z PROC	; glm::operator+<int,0>, COMDAT

; 315  : 	{

$LN3:
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 316  : 		return tvec1<T, P>(

	mov	rax, QWORD PTR v$[rsp]
	mov	eax, DWORD PTR [rax]
	add	eax, DWORD PTR scalar$[rsp]
	mov	edx, eax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec1@H$0A@@glm@@QEAA@H@Z		; glm::tvec1<int,0>::tvec1<int,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 317  : 			v.x + scalar);
; 318  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?HH$0A@@glm@@YA?AU?$tvec1@H$0A@@0@AEBU10@H@Z ENDP	; glm::operator+<int,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\s4002675\Downloads\glm-0.9.8.5\glm\glm\gtc\round.inl
;	COMDAT ?call@?$compute_ceilShift@H$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@H$0A@@3@AEBU43@H@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 16
v$ = 24
__formal$ = 32
?call@?$compute_ceilShift@H$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@H$0A@@3@AEBU43@H@Z PROC ; glm::detail::compute_ceilShift<int,0,glm::tvec1,0>::call, COMDAT

; 13   : 		{

$LN3:
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 14   : 			return v;

	mov	rax, QWORD PTR v$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	mov	DWORD PTR [rcx], eax
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 15   : 		}

	pop	rdi
	ret	0
?call@?$compute_ceilShift@H$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@H$0A@@3@AEBU43@H@Z ENDP ; glm::detail::compute_ceilShift<int,0,glm::tvec1,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\s4002675\Downloads\glm-0.9.8.5\glm\glm\gtc\round.inl
;	COMDAT ?call@?$compute_ceilShift@H$0A@Utvec1@glm@@$00@detail@glm@@SA?AU?$tvec1@H$0A@@3@AEBU43@H@Z
_TEXT	SEGMENT
$T1 = 32
__$ReturnUdt$ = 64
v$ = 72
Shift$ = 80
?call@?$compute_ceilShift@H$0A@Utvec1@glm@@$00@detail@glm@@SA?AU?$tvec1@H$0A@@3@AEBU43@H@Z PROC ; glm::detail::compute_ceilShift<int,0,glm::tvec1,1>::call, COMDAT

; 22   : 		{

$LN3:
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 23   : 			return v | (v >> Shift);

	mov	r8d, DWORD PTR Shift$[rsp]
	mov	rdx, QWORD PTR v$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?5H$0A@@glm@@YA?AU?$tvec1@H$0A@@0@AEBU10@H@Z ; glm::operator>><int,0>
	mov	r8, rax
	mov	rdx, QWORD PTR v$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$?UH$0A@@glm@@YA?AU?$tvec1@H$0A@@0@AEBU10@0@Z ; glm::operator|<int,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 24   : 		}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?call@?$compute_ceilShift@H$0A@Utvec1@glm@@$00@detail@glm@@SA?AU?$tvec1@H$0A@@3@AEBU43@H@Z ENDP ; glm::detail::compute_ceilShift<int,0,glm::tvec1,1>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\s4002675\Downloads\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??$?UH$0A@@glm@@YA?AU?$tvec1@H$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
v1$ = 56
v2$ = 64
??$?UH$0A@@glm@@YA?AU?$tvec1@H$0A@@0@AEBU10@0@Z PROC	; glm::operator|<int,0>, COMDAT

; 458  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 459  : 		return tvec1<T, P>(

	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	mov	ecx, DWORD PTR [rcx]
	mov	eax, DWORD PTR [rax]
	or	eax, ecx
	mov	edx, eax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec1@H$0A@@glm@@QEAA@H@Z		; glm::tvec1<int,0>::tvec1<int,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 460  : 			v1.x | v2.x);
; 461  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?UH$0A@@glm@@YA?AU?$tvec1@H$0A@@0@AEBU10@0@Z ENDP	; glm::operator|<int,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\s4002675\Downloads\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??$?5H$0A@@glm@@YA?AU?$tvec1@H$0A@@0@AEBU10@H@Z
_TEXT	SEGMENT
tv70 = 32
__$ReturnUdt$ = 64
v$ = 72
scalar$ = 80
??$?5H$0A@@glm@@YA?AU?$tvec1@H$0A@@0@AEBU10@H@Z PROC	; glm::operator>><int,0>, COMDAT

; 507  : 	{

$LN3:
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 508  : 		return tvec1<T, P>(

	mov	eax, DWORD PTR scalar$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	QWORD PTR tv70[rsp], rcx
	movzx	ecx, al
	mov	rax, QWORD PTR tv70[rsp]
	mov	eax, DWORD PTR [rax]
	sar	eax, cl
	mov	edx, eax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec1@H$0A@@glm@@QEAA@H@Z		; glm::tvec1<int,0>::tvec1<int,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 509  : 			v.x >> scalar);
; 510  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$?5H$0A@@glm@@YA?AU?$tvec1@H$0A@@0@AEBU10@H@Z ENDP	; glm::operator>><int,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\s4002675\Downloads\glm-0.9.8.5\glm\glm\detail\func_common.inl
;	COMDAT ??$sign@H$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@H$0A@@0@AEBU10@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
??$sign@H$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@H$0A@@0@AEBU10@@Z PROC ; glm::sign<int,0,glm::tvec1>, COMDAT

; 334  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 335  : 		GLM_STATIC_ASSERT(
; 336  : 			std::numeric_limits<T>::is_iec559 || (std::numeric_limits<T>::is_signed && std::numeric_limits<T>::is_integer),
; 337  : 			"'sign' only accept signed inputs");
; 338  : 
; 339  : 		return detail::compute_sign<T, P, vecType, std::numeric_limits<T>::is_iec559, detail::is_aligned<P>::value>::call(x);

	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_sign@H$0A@Utvec1@glm@@$0A@$0A@@detail@glm@@SA?AU?$tvec1@H$0A@@3@AEBU43@@Z ; glm::detail::compute_sign<int,0,glm::tvec1,0,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 340  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$sign@H$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@H$0A@@0@AEBU10@@Z ENDP ; glm::sign<int,0,glm::tvec1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\s4002675\Downloads\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??$?HI$0A@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@I@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
v$ = 56
scalar$ = 64
??$?HI$0A@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@I@Z PROC	; glm::operator+<unsigned int,0>, COMDAT

; 315  : 	{

$LN3:
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 316  : 		return tvec1<T, P>(

	mov	rax, QWORD PTR v$[rsp]
	mov	eax, DWORD PTR [rax]
	add	eax, DWORD PTR scalar$[rsp]
	mov	edx, eax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec1@I$0A@@glm@@QEAA@I@Z		; glm::tvec1<unsigned int,0>::tvec1<unsigned int,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 317  : 			v.x + scalar);
; 318  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?HI$0A@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@I@Z ENDP	; glm::operator+<unsigned int,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\s4002675\Downloads\glm-0.9.8.5\glm\glm\gtc\round.inl
;	COMDAT ?call@?$compute_ceilShift@I$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@I$0A@@3@AEBU43@I@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 16
v$ = 24
__formal$ = 32
?call@?$compute_ceilShift@I$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@I$0A@@3@AEBU43@I@Z PROC ; glm::detail::compute_ceilShift<unsigned int,0,glm::tvec1,0>::call, COMDAT

; 13   : 		{

$LN3:
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 14   : 			return v;

	mov	rax, QWORD PTR v$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	mov	DWORD PTR [rcx], eax
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 15   : 		}

	pop	rdi
	ret	0
?call@?$compute_ceilShift@I$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@I$0A@@3@AEBU43@I@Z ENDP ; glm::detail::compute_ceilShift<unsigned int,0,glm::tvec1,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\s4002675\Downloads\glm-0.9.8.5\glm\glm\gtc\round.inl
;	COMDAT ?call@?$compute_ceilShift@I$0A@Utvec1@glm@@$00@detail@glm@@SA?AU?$tvec1@I$0A@@3@AEBU43@I@Z
_TEXT	SEGMENT
$T1 = 32
__$ReturnUdt$ = 64
v$ = 72
Shift$ = 80
?call@?$compute_ceilShift@I$0A@Utvec1@glm@@$00@detail@glm@@SA?AU?$tvec1@I$0A@@3@AEBU43@I@Z PROC ; glm::detail::compute_ceilShift<unsigned int,0,glm::tvec1,1>::call, COMDAT

; 22   : 		{

$LN3:
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 23   : 			return v | (v >> Shift);

	mov	r8d, DWORD PTR Shift$[rsp]
	mov	rdx, QWORD PTR v$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?5I$0A@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@I@Z ; glm::operator>><unsigned int,0>
	mov	r8, rax
	mov	rdx, QWORD PTR v$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$?UI$0A@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@0@Z ; glm::operator|<unsigned int,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 24   : 		}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?call@?$compute_ceilShift@I$0A@Utvec1@glm@@$00@detail@glm@@SA?AU?$tvec1@I$0A@@3@AEBU43@I@Z ENDP ; glm::detail::compute_ceilShift<unsigned int,0,glm::tvec1,1>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\s4002675\Downloads\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??$?UI$0A@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
v1$ = 56
v2$ = 64
??$?UI$0A@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@0@Z PROC	; glm::operator|<unsigned int,0>, COMDAT

; 458  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 459  : 		return tvec1<T, P>(

	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	mov	ecx, DWORD PTR [rcx]
	mov	eax, DWORD PTR [rax]
	or	eax, ecx
	mov	edx, eax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec1@I$0A@@glm@@QEAA@I@Z		; glm::tvec1<unsigned int,0>::tvec1<unsigned int,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 460  : 			v1.x | v2.x);
; 461  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?UI$0A@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@0@Z ENDP	; glm::operator|<unsigned int,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\s4002675\Downloads\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??$?5I$0A@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@I@Z
_TEXT	SEGMENT
tv70 = 32
__$ReturnUdt$ = 64
v$ = 72
scalar$ = 80
??$?5I$0A@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@I@Z PROC	; glm::operator>><unsigned int,0>, COMDAT

; 507  : 	{

$LN3:
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 508  : 		return tvec1<T, P>(

	mov	eax, DWORD PTR scalar$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	QWORD PTR tv70[rsp], rcx
	movzx	ecx, al
	mov	rax, QWORD PTR tv70[rsp]
	mov	eax, DWORD PTR [rax]
	shr	eax, cl
	mov	edx, eax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec1@I$0A@@glm@@QEAA@I@Z		; glm::tvec1<unsigned int,0>::tvec1<unsigned int,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 509  : 			v.x >> scalar);
; 510  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$?5I$0A@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@I@Z ENDP	; glm::operator>><unsigned int,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\s4002675\Downloads\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??$?GI$0A@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@I@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
v$ = 56
scalar$ = 64
??$?GI$0A@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@I@Z PROC	; glm::operator-<unsigned int,0>, COMDAT

; 337  : 	{

$LN3:
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 338  : 		return tvec1<T, P>(

	mov	rax, QWORD PTR v$[rsp]
	mov	ecx, DWORD PTR scalar$[rsp]
	mov	eax, DWORD PTR [rax]
	sub	eax, ecx
	mov	edx, eax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec1@I$0A@@glm@@QEAA@I@Z		; glm::tvec1<unsigned int,0>::tvec1<unsigned int,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 339  : 			v.x - scalar);
; 340  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?GI$0A@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@I@Z ENDP	; glm::operator-<unsigned int,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xutility
;	COMDAT ??$_Construct_in_place@U_Container_proxy@std@@PEAU_Container_base12@2@@std@@YAXAEAU_Container_proxy@0@$$QEAPEAU_Container_base12@0@@Z
_TEXT	SEGMENT
$T1 = 32
_Obj$ = 64
<_Args_0>$ = 72
??$_Construct_in_place@U_Container_proxy@std@@PEAU_Container_base12@2@@std@@YAXAEAU_Container_proxy@0@$$QEAPEAU_Container_base12@0@@Z PROC ; std::_Construct_in_place<std::_Container_proxy,std::_Container_base12 *>, COMDAT

; 151  :     is_nothrow_constructible_v<_Ty, _Types...>) {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 152  : #ifdef __cpp_lib_constexpr_dynamic_alloc
; 153  :     if (_STD is_constant_evaluated()) {
; 154  :         _STD construct_at(_STD addressof(_Obj), _STD forward<_Types>(_Args)...);
; 155  :     } else
; 156  : #endif // __cpp_lib_constexpr_dynamic_alloc
; 157  :     {
; 158  :         ::new (_Voidify_iter(_STD addressof(_Obj))) _Ty(_STD forward<_Types>(_Args)...);

	mov	rcx, QWORD PTR _Obj$[rsp]
	call	??$addressof@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@AEAU10@@Z ; std::addressof<std::_Container_proxy>
	mov	rcx, rax
	call	??$_Voidify_iter@PEAU_Container_proxy@std@@@std@@YAPEAXPEAU_Container_proxy@0@@Z ; std::_Voidify_iter<std::_Container_proxy *>
	mov	rdx, rax
	mov	ecx, 16
	call	??2@YAPEAX_KPEAX@Z			; operator new
	mov	QWORD PTR $T1[rsp], rax
	mov	rcx, QWORD PTR <_Args_0>$[rsp]
	call	??$forward@PEAU_Container_base12@std@@@std@@YA$$QEAPEAU_Container_base12@0@AEAPEAU10@@Z ; std::forward<std::_Container_base12 *>
	mov	rdx, QWORD PTR [rax]
	mov	rcx, QWORD PTR $T1[rsp]
	call	??0_Container_proxy@std@@QEAA@PEAU_Container_base12@1@@Z ; std::_Container_proxy::_Container_proxy

; 159  :     }
; 160  : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$_Construct_in_place@U_Container_proxy@std@@PEAU_Container_base12@2@@std@@YAXAEAU_Container_proxy@0@$$QEAPEAU_Container_base12@0@@Z ENDP ; std::_Construct_in_place<std::_Container_proxy,std::_Container_base12 *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xstddef
;	COMDAT ??$_Unfancy@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@PEAU10@@Z
_TEXT	SEGMENT
_Ptr$ = 16
??$_Unfancy@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@PEAU10@@Z PROC ; std::_Unfancy<std::_Container_proxy>, COMDAT

; 288  : _NODISCARD constexpr _Ty* _Unfancy(_Ty* _Ptr) noexcept { // do nothing for plain pointers

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 289  :     return _Ptr;

	mov	rax, QWORD PTR _Ptr$[rsp]

; 290  : }

	pop	rdi
	ret	0
??$_Unfancy@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@PEAU10@@Z ENDP ; std::_Unfancy<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xmemory
;	COMDAT ??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z
_TEXT	SEGMENT
_Al$ = 48
_Ptr$ = 56
??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z PROC ; std::_Deallocate_plain<std::allocator<std::_Container_proxy> >, COMDAT

; 985  : _CONSTEXPR20_DYNALLOC void _Deallocate_plain(_Alloc& _Al, typename _Alloc::value_type* const _Ptr) noexcept {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 986  :     // deallocate a plain pointer using an allocator
; 987  :     using _Alloc_traits = allocator_traits<_Alloc>;
; 988  :     if constexpr (is_same_v<_Alloc_ptr_t<_Alloc>, typename _Alloc::value_type*>) {
; 989  :         _Alloc_traits::deallocate(_Al, _Ptr, 1);

	mov	r8d, 1
	mov	rdx, QWORD PTR _Ptr$[rsp]
	mov	rcx, QWORD PTR _Al$[rsp]
	call	?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@2@QEAU_Container_proxy@2@_K@Z ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate
	npad	1

; 990  :     } else {
; 991  :         using _Ptr_traits = pointer_traits<_Alloc_ptr_t<_Alloc>>;
; 992  :         _Alloc_traits::deallocate(_Al, _Ptr_traits::pointer_to(*_Ptr), 1);
; 993  :     }
; 994  : }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z ENDP ; std::_Deallocate_plain<std::allocator<std::_Container_proxy> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\vector
;	COMDAT ??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@IV?$allocator@I@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z
_TEXT	SEGMENT
_My_data$ = 32
_Myfirst$ = 40
_Mylast$ = 48
_Oldsize$ = 56
_Newcapacity$ = 64
_Newvec$ = 72
_Appended_first$ = 80
_Appended_last$ = 88
tv143 = 96
this$ = 128
_Newsize$ = 136
_Val$ = 144
??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@IV?$allocator@I@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z PROC ; std::vector<unsigned int,std::allocator<unsigned int> >::_Resize_reallocate<std::_Value_init_tag>, COMDAT

; 1229 :     _CONSTEXPR20_CONTAINER void _Resize_reallocate(const size_type _Newsize, const _Ty2& _Val) {

$LN11:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 112				; 00000070H

; 1230 :         if (_Newsize > max_size()) {

	mov	rcx, QWORD PTR this$[rsp]
	call	?max_size@?$vector@IV?$allocator@I@std@@@std@@QEBA_KXZ ; std::vector<unsigned int,std::allocator<unsigned int> >::max_size
	cmp	QWORD PTR _Newsize$[rsp], rax
	jbe	SHORT $LN2@Resize_rea

; 1231 :             _Xlength();

	call	?_Xlength@?$vector@IV?$allocator@I@std@@@std@@CAXXZ ; std::vector<unsigned int,std::allocator<unsigned int> >::_Xlength
$LN2@Resize_rea:

; 1232 :         }
; 1233 : 
; 1234 :         auto& _My_data    = _Mypair._Myval2;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR _My_data$[rsp], rax

; 1235 :         pointer& _Myfirst = _My_data._Myfirst;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 8
	mov	QWORD PTR _Myfirst$[rsp], rax

; 1236 :         pointer& _Mylast  = _My_data._Mylast;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 16
	mov	QWORD PTR _Mylast$[rsp], rax

; 1237 : 
; 1238 :         const auto _Oldsize          = static_cast<size_type>(_Mylast - _Myfirst);

	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rcx, QWORD PTR _Myfirst$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	rax, QWORD PTR [rax]
	sub	rax, rcx
	sar	rax, 2
	mov	QWORD PTR _Oldsize$[rsp], rax

; 1239 :         const size_type _Newcapacity = _Calculate_growth(_Newsize);

	mov	rdx, QWORD PTR _Newsize$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?_Calculate_growth@?$vector@IV?$allocator@I@std@@@std@@AEBA_K_K@Z ; std::vector<unsigned int,std::allocator<unsigned int> >::_Calculate_growth
	mov	QWORD PTR _Newcapacity$[rsp], rax

; 1240 : 
; 1241 :         const pointer _Newvec         = _Getal().allocate(_Newcapacity);

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Getal@?$vector@IV?$allocator@I@std@@@std@@AEAAAEAV?$allocator@I@2@XZ ; std::vector<unsigned int,std::allocator<unsigned int> >::_Getal
	mov	rdx, QWORD PTR _Newcapacity$[rsp]
	mov	rcx, rax
	call	?allocate@?$allocator@I@std@@QEAAPEAI_K@Z ; std::allocator<unsigned int>::allocate
	mov	QWORD PTR _Newvec$[rsp], rax

; 1242 :         const pointer _Appended_first = _Newvec + _Oldsize;

	mov	rax, QWORD PTR _Newvec$[rsp]
	mov	rcx, QWORD PTR _Oldsize$[rsp]
	lea	rax, QWORD PTR [rax+rcx*4]
	mov	QWORD PTR _Appended_first$[rsp], rax

; 1243 :         pointer _Appended_last        = _Appended_first;

	mov	rax, QWORD PTR _Appended_first$[rsp]
	mov	QWORD PTR _Appended_last$[rsp], rax

; 1244 : 
; 1245 :         _TRY_BEGIN
; 1246 :         _Appended_last = _Ufill(_Appended_first, _Newsize - _Oldsize, _Val);

	mov	rax, QWORD PTR _Oldsize$[rsp]
	mov	rcx, QWORD PTR _Newsize$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR _Val$[rsp]
	movzx	r9d, BYTE PTR [rcx]
	mov	r8, rax
	mov	rdx, QWORD PTR _Appended_first$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?_Ufill@?$vector@IV?$allocator@I@std@@@std@@AEAAPEAIPEAI_KU_Value_init_tag@2@@Z ; std::vector<unsigned int,std::allocator<unsigned int> >::_Ufill
	mov	QWORD PTR tv143[rsp], rax
	mov	rax, QWORD PTR tv143[rsp]
	mov	QWORD PTR _Appended_last$[rsp], rax

; 1247 :         _Umove_if_noexcept(_Myfirst, _Mylast, _Newvec);

	mov	r9, QWORD PTR _Newvec$[rsp]
	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	r8, QWORD PTR [rax]
	mov	rax, QWORD PTR _Myfirst$[rsp]
	mov	rdx, QWORD PTR [rax]
	mov	rcx, QWORD PTR this$[rsp]
	call	?_Umove_if_noexcept@?$vector@IV?$allocator@I@std@@@std@@AEAAXPEAI00@Z ; std::vector<unsigned int,std::allocator<unsigned int> >::_Umove_if_noexcept
	npad	1
	jmp	SHORT $LN7@Resize_rea
$LN8@Resize_rea:
$LN7@Resize_rea:

; 1248 :         _CATCH_ALL
; 1249 :         _Destroy(_Appended_first, _Appended_last);
; 1250 :         _Getal().deallocate(_Newvec, _Newcapacity);
; 1251 :         _RERAISE;
; 1252 :         _CATCH_END
; 1253 : 
; 1254 :         _Change_array(_Newvec, _Newsize, _Newcapacity);

	mov	r9, QWORD PTR _Newcapacity$[rsp]
	mov	r8, QWORD PTR _Newsize$[rsp]
	mov	rdx, QWORD PTR _Newvec$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?_Change_array@?$vector@IV?$allocator@I@std@@@std@@AEAAXQEAI_K1@Z ; std::vector<unsigned int,std::allocator<unsigned int> >::_Change_array

; 1255 :     }

	add	rsp, 112				; 00000070H
	pop	rdi
	ret	0
$LN9@Resize_rea:
??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@IV?$allocator@I@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z ENDP ; std::vector<unsigned int,std::allocator<unsigned int> >::_Resize_reallocate<std::_Value_init_tag>
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
_My_data$ = 32
_Myfirst$ = 40
_Mylast$ = 48
_Oldsize$ = 56
_Newcapacity$ = 64
_Newvec$ = 72
_Appended_first$ = 80
_Appended_last$ = 88
tv143 = 96
this$ = 128
_Newsize$ = 136
_Val$ = 144
?catch$0@?0???$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@IV?$allocator@I@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z@4HA PROC ; `std::vector<unsigned int,std::allocator<unsigned int> >::_Resize_reallocate<std::_Value_init_tag>'::`1'::catch$0

; 1248 :         _CATCH_ALL

	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
__catch$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@IV?$allocator@I@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z$0:

; 1248 :         _CATCH_ALL
; 1249 :         _Destroy(_Appended_first, _Appended_last);

	mov	r8, QWORD PTR _Appended_last$[rbp]
	mov	rdx, QWORD PTR _Appended_first$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	call	?_Destroy@?$vector@IV?$allocator@I@std@@@std@@AEAAXPEAI0@Z ; std::vector<unsigned int,std::allocator<unsigned int> >::_Destroy

; 1248 :         _CATCH_ALL
; 1249 :         _Destroy(_Appended_first, _Appended_last);
; 1250 :         _Getal().deallocate(_Newvec, _Newcapacity);

	mov	rcx, QWORD PTR this$[rbp]
	call	?_Getal@?$vector@IV?$allocator@I@std@@@std@@AEAAAEAV?$allocator@I@2@XZ ; std::vector<unsigned int,std::allocator<unsigned int> >::_Getal
	mov	r8, QWORD PTR _Newcapacity$[rbp]
	mov	rdx, QWORD PTR _Newvec$[rbp]
	mov	rcx, rax
	call	?deallocate@?$allocator@I@std@@QEAAXQEAI_K@Z ; std::allocator<unsigned int>::deallocate

; 1248 :         _CATCH_ALL
; 1249 :         _Destroy(_Appended_first, _Appended_last);
; 1250 :         _Getal().deallocate(_Newvec, _Newcapacity);
; 1251 :         _RERAISE;

	xor	edx, edx
	xor	ecx, ecx
	call	_CxxThrowException
	npad	1

; 1248 :         _CATCH_ALL
; 1249 :         _Destroy(_Appended_first, _Appended_last);
; 1250 :         _Getal().deallocate(_Newvec, _Newcapacity);
; 1251 :         _RERAISE;
; 1252 :         _CATCH_END

	lea	rax, $LN8@catch$0
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
	int	3
?catch$0@?0???$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@IV?$allocator@I@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z@4HA ENDP ; `std::vector<unsigned int,std::allocator<unsigned int> >::_Resize_reallocate<std::_Value_init_tag>'::`1'::catch$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
_My_data$ = 32
_Myfirst$ = 40
_Mylast$ = 48
_Oldsize$ = 56
_Newcapacity$ = 64
_Newvec$ = 72
_Appended_first$ = 80
_Appended_last$ = 88
tv143 = 96
this$ = 128
_Newsize$ = 136
_Val$ = 144
?catch$0@?0???$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@IV?$allocator@I@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z@4HA PROC ; `std::vector<unsigned int,std::allocator<unsigned int> >::_Resize_reallocate<std::_Value_init_tag>'::`1'::catch$0

; 1248 :         _CATCH_ALL

	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
__catch$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@IV?$allocator@I@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z$0:

; 1249 :         _Destroy(_Appended_first, _Appended_last);

	mov	r8, QWORD PTR _Appended_last$[rbp]
	mov	rdx, QWORD PTR _Appended_first$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	call	?_Destroy@?$vector@IV?$allocator@I@std@@@std@@AEAAXPEAI0@Z ; std::vector<unsigned int,std::allocator<unsigned int> >::_Destroy

; 1250 :         _Getal().deallocate(_Newvec, _Newcapacity);

	mov	rcx, QWORD PTR this$[rbp]
	call	?_Getal@?$vector@IV?$allocator@I@std@@@std@@AEAAAEAV?$allocator@I@2@XZ ; std::vector<unsigned int,std::allocator<unsigned int> >::_Getal
	mov	r8, QWORD PTR _Newcapacity$[rbp]
	mov	rdx, QWORD PTR _Newvec$[rbp]
	mov	rcx, rax
	call	?deallocate@?$allocator@I@std@@QEAAXQEAI_K@Z ; std::allocator<unsigned int>::deallocate

; 1251 :         _RERAISE;

	xor	edx, edx
	xor	ecx, ecx
	call	_CxxThrowException
	npad	1

; 1252 :         _CATCH_END

	lea	rax, $LN8@catch$0
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
	int	3
?catch$0@?0???$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@IV?$allocator@I@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z@4HA ENDP ; `std::vector<unsigned int,std::allocator<unsigned int> >::_Resize_reallocate<std::_Value_init_tag>'::`1'::catch$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\s4002675\Downloads\glm-0.9.8.5\glm\glm\gtc\round.inl
;	COMDAT ??$call@H@?$compute_ceilMultiple@$0A@$00@detail@glm@@SAHHH@Z
_TEXT	SEGMENT
Tmp$1 = 0
Source$ = 32
Multiple$ = 40
??$call@H@?$compute_ceilMultiple@$0A@$00@detail@glm@@SAHHH@Z PROC ; glm::detail::compute_ceilMultiple<0,1>::call<int>, COMDAT

; 101  : 		{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	push	rdi
	sub	rsp, 16

; 102  : 			if(Source > genType(0))

	cmp	DWORD PTR Source$[rsp], 0
	jle	SHORT $LN2@call

; 103  : 			{
; 104  : 				genType Tmp = Source - genType(1);

	mov	eax, DWORD PTR Source$[rsp]
	dec	eax
	mov	DWORD PTR Tmp$1[rsp], eax

; 105  : 				return Tmp + (Multiple - (Tmp % Multiple));

	mov	eax, DWORD PTR Tmp$1[rsp]
	cdq
	idiv	DWORD PTR Multiple$[rsp]
	mov	eax, edx
	mov	ecx, DWORD PTR Multiple$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR Tmp$1[rsp]
	add	ecx, eax
	mov	eax, ecx
	jmp	SHORT $LN1@call

; 106  : 			}

	jmp	SHORT $LN3@call
$LN2@call:

; 107  : 			else
; 108  : 				return Source + (-Source % Multiple);

	mov	eax, DWORD PTR Source$[rsp]
	neg	eax
	cdq
	idiv	DWORD PTR Multiple$[rsp]
	mov	eax, edx
	mov	ecx, DWORD PTR Source$[rsp]
	add	ecx, eax
	mov	eax, ecx
$LN3@call:
$LN1@call:

; 109  : 		}

	add	rsp, 16
	pop	rdi
	ret	0
??$call@H@?$compute_ceilMultiple@$0A@$00@detail@glm@@SAHHH@Z ENDP ; glm::detail::compute_ceilMultiple<0,1>::call<int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\s4002675\Downloads\glm-0.9.8.5\glm\glm\gtc\round.inl
;	COMDAT ??$call@N@?$compute_ceilMultiple@$00$00@detail@glm@@SANNN@Z
_TEXT	SEGMENT
Source$ = 64
Multiple$ = 72
??$call@N@?$compute_ceilMultiple@$00$00@detail@glm@@SANNN@Z PROC ; glm::detail::compute_ceilMultiple<1,1>::call<double>, COMDAT

; 77   : 		{

$LN5:
	movsd	QWORD PTR [rsp+16], xmm1
	movsd	QWORD PTR [rsp+8], xmm0
	push	rdi
	sub	rsp, 48					; 00000030H

; 78   : 			if(Source > genType(0))

	movsd	xmm0, QWORD PTR Source$[rsp]
	comisd	xmm0, QWORD PTR __real@0000000000000000
	jbe	SHORT $LN2@call

; 79   : 				return Source + (Multiple - std::fmod(Source, Multiple));

	movsd	xmm1, QWORD PTR Multiple$[rsp]
	movsd	xmm0, QWORD PTR Source$[rsp]
	call	fmod
	movsd	xmm1, QWORD PTR Multiple$[rsp]
	subsd	xmm1, xmm0
	movaps	xmm0, xmm1
	movsd	xmm1, QWORD PTR Source$[rsp]
	addsd	xmm1, xmm0
	movaps	xmm0, xmm1
	jmp	SHORT $LN1@call
	jmp	SHORT $LN3@call
$LN2@call:

; 80   : 			else
; 81   : 				return Source + std::fmod(-Source, Multiple);

	movsd	xmm0, QWORD PTR Source$[rsp]
	xorps	xmm0, QWORD PTR __xmm@80000000000000008000000000000000
	movsd	xmm1, QWORD PTR Multiple$[rsp]
	call	fmod
	movsd	xmm1, QWORD PTR Source$[rsp]
	addsd	xmm1, xmm0
	movaps	xmm0, xmm1
$LN3@call:
$LN1@call:

; 82   : 		}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$call@N@?$compute_ceilMultiple@$00$00@detail@glm@@SANNN@Z ENDP ; glm::detail::compute_ceilMultiple<1,1>::call<double>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\s4002675\Downloads\glm-0.9.8.5\glm\glm\gtc\round.inl
;	COMDAT ??$call@N@?$compute_floorMultiple@$00$00@detail@glm@@SANNN@Z
_TEXT	SEGMENT
Source$ = 64
Multiple$ = 72
??$call@N@?$compute_floorMultiple@$00$00@detail@glm@@SANNN@Z PROC ; glm::detail::compute_floorMultiple<1,1>::call<double>, COMDAT

; 120  : 		{

$LN5:
	movsd	QWORD PTR [rsp+16], xmm1
	movsd	QWORD PTR [rsp+8], xmm0
	push	rdi
	sub	rsp, 48					; 00000030H

; 121  : 			if(Source >= genType(0))

	movsd	xmm0, QWORD PTR Source$[rsp]
	comisd	xmm0, QWORD PTR __real@0000000000000000
	jb	SHORT $LN2@call

; 122  : 				return Source - std::fmod(Source, Multiple);

	movsd	xmm1, QWORD PTR Multiple$[rsp]
	movsd	xmm0, QWORD PTR Source$[rsp]
	call	fmod
	movsd	xmm1, QWORD PTR Source$[rsp]
	subsd	xmm1, xmm0
	movaps	xmm0, xmm1
	jmp	SHORT $LN1@call
	jmp	SHORT $LN3@call
$LN2@call:

; 123  : 			else
; 124  : 				return Source - std::fmod(Source, Multiple) - Multiple;

	movsd	xmm1, QWORD PTR Multiple$[rsp]
	movsd	xmm0, QWORD PTR Source$[rsp]
	call	fmod
	movsd	xmm1, QWORD PTR Source$[rsp]
	subsd	xmm1, xmm0
	movaps	xmm0, xmm1
	subsd	xmm0, QWORD PTR Multiple$[rsp]
$LN3@call:
$LN1@call:

; 125  : 		}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$call@N@?$compute_floorMultiple@$00$00@detail@glm@@SANNN@Z ENDP ; glm::detail::compute_floorMultiple<1,1>::call<double>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\s4002675\Downloads\glm-0.9.8.5\glm\glm\detail\func_integer.inl
;	COMDAT ??$findMSB@I@glm@@YAHI@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 36
x$ = 64
??$findMSB@I@glm@@YAHI@Z PROC				; glm::findMSB<unsigned int>, COMDAT

; 350  : 	{

$LN3:
	mov	DWORD PTR [rsp+8], ecx
	push	rdi
	sub	rsp, 48					; 00000030H

; 351  : 		GLM_STATIC_ASSERT(std::numeric_limits<genIUType>::is_integer, "'findMSB' only accept integer values");
; 352  : 
; 353  : 		return findMSB(tvec1<genIUType>(x)).x;

	mov	edx, DWORD PTR x$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??0?$tvec1@I$0A@@glm@@QEAA@I@Z		; glm::tvec1<unsigned int,0>::tvec1<unsigned int,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$findMSB@I$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@H$0A@@0@AEBU?$tvec1@I$0A@@0@@Z ; glm::findMSB<unsigned int,0,glm::tvec1>
	mov	eax, DWORD PTR [rax]

; 354  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$findMSB@I@glm@@YAHI@Z ENDP				; glm::findMSB<unsigned int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\s4002675\Downloads\glm-0.9.8.5\glm\test\gtc\gtc_round.cpp
;	COMDAT ??$highestBitValue@I@ceilPowerOfTwo_advanced@@YAII@Z
_TEXT	SEGMENT
tmp$ = 0
result$ = 4
Value$ = 32
??$highestBitValue@I@ceilPowerOfTwo_advanced@@YAII@Z PROC ; ceilPowerOfTwo_advanced::highestBitValue<unsigned int>, COMDAT

; 151  : 	{

$LN5:
	mov	DWORD PTR [rsp+8], ecx
	push	rdi
	sub	rsp, 16

; 152  : 		genIUType tmp = Value;

	mov	eax, DWORD PTR Value$[rsp]
	mov	DWORD PTR tmp$[rsp], eax

; 153  : 		genIUType result = genIUType(0);

	mov	DWORD PTR result$[rsp], 0
$LN2@highestBit:

; 154  : 		while(tmp)

	cmp	DWORD PTR tmp$[rsp], 0
	je	SHORT $LN3@highestBit

; 155  : 		{
; 156  : 			result = (tmp & (~tmp + 1)); // grab lowest bit

	mov	eax, DWORD PTR tmp$[rsp]
	not	eax
	inc	eax
	mov	ecx, DWORD PTR tmp$[rsp]
	and	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR result$[rsp], eax

; 157  : 			tmp &= ~result; // clear lowest bit

	mov	eax, DWORD PTR result$[rsp]
	not	eax
	mov	ecx, DWORD PTR tmp$[rsp]
	and	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR tmp$[rsp], eax

; 158  : 		}

	jmp	SHORT $LN2@highestBit
$LN3@highestBit:

; 159  : 		return result;

	mov	eax, DWORD PTR result$[rsp]

; 160  : 	}

	add	rsp, 16
	pop	rdi
	ret	0
??$highestBitValue@I@ceilPowerOfTwo_advanced@@YAII@Z ENDP ; ceilPowerOfTwo_advanced::highestBitValue<unsigned int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\s4002675\Downloads\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@I$0A@@glm@@QEAA@I@Z
_TEXT	SEGMENT
this$ = 16
scalar$ = 24
??0?$tvec1@I$0A@@glm@@QEAA@I@Z PROC			; glm::tvec1<unsigned int,0>::tvec1<unsigned int,0>, COMDAT

; 39   : 	{}

$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 38   : 		: x(scalar)

	mov	rax, QWORD PTR this$[rsp]
	mov	ecx, DWORD PTR scalar$[rsp]
	mov	DWORD PTR [rax], ecx

; 39   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec1@I$0A@@glm@@QEAA@I@Z ENDP			; glm::tvec1<unsigned int,0>::tvec1<unsigned int,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\s4002675\Downloads\glm-0.9.8.5\glm\glm\gtc\round.inl
;	COMDAT ?call@?$compute_ceilPowerOfTwo@I$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@I$0A@@3@AEBU43@@Z
_TEXT	SEGMENT
v$ = 36
$T4 = 52
$T5 = 56
$T6 = 60
$T7 = 64
$T8 = 68
$T9 = 72
$T10 = 76
$T11 = 80
$T12 = 84
$T13 = 88
__$ReturnUdt$ = 112
x$ = 120
?call@?$compute_ceilPowerOfTwo@I$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@I$0A@@3@AEBU43@@Z PROC ; glm::detail::compute_ceilPowerOfTwo<unsigned int,0,glm::tvec1,0>::call, COMDAT

; 53   : 		{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 96					; 00000060H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 16
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+112]

; 54   : 			GLM_STATIC_ASSERT(!std::numeric_limits<T>::is_iec559, "'ceilPowerOfTwo' only accept integer scalar or vector inputs");
; 55   : 
; 56   : 			vecType<T, P> v(x);

	mov	rax, QWORD PTR x$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR v$[rsp], eax

; 57   : 
; 58   : 			v = v - static_cast<T>(1);

	mov	r8d, 1
	lea	rdx, QWORD PTR v$[rsp]
	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?GI$0A@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@I@Z ; glm::operator-<unsigned int,0>
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR v$[rsp], eax

; 59   : 			v = v | (v >> static_cast<T>(1));

	mov	r8d, 1
	lea	rdx, QWORD PTR v$[rsp]
	lea	rcx, QWORD PTR $T5[rsp]
	call	??$?5I$0A@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@I@Z ; glm::operator>><unsigned int,0>
	mov	r8, rax
	lea	rdx, QWORD PTR v$[rsp]
	lea	rcx, QWORD PTR $T6[rsp]
	call	??$?UI$0A@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@0@Z ; glm::operator|<unsigned int,0>
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR v$[rsp], eax

; 60   : 			v = v | (v >> static_cast<T>(2));

	mov	r8d, 2
	lea	rdx, QWORD PTR v$[rsp]
	lea	rcx, QWORD PTR $T7[rsp]
	call	??$?5I$0A@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@I@Z ; glm::operator>><unsigned int,0>
	mov	r8, rax
	lea	rdx, QWORD PTR v$[rsp]
	lea	rcx, QWORD PTR $T8[rsp]
	call	??$?UI$0A@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@0@Z ; glm::operator|<unsigned int,0>
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR v$[rsp], eax

; 61   : 			v = v | (v >> static_cast<T>(4));

	mov	r8d, 4
	lea	rdx, QWORD PTR v$[rsp]
	lea	rcx, QWORD PTR $T9[rsp]
	call	??$?5I$0A@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@I@Z ; glm::operator>><unsigned int,0>
	mov	r8, rax
	lea	rdx, QWORD PTR v$[rsp]
	lea	rcx, QWORD PTR $T10[rsp]
	call	??$?UI$0A@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@0@Z ; glm::operator|<unsigned int,0>
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR v$[rsp], eax

; 62   : 			v = compute_ceilShift<T, P, vecType, sizeof(T) >= 2>::call(v, 8);

	mov	r8d, 8
	lea	rdx, QWORD PTR v$[rsp]
	lea	rcx, QWORD PTR $T11[rsp]
	call	?call@?$compute_ceilShift@I$0A@Utvec1@glm@@$00@detail@glm@@SA?AU?$tvec1@I$0A@@3@AEBU43@I@Z ; glm::detail::compute_ceilShift<unsigned int,0,glm::tvec1,1>::call
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR v$[rsp], eax

; 63   : 			v = compute_ceilShift<T, P, vecType, sizeof(T) >= 4>::call(v, 16);

	mov	r8d, 16
	lea	rdx, QWORD PTR v$[rsp]
	lea	rcx, QWORD PTR $T12[rsp]
	call	?call@?$compute_ceilShift@I$0A@Utvec1@glm@@$00@detail@glm@@SA?AU?$tvec1@I$0A@@3@AEBU43@I@Z ; glm::detail::compute_ceilShift<unsigned int,0,glm::tvec1,1>::call
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR v$[rsp], eax

; 64   : 			v = compute_ceilShift<T, P, vecType, sizeof(T) >= 8>::call(v, 32);

	mov	r8d, 32					; 00000020H
	lea	rdx, QWORD PTR v$[rsp]
	lea	rcx, QWORD PTR $T13[rsp]
	call	?call@?$compute_ceilShift@I$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@I$0A@@3@AEBU43@I@Z ; glm::detail::compute_ceilShift<unsigned int,0,glm::tvec1,0>::call
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR v$[rsp], eax

; 65   : 			return v + static_cast<T>(1);

	mov	r8d, 1
	lea	rdx, QWORD PTR v$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$?HI$0A@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@I@Z ; glm::operator+<unsigned int,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 66   : 		}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?call@?$compute_ceilPowerOfTwo@I$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@I$0A@@3@AEBU43@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
?call@?$compute_ceilPowerOfTwo@I$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@I$0A@@3@AEBU43@@Z ENDP ; glm::detail::compute_ceilPowerOfTwo<unsigned int,0,glm::tvec1,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\s4002675\Downloads\glm-0.9.8.5\glm\glm\gtc\round.inl
;	COMDAT ?call@?$compute_ceilPowerOfTwo@H$0A@Utvec1@glm@@$00@detail@glm@@SA?AU?$tvec1@H$0A@@3@AEBU43@@Z
_TEXT	SEGMENT
Sign$ = 36
v$ = 68
$T5 = 84
$T6 = 88
$T7 = 92
$T8 = 96
$T9 = 100
$T10 = 104
$T11 = 108
$T12 = 112
$T13 = 116
$T14 = 120
$T15 = 124
__$ReturnUdt$ = 144
x$ = 152
?call@?$compute_ceilPowerOfTwo@H$0A@Utvec1@glm@@$00@detail@glm@@SA?AU?$tvec1@H$0A@@3@AEBU43@@Z PROC ; glm::detail::compute_ceilPowerOfTwo<int,0,glm::tvec1,1>::call, COMDAT

; 31   : 		{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 128				; 00000080H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 24
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+144]

; 32   : 			GLM_STATIC_ASSERT(!std::numeric_limits<T>::is_iec559, "'ceilPowerOfTwo' only accept integer scalar or vector inputs");
; 33   : 
; 34   : 			vecType<T, P> const Sign(sign(x));

	mov	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR Sign$[rsp]
	call	??$sign@H$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@H$0A@@0@AEBU10@@Z ; glm::sign<int,0,glm::tvec1>

; 35   : 
; 36   : 			vecType<T, P> v(abs(x));

	mov	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR v$[rsp]
	call	??$abs@H$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@H$0A@@0@AEBU10@@Z ; glm::abs<int,0,glm::tvec1>

; 37   : 
; 38   : 			v = v - static_cast<T>(1);

	mov	r8d, 1
	lea	rdx, QWORD PTR v$[rsp]
	lea	rcx, QWORD PTR $T5[rsp]
	call	??$?GH$0A@@glm@@YA?AU?$tvec1@H$0A@@0@AEBU10@H@Z ; glm::operator-<int,0>
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR v$[rsp], eax

; 39   : 			v = v | (v >> static_cast<T>(1));

	mov	r8d, 1
	lea	rdx, QWORD PTR v$[rsp]
	lea	rcx, QWORD PTR $T6[rsp]
	call	??$?5H$0A@@glm@@YA?AU?$tvec1@H$0A@@0@AEBU10@H@Z ; glm::operator>><int,0>
	mov	r8, rax
	lea	rdx, QWORD PTR v$[rsp]
	lea	rcx, QWORD PTR $T7[rsp]
	call	??$?UH$0A@@glm@@YA?AU?$tvec1@H$0A@@0@AEBU10@0@Z ; glm::operator|<int,0>
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR v$[rsp], eax

; 40   : 			v = v | (v >> static_cast<T>(2));

	mov	r8d, 2
	lea	rdx, QWORD PTR v$[rsp]
	lea	rcx, QWORD PTR $T8[rsp]
	call	??$?5H$0A@@glm@@YA?AU?$tvec1@H$0A@@0@AEBU10@H@Z ; glm::operator>><int,0>
	mov	r8, rax
	lea	rdx, QWORD PTR v$[rsp]
	lea	rcx, QWORD PTR $T9[rsp]
	call	??$?UH$0A@@glm@@YA?AU?$tvec1@H$0A@@0@AEBU10@0@Z ; glm::operator|<int,0>
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR v$[rsp], eax

; 41   : 			v = v | (v >> static_cast<T>(4));

	mov	r8d, 4
	lea	rdx, QWORD PTR v$[rsp]
	lea	rcx, QWORD PTR $T10[rsp]
	call	??$?5H$0A@@glm@@YA?AU?$tvec1@H$0A@@0@AEBU10@H@Z ; glm::operator>><int,0>
	mov	r8, rax
	lea	rdx, QWORD PTR v$[rsp]
	lea	rcx, QWORD PTR $T11[rsp]
	call	??$?UH$0A@@glm@@YA?AU?$tvec1@H$0A@@0@AEBU10@0@Z ; glm::operator|<int,0>
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR v$[rsp], eax

; 42   : 			v = compute_ceilShift<T, P, vecType, sizeof(T) >= 2>::call(v, 8);

	mov	r8d, 8
	lea	rdx, QWORD PTR v$[rsp]
	lea	rcx, QWORD PTR $T12[rsp]
	call	?call@?$compute_ceilShift@H$0A@Utvec1@glm@@$00@detail@glm@@SA?AU?$tvec1@H$0A@@3@AEBU43@H@Z ; glm::detail::compute_ceilShift<int,0,glm::tvec1,1>::call
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR v$[rsp], eax

; 43   : 			v = compute_ceilShift<T, P, vecType, sizeof(T) >= 4>::call(v, 16);

	mov	r8d, 16
	lea	rdx, QWORD PTR v$[rsp]
	lea	rcx, QWORD PTR $T13[rsp]
	call	?call@?$compute_ceilShift@H$0A@Utvec1@glm@@$00@detail@glm@@SA?AU?$tvec1@H$0A@@3@AEBU43@H@Z ; glm::detail::compute_ceilShift<int,0,glm::tvec1,1>::call
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR v$[rsp], eax

; 44   : 			v = compute_ceilShift<T, P, vecType, sizeof(T) >= 8>::call(v, 32);

	mov	r8d, 32					; 00000020H
	lea	rdx, QWORD PTR v$[rsp]
	lea	rcx, QWORD PTR $T14[rsp]
	call	?call@?$compute_ceilShift@H$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@H$0A@@3@AEBU43@H@Z ; glm::detail::compute_ceilShift<int,0,glm::tvec1,0>::call
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR v$[rsp], eax

; 45   : 			return (v + static_cast<T>(1)) * Sign;

	mov	r8d, 1
	lea	rdx, QWORD PTR v$[rsp]
	lea	rcx, QWORD PTR $T15[rsp]
	call	??$?HH$0A@@glm@@YA?AU?$tvec1@H$0A@@0@AEBU10@H@Z ; glm::operator+<int,0>
	lea	r8, QWORD PTR Sign$[rsp]
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$?DH$0A@@glm@@YA?AU?$tvec1@H$0A@@0@AEBU10@0@Z ; glm::operator*<int,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 46   : 		}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?call@?$compute_ceilPowerOfTwo@H$0A@Utvec1@glm@@$00@detail@glm@@SA?AU?$tvec1@H$0A@@3@AEBU43@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 128				; 00000080H
	pop	rdi
	ret	0
?call@?$compute_ceilPowerOfTwo@H$0A@Utvec1@glm@@$00@detail@glm@@SA?AU?$tvec1@H$0A@@3@AEBU43@@Z ENDP ; glm::detail::compute_ceilPowerOfTwo<int,0,glm::tvec1,1>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\s4002675\Downloads\glm-0.9.8.5\glm\glm\detail\func_common.inl
;	COMDAT ??$abs@I@glm@@YAII@Z
_TEXT	SEGMENT
x$ = 48
??$abs@I@glm@@YAII@Z PROC				; glm::abs<unsigned int>, COMDAT

; 310  : 	{

$LN3:
	mov	DWORD PTR [rsp+8], ecx
	push	rdi
	sub	rsp, 32					; 00000020H

; 311  : 		return detail::compute_abs<genFIType, std::numeric_limits<genFIType>::is_signed>::call(x);

	mov	ecx, DWORD PTR x$[rsp]
	call	?call@?$compute_abs@I$0A@@detail@glm@@SAII@Z ; glm::detail::compute_abs<unsigned int,0>::call

; 312  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$abs@I@glm@@YAII@Z ENDP				; glm::abs<unsigned int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\s4002675\Downloads\glm-0.9.8.5\glm\glm\detail\func_vector_relational.inl
;	COMDAT ??$equal@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@H$0A@@0@0@Z
_TEXT	SEGMENT
Result$ = 36
i$4 = 52
tv64 = 56
tv80 = 64
tv86 = 72
__$ReturnUdt$ = 96
x$ = 104
y$ = 112
??$equal@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@H$0A@@0@0@Z PROC ; glm::equal<int,0,glm::tvec4>, COMDAT

; 55   : 	{

$LN9:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+96]

; 56   : 		assert(x.length() == y.length());

	call	?length@?$tvec4@H$0A@@glm@@SAHXZ	; glm::tvec4<int,0>::length
	mov	DWORD PTR tv64[rsp], eax
	call	?length@?$tvec4@H$0A@@glm@@SAHXZ	; glm::tvec4<int,0>::length
	mov	ecx, DWORD PTR tv64[rsp]
	cmp	ecx, eax
	je	SHORT $LN6@equal
	mov	r8d, 56					; 00000038H
	lea	rdx, OFFSET FLAT:??_C@_1KE@MOONLNIK@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAs?$AA4?$AA0?$AA0?$AA2?$AA6@
	lea	rcx, OFFSET FLAT:??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN6@equal:

; 57   : 
; 58   : 		vecType<bool, P> Result(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??0?$tvec4@_N$0A@@glm@@QEAA@W4ctor@1@@Z	; glm::tvec4<bool,0>::tvec4<bool,0>

; 59   : 		for(length_t i = 0; i < x.length(); ++i)

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@equal
$LN2@equal:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN4@equal:
	call	?length@?$tvec4@H$0A@@glm@@SAHXZ	; glm::tvec4<int,0>::length
	cmp	DWORD PTR i$4[rsp], eax
	jge	SHORT $LN3@equal

; 60   : 			Result[i] = x[i] == y[i];

	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	??A?$tvec4@H$0A@@glm@@QEBAAEBHH@Z	; glm::tvec4<int,0>::operator[]
	mov	QWORD PTR tv80[rsp], rax
	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	call	??A?$tvec4@H$0A@@glm@@QEBAAEBHH@Z	; glm::tvec4<int,0>::operator[]
	mov	eax, DWORD PTR [rax]
	mov	rcx, QWORD PTR tv80[rsp]
	cmp	DWORD PTR [rcx], eax
	jne	SHORT $LN7@equal
	mov	DWORD PTR tv86[rsp], 1
	jmp	SHORT $LN8@equal
$LN7@equal:
	mov	DWORD PTR tv86[rsp], 0
$LN8@equal:
	mov	edx, DWORD PTR i$4[rsp]
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tvec4@_N$0A@@glm@@QEAAAEA_NH@Z	; glm::tvec4<bool,0>::operator[]
	movzx	ecx, BYTE PTR tv86[rsp]
	mov	BYTE PTR [rax], cl
	jmp	SHORT $LN2@equal
$LN3@equal:

; 61   : 		return Result;

	mov	rax, QWORD PTR __$ReturnUdt$[rsp]
	mov	ecx, DWORD PTR Result$[rsp]
	mov	DWORD PTR [rax], ecx
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 62   : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$equal@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@H$0A@@0@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??$equal@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@H$0A@@0@0@Z ENDP ; glm::equal<int,0,glm::tvec4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\s4002675\Downloads\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?IH$0A@@glm@@YA?AU?$tvec4@H$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
$T1 = 32
__$ReturnUdt$ = 80
v1$ = 88
v2$ = 96
??$?IH$0A@@glm@@YA?AU?$tvec4@H$0A@@0@AEBU10@0@Z PROC	; glm::operator&<int,0>, COMDAT

; 810  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 56					; 00000038H

; 811  : 		return tvec4<T, P>(v1) &= v2;

	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR v1$[rsp]
	mov	ecx, 16
	rep movsb
	mov	rdx, QWORD PTR v2$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?_4H@?$tvec4@H$0A@@glm@@QEAAAEAU01@AEBU01@@Z ; glm::tvec4<int,0>::operator&=<int>
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 812  : 	}

	add	rsp, 56					; 00000038H
	pop	rdi
	pop	rsi
	ret	0
??$?IH$0A@@glm@@YA?AU?$tvec4@H$0A@@0@AEBU10@0@Z ENDP	; glm::operator&<int,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\s4002675\Downloads\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?GH$0A@@glm@@YA?AU?$tvec4@H$0A@@0@AEBU10@H@Z
_TEXT	SEGMENT
$T1 = 32
__$ReturnUdt$ = 80
v$ = 88
scalar$ = 96
??$?GH$0A@@glm@@YA?AU?$tvec4@H$0A@@0@AEBU10@H@Z PROC	; glm::operator-<int,0>, COMDAT

; 664  : 	{

$LN3:
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 56					; 00000038H

; 665  : 		return tvec4<T, P>(v) -= scalar;

	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR v$[rsp]
	mov	ecx, 16
	rep movsb
	mov	edx, DWORD PTR scalar$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?ZH@?$tvec4@H$0A@@glm@@QEAAAEAU01@H@Z ; glm::tvec4<int,0>::operator-=<int>
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 666  : 	}

	add	rsp, 56					; 00000038H
	pop	rdi
	pop	rsi
	ret	0
??$?GH$0A@@glm@@YA?AU?$tvec4@H$0A@@0@AEBU10@H@Z ENDP	; glm::operator-<int,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\s4002675\Downloads\glm-0.9.8.5\glm\glm\detail\func_common.inl
;	COMDAT ??$abs@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@H$0A@@0@AEBU10@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
??$abs@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@H$0A@@0@AEBU10@@Z PROC ; glm::abs<int,0,glm::tvec4>, COMDAT

; 316  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 317  : 		return detail::compute_abs_vector<T, P, vecType, detail::is_aligned<P>::value>::call(x);

	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_abs_vector@H$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@H$0A@@3@AEBU43@@Z ; glm::detail::compute_abs_vector<int,0,glm::tvec4,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 318  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$abs@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@H$0A@@0@AEBU10@@Z ENDP ; glm::abs<int,0,glm::tvec4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\s4002675\Downloads\glm-0.9.8.5\glm\glm\detail\func_vector_relational.inl
;	COMDAT ??$equal@H$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@H$0A@@0@0@Z
_TEXT	SEGMENT
Result$ = 36
i$4 = 52
tv64 = 56
tv80 = 64
tv86 = 72
__$ReturnUdt$ = 112
x$ = 120
y$ = 128
??$equal@H$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@H$0A@@0@0@Z PROC ; glm::equal<int,0,glm::tvec3>, COMDAT

; 55   : 	{

$LN9:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 88					; 00000058H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 14
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+112]

; 56   : 		assert(x.length() == y.length());

	call	?length@?$tvec3@H$0A@@glm@@SAHXZ	; glm::tvec3<int,0>::length
	mov	DWORD PTR tv64[rsp], eax
	call	?length@?$tvec3@H$0A@@glm@@SAHXZ	; glm::tvec3<int,0>::length
	mov	ecx, DWORD PTR tv64[rsp]
	cmp	ecx, eax
	je	SHORT $LN6@equal
	mov	r8d, 56					; 00000038H
	lea	rdx, OFFSET FLAT:??_C@_1KE@MOONLNIK@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAs?$AA4?$AA0?$AA0?$AA2?$AA6@
	lea	rcx, OFFSET FLAT:??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN6@equal:

; 57   : 
; 58   : 		vecType<bool, P> Result(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??0?$tvec3@_N$0A@@glm@@QEAA@W4ctor@1@@Z	; glm::tvec3<bool,0>::tvec3<bool,0>

; 59   : 		for(length_t i = 0; i < x.length(); ++i)

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@equal
$LN2@equal:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN4@equal:
	call	?length@?$tvec3@H$0A@@glm@@SAHXZ	; glm::tvec3<int,0>::length
	cmp	DWORD PTR i$4[rsp], eax
	jge	SHORT $LN3@equal

; 60   : 			Result[i] = x[i] == y[i];

	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	??A?$tvec3@H$0A@@glm@@QEBAAEBHH@Z	; glm::tvec3<int,0>::operator[]
	mov	QWORD PTR tv80[rsp], rax
	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	call	??A?$tvec3@H$0A@@glm@@QEBAAEBHH@Z	; glm::tvec3<int,0>::operator[]
	mov	eax, DWORD PTR [rax]
	mov	rcx, QWORD PTR tv80[rsp]
	cmp	DWORD PTR [rcx], eax
	jne	SHORT $LN7@equal
	mov	DWORD PTR tv86[rsp], 1
	jmp	SHORT $LN8@equal
$LN7@equal:
	mov	DWORD PTR tv86[rsp], 0
$LN8@equal:
	mov	edx, DWORD PTR i$4[rsp]
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tvec3@_N$0A@@glm@@QEAAAEA_NH@Z	; glm::tvec3<bool,0>::operator[]
	movzx	ecx, BYTE PTR tv86[rsp]
	mov	BYTE PTR [rax], cl
	jmp	SHORT $LN2@equal
$LN3@equal:

; 61   : 		return Result;

	lea	rax, QWORD PTR Result$[rsp]
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 3
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 62   : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$equal@H$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@H$0A@@0@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 88					; 00000058H
	pop	rdi
	pop	rsi
	ret	0
??$equal@H$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@H$0A@@0@0@Z ENDP ; glm::equal<int,0,glm::tvec3>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\s4002675\Downloads\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?IH$0A@@glm@@YA?AU?$tvec3@H$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
v1$ = 56
v2$ = 64
??$?IH$0A@@glm@@YA?AU?$tvec3@H$0A@@0@AEBU10@0@Z PROC	; glm::operator&<int,0>, COMDAT

; 801  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 802  : 		return tvec3<T, P>(

	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	mov	ecx, DWORD PTR [rcx+8]
	mov	eax, DWORD PTR [rax+8]
	and	eax, ecx
	mov	rcx, QWORD PTR v1$[rsp]
	mov	rdx, QWORD PTR v2$[rsp]
	mov	edx, DWORD PTR [rdx+4]
	mov	ecx, DWORD PTR [rcx+4]
	and	ecx, edx
	mov	rdx, QWORD PTR v1$[rsp]
	mov	r8, QWORD PTR v2$[rsp]
	mov	r8d, DWORD PTR [r8]
	mov	edx, DWORD PTR [rdx]
	and	edx, r8d
	mov	r9d, eax
	mov	r8d, ecx
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec3@H$0A@@glm@@QEAA@HHH@Z	; glm::tvec3<int,0>::tvec3<int,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 803  : 			v1.x & v2.x,
; 804  : 			v1.y & v2.y,
; 805  : 			v1.z & v2.z);
; 806  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?IH$0A@@glm@@YA?AU?$tvec3@H$0A@@0@AEBU10@0@Z ENDP	; glm::operator&<int,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\s4002675\Downloads\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?GH$0A@@glm@@YA?AU?$tvec3@H$0A@@0@AEBU10@H@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
v$ = 56
scalar$ = 64
??$?GH$0A@@glm@@YA?AU?$tvec3@H$0A@@0@AEBU10@H@Z PROC	; glm::operator-<int,0>, COMDAT

; 583  : 	{

$LN3:
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 584  : 		return tvec3<T, P>(

	mov	rax, QWORD PTR v$[rsp]
	mov	ecx, DWORD PTR scalar$[rsp]
	mov	eax, DWORD PTR [rax+8]
	sub	eax, ecx
	mov	rcx, QWORD PTR v$[rsp]
	mov	edx, DWORD PTR scalar$[rsp]
	mov	ecx, DWORD PTR [rcx+4]
	sub	ecx, edx
	mov	rdx, QWORD PTR v$[rsp]
	mov	r8d, DWORD PTR scalar$[rsp]
	mov	edx, DWORD PTR [rdx]
	sub	edx, r8d
	mov	r9d, eax
	mov	r8d, ecx
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec3@H$0A@@glm@@QEAA@HHH@Z	; glm::tvec3<int,0>::tvec3<int,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 585  : 			v.x - scalar,
; 586  : 			v.y - scalar,
; 587  : 			v.z - scalar);
; 588  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?GH$0A@@glm@@YA?AU?$tvec3@H$0A@@0@AEBU10@H@Z ENDP	; glm::operator-<int,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\s4002675\Downloads\glm-0.9.8.5\glm\glm\detail\func_common.inl
;	COMDAT ??$abs@H$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@H$0A@@0@AEBU10@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
??$abs@H$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@H$0A@@0@AEBU10@@Z PROC ; glm::abs<int,0,glm::tvec3>, COMDAT

; 316  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 317  : 		return detail::compute_abs_vector<T, P, vecType, detail::is_aligned<P>::value>::call(x);

	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_abs_vector@H$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@H$0A@@3@AEBU43@@Z ; glm::detail::compute_abs_vector<int,0,glm::tvec3,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 318  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$abs@H$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@H$0A@@0@AEBU10@@Z ENDP ; glm::abs<int,0,glm::tvec3>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\s4002675\Downloads\glm-0.9.8.5\glm\glm\detail\func_vector_relational.inl
;	COMDAT ??$equal@H$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@H$0A@@0@0@Z
_TEXT	SEGMENT
Result$ = 36
i$4 = 52
tv64 = 56
tv80 = 64
tv86 = 72
__$ReturnUdt$ = 96
x$ = 104
y$ = 112
??$equal@H$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@H$0A@@0@0@Z PROC ; glm::equal<int,0,glm::tvec2>, COMDAT

; 55   : 	{

$LN9:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+96]

; 56   : 		assert(x.length() == y.length());

	call	?length@?$tvec2@H$0A@@glm@@SAHXZ	; glm::tvec2<int,0>::length
	mov	DWORD PTR tv64[rsp], eax
	call	?length@?$tvec2@H$0A@@glm@@SAHXZ	; glm::tvec2<int,0>::length
	mov	ecx, DWORD PTR tv64[rsp]
	cmp	ecx, eax
	je	SHORT $LN6@equal
	mov	r8d, 56					; 00000038H
	lea	rdx, OFFSET FLAT:??_C@_1KE@MOONLNIK@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAs?$AA4?$AA0?$AA0?$AA2?$AA6@
	lea	rcx, OFFSET FLAT:??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN6@equal:

; 57   : 
; 58   : 		vecType<bool, P> Result(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??0?$tvec2@_N$0A@@glm@@QEAA@W4ctor@1@@Z	; glm::tvec2<bool,0>::tvec2<bool,0>

; 59   : 		for(length_t i = 0; i < x.length(); ++i)

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@equal
$LN2@equal:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN4@equal:
	call	?length@?$tvec2@H$0A@@glm@@SAHXZ	; glm::tvec2<int,0>::length
	cmp	DWORD PTR i$4[rsp], eax
	jge	SHORT $LN3@equal

; 60   : 			Result[i] = x[i] == y[i];

	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	??A?$tvec2@H$0A@@glm@@QEBAAEBHH@Z	; glm::tvec2<int,0>::operator[]
	mov	QWORD PTR tv80[rsp], rax
	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	call	??A?$tvec2@H$0A@@glm@@QEBAAEBHH@Z	; glm::tvec2<int,0>::operator[]
	mov	eax, DWORD PTR [rax]
	mov	rcx, QWORD PTR tv80[rsp]
	cmp	DWORD PTR [rcx], eax
	jne	SHORT $LN7@equal
	mov	DWORD PTR tv86[rsp], 1
	jmp	SHORT $LN8@equal
$LN7@equal:
	mov	DWORD PTR tv86[rsp], 0
$LN8@equal:
	mov	edx, DWORD PTR i$4[rsp]
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tvec2@_N$0A@@glm@@QEAAAEA_NH@Z	; glm::tvec2<bool,0>::operator[]
	movzx	ecx, BYTE PTR tv86[rsp]
	mov	BYTE PTR [rax], cl
	jmp	SHORT $LN2@equal
$LN3@equal:

; 61   : 		return Result;

	mov	rax, QWORD PTR __$ReturnUdt$[rsp]
	movzx	ecx, WORD PTR Result$[rsp]
	mov	WORD PTR [rax], cx
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 62   : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$equal@H$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@H$0A@@0@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??$equal@H$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@H$0A@@0@0@Z ENDP ; glm::equal<int,0,glm::tvec2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\s4002675\Downloads\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?IH$0A@@glm@@YA?AU?$tvec2@H$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
v1$ = 56
v2$ = 64
??$?IH$0A@@glm@@YA?AU?$tvec2@H$0A@@0@AEBU10@0@Z PROC	; glm::operator&<int,0>, COMDAT

; 695  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 696  : 		return tvec2<T, P>(

	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	mov	ecx, DWORD PTR [rcx+4]
	mov	eax, DWORD PTR [rax+4]
	and	eax, ecx
	mov	rcx, QWORD PTR v1$[rsp]
	mov	rdx, QWORD PTR v2$[rsp]
	mov	edx, DWORD PTR [rdx]
	mov	ecx, DWORD PTR [rcx]
	and	ecx, edx
	mov	r8d, eax
	mov	edx, ecx
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec2@H$0A@@glm@@QEAA@HH@Z		; glm::tvec2<int,0>::tvec2<int,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 697  : 			v1.x & v2.x,
; 698  : 			v1.y & v2.y);
; 699  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?IH$0A@@glm@@YA?AU?$tvec2@H$0A@@0@AEBU10@0@Z ENDP	; glm::operator&<int,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\s4002675\Downloads\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?GH$0A@@glm@@YA?AU?$tvec2@H$0A@@0@AEBU10@H@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
v$ = 56
scalar$ = 64
??$?GH$0A@@glm@@YA?AU?$tvec2@H$0A@@0@AEBU10@H@Z PROC	; glm::operator-<int,0>, COMDAT

; 501  : 	{

$LN3:
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 502  : 		return tvec2<T, P>(

	mov	rax, QWORD PTR v$[rsp]
	mov	ecx, DWORD PTR scalar$[rsp]
	mov	eax, DWORD PTR [rax+4]
	sub	eax, ecx
	mov	rcx, QWORD PTR v$[rsp]
	mov	edx, DWORD PTR scalar$[rsp]
	mov	ecx, DWORD PTR [rcx]
	sub	ecx, edx
	mov	r8d, eax
	mov	edx, ecx
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec2@H$0A@@glm@@QEAA@HH@Z		; glm::tvec2<int,0>::tvec2<int,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 503  : 			v.x - scalar,
; 504  : 			v.y - scalar);
; 505  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?GH$0A@@glm@@YA?AU?$tvec2@H$0A@@0@AEBU10@H@Z ENDP	; glm::operator-<int,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\s4002675\Downloads\glm-0.9.8.5\glm\glm\detail\func_common.inl
;	COMDAT ??$abs@H$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@H$0A@@0@AEBU10@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
??$abs@H$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@H$0A@@0@AEBU10@@Z PROC ; glm::abs<int,0,glm::tvec2>, COMDAT

; 316  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 317  : 		return detail::compute_abs_vector<T, P, vecType, detail::is_aligned<P>::value>::call(x);

	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_abs_vector@H$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@H$0A@@3@AEBU43@@Z ; glm::detail::compute_abs_vector<int,0,glm::tvec2,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 318  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$abs@H$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@H$0A@@0@AEBU10@@Z ENDP ; glm::abs<int,0,glm::tvec2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\s4002675\Downloads\glm-0.9.8.5\glm\glm\detail\func_vector_relational.inl
;	COMDAT ??$equal@H$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@H$0A@@0@0@Z
_TEXT	SEGMENT
Result$ = 36
i$4 = 52
tv64 = 56
tv80 = 64
tv86 = 72
__$ReturnUdt$ = 96
x$ = 104
y$ = 112
??$equal@H$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@H$0A@@0@0@Z PROC ; glm::equal<int,0,glm::tvec1>, COMDAT

; 55   : 	{

$LN9:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+96]

; 56   : 		assert(x.length() == y.length());

	call	?length@?$tvec1@H$0A@@glm@@SAHXZ	; glm::tvec1<int,0>::length
	mov	DWORD PTR tv64[rsp], eax
	call	?length@?$tvec1@H$0A@@glm@@SAHXZ	; glm::tvec1<int,0>::length
	mov	ecx, DWORD PTR tv64[rsp]
	cmp	ecx, eax
	je	SHORT $LN6@equal
	mov	r8d, 56					; 00000038H
	lea	rdx, OFFSET FLAT:??_C@_1KE@MOONLNIK@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAs?$AA4?$AA0?$AA0?$AA2?$AA6@
	lea	rcx, OFFSET FLAT:??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN6@equal:

; 57   : 
; 58   : 		vecType<bool, P> Result(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??0?$tvec1@_N$0A@@glm@@QEAA@W4ctor@1@@Z	; glm::tvec1<bool,0>::tvec1<bool,0>

; 59   : 		for(length_t i = 0; i < x.length(); ++i)

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@equal
$LN2@equal:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN4@equal:
	call	?length@?$tvec1@H$0A@@glm@@SAHXZ	; glm::tvec1<int,0>::length
	cmp	DWORD PTR i$4[rsp], eax
	jge	SHORT $LN3@equal

; 60   : 			Result[i] = x[i] == y[i];

	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	??A?$tvec1@H$0A@@glm@@QEBAAEBHH@Z	; glm::tvec1<int,0>::operator[]
	mov	QWORD PTR tv80[rsp], rax
	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	call	??A?$tvec1@H$0A@@glm@@QEBAAEBHH@Z	; glm::tvec1<int,0>::operator[]
	mov	eax, DWORD PTR [rax]
	mov	rcx, QWORD PTR tv80[rsp]
	cmp	DWORD PTR [rcx], eax
	jne	SHORT $LN7@equal
	mov	DWORD PTR tv86[rsp], 1
	jmp	SHORT $LN8@equal
$LN7@equal:
	mov	DWORD PTR tv86[rsp], 0
$LN8@equal:
	mov	edx, DWORD PTR i$4[rsp]
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tvec1@_N$0A@@glm@@QEAAAEA_NH@Z	; glm::tvec1<bool,0>::operator[]
	movzx	ecx, BYTE PTR tv86[rsp]
	mov	BYTE PTR [rax], cl
	jmp	SHORT $LN2@equal
$LN3@equal:

; 61   : 		return Result;

	mov	rax, QWORD PTR __$ReturnUdt$[rsp]
	movzx	ecx, BYTE PTR Result$[rsp]
	mov	BYTE PTR [rax], cl
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 62   : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$equal@H$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@H$0A@@0@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??$equal@H$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@H$0A@@0@0@Z ENDP ; glm::equal<int,0,glm::tvec1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\s4002675\Downloads\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??$?IH$0A@@glm@@YA?AU?$tvec1@H$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
v1$ = 56
v2$ = 64
??$?IH$0A@@glm@@YA?AU?$tvec1@H$0A@@0@AEBU10@0@Z PROC	; glm::operator&<int,0>, COMDAT

; 437  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 438  : 		return tvec1<T, P>(

	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	mov	ecx, DWORD PTR [rcx]
	mov	eax, DWORD PTR [rax]
	and	eax, ecx
	mov	edx, eax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec1@H$0A@@glm@@QEAA@H@Z		; glm::tvec1<int,0>::tvec1<int,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 439  : 			v1.x & v2.x);
; 440  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?IH$0A@@glm@@YA?AU?$tvec1@H$0A@@0@AEBU10@0@Z ENDP	; glm::operator&<int,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\s4002675\Downloads\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??$?GH$0A@@glm@@YA?AU?$tvec1@H$0A@@0@AEBU10@H@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
v$ = 56
scalar$ = 64
??$?GH$0A@@glm@@YA?AU?$tvec1@H$0A@@0@AEBU10@H@Z PROC	; glm::operator-<int,0>, COMDAT

; 337  : 	{

$LN3:
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 338  : 		return tvec1<T, P>(

	mov	rax, QWORD PTR v$[rsp]
	mov	ecx, DWORD PTR scalar$[rsp]
	mov	eax, DWORD PTR [rax]
	sub	eax, ecx
	mov	edx, eax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec1@H$0A@@glm@@QEAA@H@Z		; glm::tvec1<int,0>::tvec1<int,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 339  : 			v.x - scalar);
; 340  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?GH$0A@@glm@@YA?AU?$tvec1@H$0A@@0@AEBU10@H@Z ENDP	; glm::operator-<int,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\s4002675\Downloads\glm-0.9.8.5\glm\glm\detail\func_common.inl
;	COMDAT ??$abs@H$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@H$0A@@0@AEBU10@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
??$abs@H$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@H$0A@@0@AEBU10@@Z PROC ; glm::abs<int,0,glm::tvec1>, COMDAT

; 316  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 317  : 		return detail::compute_abs_vector<T, P, vecType, detail::is_aligned<P>::value>::call(x);

	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_abs_vector@H$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@H$0A@@3@AEBU43@@Z ; glm::detail::compute_abs_vector<int,0,glm::tvec1,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 318  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$abs@H$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@H$0A@@0@AEBU10@@Z ENDP ; glm::abs<int,0,glm::tvec1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\s4002675\Downloads\glm-0.9.8.5\glm\glm\detail\func_common.inl
;	COMDAT ??$abs@G@glm@@YAGG@Z
_TEXT	SEGMENT
x$ = 48
??$abs@G@glm@@YAGG@Z PROC				; glm::abs<unsigned short>, COMDAT

; 310  : 	{

$LN3:
	mov	WORD PTR [rsp+8], cx
	push	rdi
	sub	rsp, 32					; 00000020H

; 311  : 		return detail::compute_abs<genFIType, std::numeric_limits<genFIType>::is_signed>::call(x);

	movzx	ecx, WORD PTR x$[rsp]
	call	?call@?$compute_abs@G$0A@@detail@glm@@SAGG@Z ; glm::detail::compute_abs<unsigned short,0>::call

; 312  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$abs@G@glm@@YAGG@Z ENDP				; glm::abs<unsigned short>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\s4002675\Downloads\glm-0.9.8.5\glm\glm\detail\func_common.inl
;	COMDAT ??$abs@F@glm@@YAFF@Z
_TEXT	SEGMENT
x$ = 48
??$abs@F@glm@@YAFF@Z PROC				; glm::abs<short>, COMDAT

; 310  : 	{

$LN3:
	mov	WORD PTR [rsp+8], cx
	push	rdi
	sub	rsp, 32					; 00000020H

; 311  : 		return detail::compute_abs<genFIType, std::numeric_limits<genFIType>::is_signed>::call(x);

	movzx	ecx, WORD PTR x$[rsp]
	call	?call@?$compute_abs@F$00@detail@glm@@SAFF@Z ; glm::detail::compute_abs<short,1>::call

; 312  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$abs@F@glm@@YAFF@Z ENDP				; glm::abs<short>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\s4002675\Downloads\glm-0.9.8.5\glm\glm\detail\func_common.inl
;	COMDAT ?call@?$compute_abs@N$00@detail@glm@@SANN@Z
_TEXT	SEGMENT
tv66 = 16
x$ = 48
?call@?$compute_abs@N$00@detail@glm@@SANN@Z PROC	; glm::detail::compute_abs<double,1>::call, COMDAT

; 77   : 		{

$LN5:
	movsd	QWORD PTR [rsp+8], xmm0
	push	rdi
	sub	rsp, 32					; 00000020H

; 78   : 			GLM_STATIC_ASSERT(
; 79   : 				std::numeric_limits<genFIType>::is_iec559 || std::numeric_limits<genFIType>::is_signed || GLM_UNRESTRICTED_GENTYPE,
; 80   : 				"'abs' only accept floating-point and integer scalar or vector inputs");
; 81   : 
; 82   : 			return x >= genFIType(0) ? x : -x;

	movsd	xmm0, QWORD PTR x$[rsp]
	comisd	xmm0, QWORD PTR __real@0000000000000000
	jb	SHORT $LN3@call
	movsd	xmm0, QWORD PTR x$[rsp]
	movsd	QWORD PTR tv66[rsp], xmm0
	jmp	SHORT $LN4@call
$LN3@call:
	movsd	xmm0, QWORD PTR x$[rsp]
	xorps	xmm0, QWORD PTR __xmm@80000000000000008000000000000000
	movsd	QWORD PTR tv66[rsp], xmm0
$LN4@call:
	movsd	xmm0, QWORD PTR tv66[rsp]

; 83   : 			// TODO, perf comp with: *(((int *) &x) + 1) &= 0x7fffffff;
; 84   : 		}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?call@?$compute_abs@N$00@detail@glm@@SANN@Z ENDP	; glm::detail::compute_abs<double,1>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xmemory
;	COMDAT ??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z
_TEXT	SEGMENT
_Ptr$ = 48
_Bytes$ = 56
??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z PROC		; std::_Deallocate<16,0>, COMDAT

; 251  : _CONSTEXPR20_DYNALLOC void _Deallocate(void* _Ptr, size_t _Bytes) noexcept {

$LN4:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 252  :     // deallocate storage allocated by _Allocate when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 253  : #ifdef __cpp_lib_constexpr_dynamic_alloc // TRANSITION, GH-1532
; 254  :     if (_STD is_constant_evaluated()) {
; 255  :         ::operator delete(_Ptr);
; 256  :     } else
; 257  : #endif // __cpp_lib_constexpr_dynamic_alloc
; 258  :     {
; 259  : #if defined(_M_IX86) || defined(_M_X64)
; 260  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

	cmp	QWORD PTR _Bytes$[rsp], 4096		; 00001000H
	jb	SHORT $LN2@Deallocate

; 261  :             _Adjust_manually_vector_aligned(_Ptr, _Bytes);

	lea	rdx, QWORD PTR _Bytes$[rsp]
	lea	rcx, QWORD PTR _Ptr$[rsp]
	call	?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z ; std::_Adjust_manually_vector_aligned
$LN2@Deallocate:

; 262  :         }
; 263  : #endif // defined(_M_IX86) || defined(_M_X64)
; 264  :         ::operator delete(_Ptr, _Bytes);

	mov	rdx, QWORD PTR _Bytes$[rsp]
	mov	rcx, QWORD PTR _Ptr$[rsp]
	call	??3@YAXPEAX_K@Z				; operator delete
	npad	1

; 265  :     }
; 266  : }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z ENDP		; std::_Deallocate<16,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@I@std@@@std@@YAXPEAIQEAIAEAV?$allocator@I@0@@Z
_TEXT	SEGMENT
_First$ = 16
_Last$ = 24
_Al$ = 32
??$_Destroy_range@V?$allocator@I@std@@@std@@YAXPEAIQEAIAEAV?$allocator@I@0@@Z PROC ; std::_Destroy_range<std::allocator<unsigned int> >, COMDAT

; 945  :     _Alloc_ptr_t<_Alloc> _First, const _Alloc_ptr_t<_Alloc> _Last, _Alloc& _Al) noexcept {

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 946  :     // note that this is an optimization for debug mode codegen; in release mode the BE removes all of this
; 947  :     using _Ty = typename _Alloc::value_type;
; 948  :     if constexpr (!conjunction_v<is_trivially_destructible<_Ty>, _Uses_default_destroy<_Alloc, _Ty*>>) {
; 949  :         for (; _First != _Last; ++_First) {
; 950  :             allocator_traits<_Alloc>::destroy(_Al, _Unfancy(_First));
; 951  :         }
; 952  :     }
; 953  : }

	pop	rdi
	ret	0
??$_Destroy_range@V?$allocator@I@std@@@std@@YAXPEAIQEAIAEAV?$allocator@I@0@@Z ENDP ; std::_Destroy_range<std::allocator<unsigned int> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xmemory
;	COMDAT ??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QEAAX$$QEAV?$allocator@U_Container_proxy@std@@@1@@Z
_TEXT	SEGMENT
_New_proxy$ = 32
$T1 = 40
this$ = 64
_Al$ = 72
??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QEAAX$$QEAV?$allocator@U_Container_proxy@std@@@1@@Z PROC ; std::_Container_base12::_Alloc_proxy<std::allocator<std::_Container_proxy> >, COMDAT

; 1073 :     _CONSTEXPR20_CONTAINER void _Alloc_proxy(_Alloc&& _Al) {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 1074 :         _Container_proxy* const _New_proxy = _Unfancy(_Al.allocate(1));

	mov	edx, 1
	mov	rcx, QWORD PTR _Al$[rsp]
	call	?allocate@?$allocator@U_Container_proxy@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z ; std::allocator<std::_Container_proxy>::allocate
	mov	rcx, rax
	call	??$_Unfancy@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@PEAU10@@Z ; std::_Unfancy<std::_Container_proxy>
	mov	QWORD PTR _New_proxy$[rsp], rax

; 1075 :         _Construct_in_place(*_New_proxy, this);

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR $T1[rsp], rax
	lea	rdx, QWORD PTR $T1[rsp]
	mov	rcx, QWORD PTR _New_proxy$[rsp]
	call	??$_Construct_in_place@U_Container_proxy@std@@PEAU_Container_base12@2@@std@@YAXAEAU_Container_proxy@0@$$QEAPEAU_Container_base12@0@@Z ; std::_Construct_in_place<std::_Container_proxy,std::_Container_base12 *>

; 1076 :         _Myproxy            = _New_proxy;

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR _New_proxy$[rsp]
	mov	QWORD PTR [rax], rcx

; 1077 :         _New_proxy->_Mycont = this;

	mov	rax, QWORD PTR _New_proxy$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	mov	QWORD PTR [rax], rcx

; 1078 :     }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QEAAX$$QEAV?$allocator@U_Container_proxy@std@@@1@@Z ENDP ; std::_Container_base12::_Alloc_proxy<std::allocator<std::_Container_proxy> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xmemory
;	COMDAT ??$?0$$V@?$_Compressed_pair@V?$allocator@I@std@@V?$_Vector_val@U?$_Simple_types@I@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z
_TEXT	SEGMENT
this$ = 48
__formal$ = 56
??$?0$$V@?$_Compressed_pair@V?$allocator@I@std@@V?$_Vector_val@U?$_Simple_types@I@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z PROC ; std::_Compressed_pair<std::allocator<unsigned int>,std::_Vector_val<std::_Simple_types<unsigned int> >,1>::_Compressed_pair<std::allocator<unsigned int>,std::_Vector_val<std::_Simple_types<unsigned int> >,1><>, COMDAT

; 1370 :         : _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...) {}

$LN3:
	mov	BYTE PTR [rsp+16], dl
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rcx, QWORD PTR this$[rsp]
	call	??0?$allocator@I@std@@QEAA@XZ		; std::allocator<unsigned int>::allocator<unsigned int>
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, rax
	call	??0?$_Vector_val@U?$_Simple_types@I@std@@@std@@QEAA@XZ ; std::_Vector_val<std::_Simple_types<unsigned int> >::_Vector_val<std::_Simple_types<unsigned int> >
	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?0$$V@?$_Compressed_pair@V?$allocator@I@std@@V?$_Vector_val@U?$_Simple_types@I@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z ENDP ; std::_Compressed_pair<std::allocator<unsigned int>,std::_Vector_val<std::_Simple_types<unsigned int> >,1>::_Compressed_pair<std::allocator<unsigned int>,std::_Vector_val<std::_Simple_types<unsigned int> >,1><>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xmemory
;	COMDAT ??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z
_TEXT	SEGMENT
_Al$ = 48
_Ptr$ = 56
??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z PROC ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >, COMDAT

; 998  : _CONSTEXPR20_DYNALLOC void _Delete_plain_internal(_Alloc& _Al, typename _Alloc::value_type* const _Ptr) noexcept {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 999  :     // destroy *_Ptr in place, then deallocate _Ptr using _Al; used for internal container types the user didn't name
; 1000 :     using _Ty = typename _Alloc::value_type;
; 1001 :     _Ptr->~_Ty();
; 1002 :     _Deallocate_plain(_Al, _Ptr);

	mov	rdx, QWORD PTR _Ptr$[rsp]
	mov	rcx, QWORD PTR _Al$[rsp]
	call	??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z ; std::_Deallocate_plain<std::allocator<std::_Container_proxy> >

; 1003 : }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z ENDP ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\utility
;	COMDAT ??$exchange@PEAU_Container_proxy@std@@$$T@std@@YAPEAU_Container_proxy@0@AEAPEAU10@$$QEA$$T@Z
_TEXT	SEGMENT
_Old_val$ = 0
_Val$ = 32
_New_val$ = 40
??$exchange@PEAU_Container_proxy@std@@$$T@std@@YAPEAU_Container_proxy@0@AEAPEAU10@$$QEA$$T@Z PROC ; std::exchange<std::_Container_proxy *,std::nullptr_t>, COMDAT

; 614  :     conjunction_v<is_nothrow_move_constructible<_Ty>, is_nothrow_assignable<_Ty&, _Other>>) /* strengthened */ {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 16

; 615  :     // assign _New_val to _Val, return previous _Val
; 616  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

	mov	rax, QWORD PTR _Val$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR _Old_val$[rsp], rax

; 617  :     _Val         = static_cast<_Other&&>(_New_val);

	mov	rax, QWORD PTR _Val$[rsp]
	mov	rcx, QWORD PTR _New_val$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	QWORD PTR [rax], rcx

; 618  :     return _Old_val;

	mov	rax, QWORD PTR _Old_val$[rsp]

; 619  : }

	add	rsp, 16
	pop	rdi
	ret	0
??$exchange@PEAU_Container_proxy@std@@$$T@std@@YAPEAU_Container_proxy@0@AEAPEAU10@$$QEA$$T@Z ENDP ; std::exchange<std::_Container_proxy *,std::nullptr_t>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xmemory
;	COMDAT ??$?0I@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@I@1@@Z
_TEXT	SEGMENT
this$ = 16
__formal$ = 24
??$?0I@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@I@1@@Z PROC ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><unsigned int>, COMDAT

; 829  :     constexpr allocator(const allocator<_Other>&) noexcept {}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0I@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@I@1@@Z ENDP ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><unsigned int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xmemory
;	COMDAT ?allocate@?$allocator@U_Container_proxy@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z
_TEXT	SEGMENT
this$ = 48
_Count$ = 56
?allocate@?$allocator@U_Container_proxy@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z PROC ; std::allocator<std::_Container_proxy>::allocate, COMDAT

; 838  :     _NODISCARD _CONSTEXPR20_DYNALLOC __declspec(allocator) _Ty* allocate(_CRT_GUARDOVERFLOW const size_t _Count) {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 839  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

	mov	rcx, QWORD PTR _Count$[rsp]
	call	??$_Get_size_of_n@$0BA@@std@@YA_K_K@Z	; std::_Get_size_of_n<16>
	mov	rcx, rax
	call	??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z ; std::_Allocate<16,std::_Default_allocate_traits,0>

; 840  :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?allocate@?$allocator@U_Container_proxy@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z ENDP ; std::allocator<std::_Container_proxy>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\vector
;	COMDAT ??$_Resize@U_Value_init_tag@std@@@?$vector@IV?$allocator@I@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z
_TEXT	SEGMENT
_My_data$ = 32
_Myfirst$ = 40
_Mylast$ = 48
_Oldsize$ = 56
_Newlast$1 = 64
_Oldcapacity$2 = 72
_Oldlast$3 = 80
this$ = 112
_Newsize$ = 120
_Val$ = 128
??$_Resize@U_Value_init_tag@std@@@?$vector@IV?$allocator@I@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z PROC ; std::vector<unsigned int,std::allocator<unsigned int> >::_Resize<std::_Value_init_tag>, COMDAT

; 1258 :     _CONSTEXPR20_CONTAINER void _Resize(const size_type _Newsize, const _Ty2& _Val) {

$LN6:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 96					; 00000060H

; 1259 :         // trim or append elements, provide strong guarantee
; 1260 :         auto& _My_data      = _Mypair._Myval2;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR _My_data$[rsp], rax

; 1261 :         pointer& _Myfirst   = _My_data._Myfirst;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 8
	mov	QWORD PTR _Myfirst$[rsp], rax

; 1262 :         pointer& _Mylast    = _My_data._Mylast;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 16
	mov	QWORD PTR _Mylast$[rsp], rax

; 1263 :         const auto _Oldsize = static_cast<size_type>(_Mylast - _Myfirst);

	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rcx, QWORD PTR _Myfirst$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	rax, QWORD PTR [rax]
	sub	rax, rcx
	sar	rax, 2
	mov	QWORD PTR _Oldsize$[rsp], rax

; 1264 :         if (_Newsize < _Oldsize) { // trim

	mov	rax, QWORD PTR _Oldsize$[rsp]
	cmp	QWORD PTR _Newsize$[rsp], rax
	jae	SHORT $LN2@Resize

; 1265 :             const pointer _Newlast = _Myfirst + _Newsize;

	mov	rax, QWORD PTR _Myfirst$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR _Newsize$[rsp]
	lea	rax, QWORD PTR [rax+rcx*4]
	mov	QWORD PTR _Newlast$1[rsp], rax

; 1266 :             _Orphan_range(_Newlast, _Mylast);

	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	r8, QWORD PTR [rax]
	mov	rdx, QWORD PTR _Newlast$1[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?_Orphan_range@?$vector@IV?$allocator@I@std@@@std@@AEBAXPEAI0@Z ; std::vector<unsigned int,std::allocator<unsigned int> >::_Orphan_range

; 1267 :             _Destroy(_Newlast, _Mylast);

	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	r8, QWORD PTR [rax]
	mov	rdx, QWORD PTR _Newlast$1[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?_Destroy@?$vector@IV?$allocator@I@std@@@std@@AEAAXPEAI0@Z ; std::vector<unsigned int,std::allocator<unsigned int> >::_Destroy

; 1268 :             _Mylast = _Newlast;

	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rcx, QWORD PTR _Newlast$1[rsp]
	mov	QWORD PTR [rax], rcx

; 1269 :             return;

	jmp	$LN1@Resize
$LN2@Resize:

; 1270 :         }
; 1271 : 
; 1272 :         if (_Newsize > _Oldsize) { // append

	mov	rax, QWORD PTR _Oldsize$[rsp]
	cmp	QWORD PTR _Newsize$[rsp], rax
	jbe	$LN3@Resize

; 1273 :             const auto _Oldcapacity = static_cast<size_type>(_My_data._Myend - _Myfirst);

	mov	rax, QWORD PTR _My_data$[rsp]
	mov	rcx, QWORD PTR _Myfirst$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	rax, QWORD PTR [rax+24]
	sub	rax, rcx
	sar	rax, 2
	mov	QWORD PTR _Oldcapacity$2[rsp], rax

; 1274 :             if (_Newsize > _Oldcapacity) { // reallocate

	mov	rax, QWORD PTR _Oldcapacity$2[rsp]
	cmp	QWORD PTR _Newsize$[rsp], rax
	jbe	SHORT $LN4@Resize

; 1275 :                 _Resize_reallocate(_Newsize, _Val);

	mov	r8, QWORD PTR _Val$[rsp]
	mov	rdx, QWORD PTR _Newsize$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@IV?$allocator@I@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z ; std::vector<unsigned int,std::allocator<unsigned int> >::_Resize_reallocate<std::_Value_init_tag>

; 1276 :                 return;

	jmp	SHORT $LN1@Resize
$LN4@Resize:

; 1277 :             }
; 1278 : 
; 1279 :             const pointer _Oldlast = _Mylast;

	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR _Oldlast$3[rsp], rax

; 1280 :             _Mylast                = _Ufill(_Oldlast, _Newsize - _Oldsize, _Val);

	mov	rax, QWORD PTR _Oldsize$[rsp]
	mov	rcx, QWORD PTR _Newsize$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR _Val$[rsp]
	movzx	r9d, BYTE PTR [rcx]
	mov	r8, rax
	mov	rdx, QWORD PTR _Oldlast$3[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?_Ufill@?$vector@IV?$allocator@I@std@@@std@@AEAAPEAIPEAI_KU_Value_init_tag@2@@Z ; std::vector<unsigned int,std::allocator<unsigned int> >::_Ufill
	mov	rcx, QWORD PTR _Mylast$[rsp]
	mov	QWORD PTR [rcx], rax

; 1281 :             _Orphan_range(_Oldlast, _Oldlast);

	mov	r8, QWORD PTR _Oldlast$3[rsp]
	mov	rdx, QWORD PTR _Oldlast$3[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?_Orphan_range@?$vector@IV?$allocator@I@std@@@std@@AEBAXPEAI0@Z ; std::vector<unsigned int,std::allocator<unsigned int> >::_Orphan_range
$LN3@Resize:
$LN1@Resize:

; 1282 :         }
; 1283 : 
; 1284 :         // if _Newsize == _Oldsize, do nothing; avoid invalidating iterators
; 1285 :     }

	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
??$_Resize@U_Value_init_tag@std@@@?$vector@IV?$allocator@I@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z ENDP ; std::vector<unsigned int,std::allocator<unsigned int> >::_Resize<std::_Value_init_tag>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\s4002675\Downloads\glm-0.9.8.5\glm\test\gtc\gtc_round.cpp
_TEXT	SEGMENT
Error$ = 32
main	PROC

; 441  : {

$LN3:
	push	rdi
	sub	rsp, 48					; 00000030H

; 442  : 	int Error(0);

	mov	DWORD PTR Error$[rsp], 0

; 443  : 
; 444  : 	Error += isPowerOfTwo::test();

	call	?test@isPowerOfTwo@@YAHXZ		; isPowerOfTwo::test
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 445  : 	Error += floorPowerOfTwo::test();

	call	?test@floorPowerOfTwo@@YAHXZ		; floorPowerOfTwo::test
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 446  : 	Error += roundPowerOfTwo::test();

	call	?test@roundPowerOfTwo@@YAHXZ		; roundPowerOfTwo::test
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 447  : 	Error += ceilPowerOfTwo::test();

	call	?test@ceilPowerOfTwo@@YAHXZ		; ceilPowerOfTwo::test
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 448  : 	Error += ceilPowerOfTwo_advanced::test();

	call	?test@ceilPowerOfTwo_advanced@@YAHXZ	; ceilPowerOfTwo_advanced::test
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 449  : 	
; 450  : #	ifdef NDEBUG
; 451  : 		Error += ceilPowerOfTwo_advanced::perf();
; 452  : #	endif//NDEBUG
; 453  : 
; 454  : 	Error += floorMultiple::test();

	call	?test@floorMultiple@@YAHXZ		; floorMultiple::test
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 455  : 	Error += ceilMultiple::test();

	call	?test@ceilMultiple@@YAHXZ		; ceilMultiple::test
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 456  : 
; 457  : 	return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 458  : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
main	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\s4002675\Downloads\glm-0.9.8.5\glm\test\gtc\gtc_round.cpp
_TEXT	SEGMENT
Error$ = 32
?test@ceilMultiple@@YAHXZ PROC				; ceilMultiple::test

; 430  : 	{

$LN3:
	push	rdi
	sub	rsp, 48					; 00000030H

; 431  : 		int Error(0);

	mov	DWORD PTR Error$[rsp], 0

; 432  : 
; 433  : 		Error += test_int();

	call	?test_int@ceilMultiple@@YAHXZ		; ceilMultiple::test_int
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 434  : 		Error += test_float();

	call	?test_float@ceilMultiple@@YAHXZ		; ceilMultiple::test_float
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 435  : 
; 436  : 		return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 437  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?test@ceilMultiple@@YAHXZ ENDP				; ceilMultiple::test
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\s4002675\Downloads\glm-0.9.8.5\glm\glm\gtc\round.inl
;	COMDAT ??$ceilMultiple@H@glm@@YAHHH@Z
_TEXT	SEGMENT
Source$ = 48
Multiple$ = 56
??$ceilMultiple@H@glm@@YAHHH@Z PROC			; glm::ceilMultiple<int>, COMDAT

; 305  : 	{

$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	push	rdi
	sub	rsp, 32					; 00000020H

; 306  : 		return detail::compute_ceilMultiple<std::numeric_limits<genType>::is_iec559, std::numeric_limits<genType>::is_signed>::call(Source, Multiple);

	mov	edx, DWORD PTR Multiple$[rsp]
	mov	ecx, DWORD PTR Source$[rsp]
	call	??$call@H@?$compute_ceilMultiple@$0A@$00@detail@glm@@SAHHH@Z ; glm::detail::compute_ceilMultiple<0,1>::call<int>

; 307  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$ceilMultiple@H@glm@@YAHHH@Z ENDP			; glm::ceilMultiple<int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\s4002675\Downloads\glm-0.9.8.5\glm\test\gtc\gtc_round.cpp
_TEXT	SEGMENT
Data$ = 48
Error$ = 196
i$4 = 200
n$5 = 208
Result$6 = 216
tv79 = 232
__$ArrayPad$ = 240
?test_int@ceilMultiple@@YAHXZ PROC			; ceilMultiple::test_int

; 404  : 	{

$LN8:
	push	rdi
	sub	rsp, 256				; 00000100H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 56					; 00000038H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 405  : 		type<int> const Data[] = 
; 406  : 		{
; 407  : 			{3, 4, 4, 0},

	mov	DWORD PTR Data$[rsp], 3
	mov	DWORD PTR Data$[rsp+4], 4
	mov	DWORD PTR Data$[rsp+8], 4
	mov	DWORD PTR Data$[rsp+12], 0

; 408  : 			{7, 4, 8, 0},

	mov	DWORD PTR Data$[rsp+16], 7
	mov	DWORD PTR Data$[rsp+20], 4
	mov	DWORD PTR Data$[rsp+24], 8
	mov	DWORD PTR Data$[rsp+28], 0

; 409  : 			{5, 4, 8, 0},

	mov	DWORD PTR Data$[rsp+32], 5
	mov	DWORD PTR Data$[rsp+36], 4
	mov	DWORD PTR Data$[rsp+40], 8
	mov	DWORD PTR Data$[rsp+44], 0

; 410  : 			{1, 4, 4, 0},

	mov	DWORD PTR Data$[rsp+48], 1
	mov	DWORD PTR Data$[rsp+52], 4
	mov	DWORD PTR Data$[rsp+56], 4
	mov	DWORD PTR Data$[rsp+60], 0

; 411  : 			{1, 3, 3, 0},

	mov	DWORD PTR Data$[rsp+64], 1
	mov	DWORD PTR Data$[rsp+68], 3
	mov	DWORD PTR Data$[rsp+72], 3
	mov	DWORD PTR Data$[rsp+76], 0

; 412  : 			{4, 3, 6, 0},

	mov	DWORD PTR Data$[rsp+80], 4
	mov	DWORD PTR Data$[rsp+84], 3
	mov	DWORD PTR Data$[rsp+88], 6
	mov	DWORD PTR Data$[rsp+92], 0

; 413  : 			{4, 1, 4, 0},

	mov	DWORD PTR Data$[rsp+96], 4
	mov	DWORD PTR Data$[rsp+100], 1
	mov	DWORD PTR Data$[rsp+104], 4
	mov	DWORD PTR Data$[rsp+108], 0

; 414  : 			{1, 1, 1, 0},

	mov	DWORD PTR Data$[rsp+112], 1
	mov	DWORD PTR Data$[rsp+116], 1
	mov	DWORD PTR Data$[rsp+120], 1
	mov	DWORD PTR Data$[rsp+124], 0

; 415  : 			{7, 1, 7, 0},

	mov	DWORD PTR Data$[rsp+128], 7
	mov	DWORD PTR Data$[rsp+132], 1
	mov	DWORD PTR Data$[rsp+136], 7
	mov	DWORD PTR Data$[rsp+140], 0

; 416  : 		};
; 417  : 
; 418  : 		int Error(0);

	mov	DWORD PTR Error$[rsp], 0

; 419  : 
; 420  : 		for(std::size_t i = 0, n = sizeof(Data) / sizeof(type<int>); i < n; ++i)

	mov	QWORD PTR i$4[rsp], 0
	mov	QWORD PTR n$5[rsp], 9
	jmp	SHORT $LN4@test_int
$LN2@test_int:
	mov	rax, QWORD PTR i$4[rsp]
	inc	rax
	mov	QWORD PTR i$4[rsp], rax
$LN4@test_int:
	mov	rax, QWORD PTR n$5[rsp]
	cmp	QWORD PTR i$4[rsp], rax
	jae	SHORT $LN3@test_int

; 421  : 		{
; 422  : 			int Result = glm::ceilMultiple(Data[i].Source, Data[i].Multiple);

	imul	rax, QWORD PTR i$4[rsp], 16
	imul	rcx, QWORD PTR i$4[rsp], 16
	mov	edx, DWORD PTR Data$[rsp+rax+4]
	mov	ecx, DWORD PTR Data$[rsp+rcx]
	call	??$ceilMultiple@H@glm@@YAHHH@Z		; glm::ceilMultiple<int>
	mov	DWORD PTR Result$6[rsp], eax

; 423  : 			Error += Data[i].Return == Result ? 0 : 1;

	imul	rax, QWORD PTR i$4[rsp], 16
	mov	ecx, DWORD PTR Result$6[rsp]
	cmp	DWORD PTR Data$[rsp+rax+8], ecx
	jne	SHORT $LN6@test_int
	mov	DWORD PTR tv79[rsp], 0
	jmp	SHORT $LN7@test_int
$LN6@test_int:
	mov	DWORD PTR tv79[rsp], 1
$LN7@test_int:
	mov	eax, DWORD PTR tv79[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 424  : 		}

	jmp	$LN2@test_int
$LN3@test_int:

; 425  : 
; 426  : 		return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 427  : 	}

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?test_int@ceilMultiple@@YAHXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 256				; 00000100H
	pop	rdi
	ret	0
?test_int@ceilMultiple@@YAHXZ ENDP			; ceilMultiple::test_int
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\s4002675\Downloads\glm-0.9.8.5\glm\glm\gtc\round.inl
;	COMDAT ??$ceilMultiple@N@glm@@YANNN@Z
_TEXT	SEGMENT
Source$ = 64
Multiple$ = 72
??$ceilMultiple@N@glm@@YANNN@Z PROC			; glm::ceilMultiple<double>, COMDAT

; 305  : 	{

$LN3:
	movsd	QWORD PTR [rsp+16], xmm1
	movsd	QWORD PTR [rsp+8], xmm0
	push	rdi
	sub	rsp, 48					; 00000030H

; 306  : 		return detail::compute_ceilMultiple<std::numeric_limits<genType>::is_iec559, std::numeric_limits<genType>::is_signed>::call(Source, Multiple);

	movsd	xmm1, QWORD PTR Multiple$[rsp]
	movsd	xmm0, QWORD PTR Source$[rsp]
	call	??$call@N@?$compute_ceilMultiple@$00$00@detail@glm@@SANNN@Z ; glm::detail::compute_ceilMultiple<1,1>::call<double>

; 307  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$ceilMultiple@N@glm@@YANNN@Z ENDP			; glm::ceilMultiple<double>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\s4002675\Downloads\glm-0.9.8.5\glm\test\gtc\gtc_round.cpp
_TEXT	SEGMENT
Data$ = 48
Error$ = 116
i$5 = 120
n$6 = 128
Result$7 = 152
tv87 = 176
__$ArrayPad$ = 184
?test_float@ceilMultiple@@YAHXZ PROC			; ceilMultiple::test_float

; 385  : 	{

$LN8:
	push	rdi
	sub	rsp, 192				; 000000c0H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 40					; 00000028H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 386  : 		type<glm::float64> const Data[] = 
; 387  : 		{
; 388  : 			{3.4, 0.3, 3.6, 0.0001},

	movsd	xmm0, QWORD PTR __real@400b333333333333
	movsd	QWORD PTR Data$[rsp], xmm0
	movsd	xmm0, QWORD PTR __real@3fd3333333333333
	movsd	QWORD PTR Data$[rsp+8], xmm0
	movsd	xmm0, QWORD PTR __real@400ccccccccccccd
	movsd	QWORD PTR Data$[rsp+16], xmm0
	movsd	xmm0, QWORD PTR __real@3f1a36e2eb1c432d
	movsd	QWORD PTR Data$[rsp+24], xmm0

; 389  : 			{-1.4, 0.3, -1.2, 0.0001},

	movsd	xmm0, QWORD PTR __real@bff6666666666666
	movsd	QWORD PTR Data$[rsp+32], xmm0
	movsd	xmm0, QWORD PTR __real@3fd3333333333333
	movsd	QWORD PTR Data$[rsp+40], xmm0
	movsd	xmm0, QWORD PTR __real@bff3333333333333
	movsd	QWORD PTR Data$[rsp+48], xmm0
	movsd	xmm0, QWORD PTR __real@3f1a36e2eb1c432d
	movsd	QWORD PTR Data$[rsp+56], xmm0

; 390  : 		};
; 391  : 
; 392  : 		int Error(0);

	mov	DWORD PTR Error$[rsp], 0

; 393  : 
; 394  : 		for(std::size_t i = 0, n = sizeof(Data) / sizeof(type<glm::float64>); i < n; ++i)

	mov	QWORD PTR i$5[rsp], 0
	mov	QWORD PTR n$6[rsp], 2
	jmp	SHORT $LN4@test_float
$LN2@test_float:
	mov	rax, QWORD PTR i$5[rsp]
	inc	rax
	mov	QWORD PTR i$5[rsp], rax
$LN4@test_float:
	mov	rax, QWORD PTR n$6[rsp]
	cmp	QWORD PTR i$5[rsp], rax
	jae	$LN3@test_float

; 395  : 		{
; 396  : 			glm::float64 Result = glm::ceilMultiple(Data[i].Source, Data[i].Multiple);

	imul	rax, QWORD PTR i$5[rsp], 32		; 00000020H
	imul	rcx, QWORD PTR i$5[rsp], 32		; 00000020H
	movsd	xmm1, QWORD PTR Data$[rsp+rax+8]
	movsd	xmm0, QWORD PTR Data$[rsp+rcx]
	call	??$ceilMultiple@N@glm@@YANNN@Z		; glm::ceilMultiple<double>
	movsd	QWORD PTR Result$7[rsp], xmm0

; 397  : 			Error += glm::epsilonEqual(Data[i].Return, Result, Data[i].Epsilon) ? 0 : 1;

	imul	rax, QWORD PTR i$5[rsp], 32		; 00000020H
	lea	rax, QWORD PTR Data$[rsp+rax+24]
	imul	rcx, QWORD PTR i$5[rsp], 32		; 00000020H
	lea	rcx, QWORD PTR Data$[rsp+rcx+16]
	mov	r8, rax
	lea	rdx, QWORD PTR Result$7[rsp]
	call	??$epsilonEqual@N@glm@@YA_NAEBN00@Z	; glm::epsilonEqual<double>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN6@test_float
	mov	DWORD PTR tv87[rsp], 0
	jmp	SHORT $LN7@test_float
$LN6@test_float:
	mov	DWORD PTR tv87[rsp], 1
$LN7@test_float:
	mov	eax, DWORD PTR tv87[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 398  : 		}

	jmp	$LN2@test_float
$LN3@test_float:

; 399  : 
; 400  : 		return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 401  : 	}

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?test_float@ceilMultiple@@YAHXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 192				; 000000c0H
	pop	rdi
	ret	0
?test_float@ceilMultiple@@YAHXZ ENDP			; ceilMultiple::test_float
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\s4002675\Downloads\glm-0.9.8.5\glm\test\gtc\gtc_round.cpp
_TEXT	SEGMENT
Error$ = 32
?test@floorMultiple@@YAHXZ PROC				; floorMultiple::test

; 364  : 	{

$LN3:
	push	rdi
	sub	rsp, 48					; 00000030H

; 365  : 		int Error(0);

	mov	DWORD PTR Error$[rsp], 0

; 366  : 
; 367  : 		Error += test_float();

	call	?test_float@floorMultiple@@YAHXZ	; floorMultiple::test_float
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 368  : 
; 369  : 		return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 370  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?test@floorMultiple@@YAHXZ ENDP				; floorMultiple::test
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\s4002675\Downloads\glm-0.9.8.5\glm\glm\gtc\round.inl
;	COMDAT ??$floorMultiple@N@glm@@YANNN@Z
_TEXT	SEGMENT
Source$ = 64
Multiple$ = 72
??$floorMultiple@N@glm@@YANNN@Z PROC			; glm::floorMultiple<double>, COMDAT

; 320  : 	{

$LN3:
	movsd	QWORD PTR [rsp+16], xmm1
	movsd	QWORD PTR [rsp+8], xmm0
	push	rdi
	sub	rsp, 48					; 00000030H

; 321  : 		return detail::compute_floorMultiple<std::numeric_limits<genType>::is_iec559, std::numeric_limits<genType>::is_signed>::call(Source, Multiple);

	movsd	xmm1, QWORD PTR Multiple$[rsp]
	movsd	xmm0, QWORD PTR Source$[rsp]
	call	??$call@N@?$compute_floorMultiple@$00$00@detail@glm@@SANNN@Z ; glm::detail::compute_floorMultiple<1,1>::call<double>

; 322  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$floorMultiple@N@glm@@YANNN@Z ENDP			; glm::floorMultiple<double>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\s4002675\Downloads\glm-0.9.8.5\glm\test\gtc\gtc_round.cpp
_TEXT	SEGMENT
Data$ = 48
Error$ = 116
i$5 = 120
n$6 = 128
Result$7 = 152
tv87 = 176
__$ArrayPad$ = 184
?test_float@floorMultiple@@YAHXZ PROC			; floorMultiple::test_float

; 345  : 	{

$LN8:
	push	rdi
	sub	rsp, 192				; 000000c0H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 40					; 00000028H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 346  : 		type<glm::float64> const Data[] = 
; 347  : 		{
; 348  : 			{3.4, 0.3, 3.3, 0.0001},

	movsd	xmm0, QWORD PTR __real@400b333333333333
	movsd	QWORD PTR Data$[rsp], xmm0
	movsd	xmm0, QWORD PTR __real@3fd3333333333333
	movsd	QWORD PTR Data$[rsp+8], xmm0
	movsd	xmm0, QWORD PTR __real@400a666666666666
	movsd	QWORD PTR Data$[rsp+16], xmm0
	movsd	xmm0, QWORD PTR __real@3f1a36e2eb1c432d
	movsd	QWORD PTR Data$[rsp+24], xmm0

; 349  : 			{-1.4, 0.3, -1.5, 0.0001},

	movsd	xmm0, QWORD PTR __real@bff6666666666666
	movsd	QWORD PTR Data$[rsp+32], xmm0
	movsd	xmm0, QWORD PTR __real@3fd3333333333333
	movsd	QWORD PTR Data$[rsp+40], xmm0
	movsd	xmm0, QWORD PTR __real@bff8000000000000
	movsd	QWORD PTR Data$[rsp+48], xmm0
	movsd	xmm0, QWORD PTR __real@3f1a36e2eb1c432d
	movsd	QWORD PTR Data$[rsp+56], xmm0

; 350  : 		};
; 351  : 
; 352  : 		int Error(0);

	mov	DWORD PTR Error$[rsp], 0

; 353  : 		
; 354  : 		for(std::size_t i = 0, n = sizeof(Data) / sizeof(type<glm::float64>); i < n; ++i)

	mov	QWORD PTR i$5[rsp], 0
	mov	QWORD PTR n$6[rsp], 2
	jmp	SHORT $LN4@test_float
$LN2@test_float:
	mov	rax, QWORD PTR i$5[rsp]
	inc	rax
	mov	QWORD PTR i$5[rsp], rax
$LN4@test_float:
	mov	rax, QWORD PTR n$6[rsp]
	cmp	QWORD PTR i$5[rsp], rax
	jae	$LN3@test_float

; 355  : 		{
; 356  : 			glm::float64 Result = glm::floorMultiple(Data[i].Source, Data[i].Multiple);

	imul	rax, QWORD PTR i$5[rsp], 32		; 00000020H
	imul	rcx, QWORD PTR i$5[rsp], 32		; 00000020H
	movsd	xmm1, QWORD PTR Data$[rsp+rax+8]
	movsd	xmm0, QWORD PTR Data$[rsp+rcx]
	call	??$floorMultiple@N@glm@@YANNN@Z		; glm::floorMultiple<double>
	movsd	QWORD PTR Result$7[rsp], xmm0

; 357  : 			Error += glm::epsilonEqual(Data[i].Return, Result, Data[i].Epsilon) ? 0 : 1;

	imul	rax, QWORD PTR i$5[rsp], 32		; 00000020H
	lea	rax, QWORD PTR Data$[rsp+rax+24]
	imul	rcx, QWORD PTR i$5[rsp], 32		; 00000020H
	lea	rcx, QWORD PTR Data$[rsp+rcx+16]
	mov	r8, rax
	lea	rdx, QWORD PTR Result$7[rsp]
	call	??$epsilonEqual@N@glm@@YA_NAEBN00@Z	; glm::epsilonEqual<double>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN6@test_float
	mov	DWORD PTR tv87[rsp], 0
	jmp	SHORT $LN7@test_float
$LN6@test_float:
	mov	DWORD PTR tv87[rsp], 1
$LN7@test_float:
	mov	eax, DWORD PTR tv87[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 358  : 		}

	jmp	$LN2@test_float
$LN3@test_float:

; 359  : 
; 360  : 		return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 361  : 	}

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?test_float@floorMultiple@@YAHXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 192				; 000000c0H
	pop	rdi
	ret	0
?test_float@floorMultiple@@YAHXZ ENDP			; floorMultiple::test_float
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\s4002675\Downloads\glm-0.9.8.5\glm\test\gtc\gtc_round.cpp
_TEXT	SEGMENT
Error$ = 32
A$ = 36
B$ = 40
C$ = 44
tv67 = 48
tv72 = 52
tv77 = 56
?test@ceilPowerOfTwo@@YAHXZ PROC			; ceilPowerOfTwo::test

; 317  : 	{

$LN9:
	push	rdi
	sub	rsp, 64					; 00000040H

; 318  : 		int Error = 0;

	mov	DWORD PTR Error$[rsp], 0

; 319  : 		
; 320  : 		glm::uint32 const A = glm::ceilPowerOfTwo(7u);

	mov	ecx, 7
	call	??$ceilPowerOfTwo@I@glm@@YAII@Z		; glm::ceilPowerOfTwo<unsigned int>
	mov	DWORD PTR A$[rsp], eax

; 321  : 		Error += A == 8u ? 0 : 1;

	cmp	DWORD PTR A$[rsp], 8
	jne	SHORT $LN3@test
	mov	DWORD PTR tv67[rsp], 0
	jmp	SHORT $LN4@test
$LN3@test:
	mov	DWORD PTR tv67[rsp], 1
$LN4@test:
	mov	eax, DWORD PTR tv67[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 322  : 		
; 323  : 		glm::uint32 const B = glm::ceilPowerOfTwo(15u);

	mov	ecx, 15
	call	??$ceilPowerOfTwo@I@glm@@YAII@Z		; glm::ceilPowerOfTwo<unsigned int>
	mov	DWORD PTR B$[rsp], eax

; 324  : 		Error += B == 16u ? 0 : 1;

	cmp	DWORD PTR B$[rsp], 16
	jne	SHORT $LN5@test
	mov	DWORD PTR tv72[rsp], 0
	jmp	SHORT $LN6@test
$LN5@test:
	mov	DWORD PTR tv72[rsp], 1
$LN6@test:
	mov	eax, DWORD PTR tv72[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 325  : 		
; 326  : 		glm::uint32 const C = glm::ceilPowerOfTwo(31u);

	mov	ecx, 31
	call	??$ceilPowerOfTwo@I@glm@@YAII@Z		; glm::ceilPowerOfTwo<unsigned int>
	mov	DWORD PTR C$[rsp], eax

; 327  : 		Error += C == 32u ? 0 : 1;

	cmp	DWORD PTR C$[rsp], 32			; 00000020H
	jne	SHORT $LN7@test
	mov	DWORD PTR tv77[rsp], 0
	jmp	SHORT $LN8@test
$LN7@test:
	mov	DWORD PTR tv77[rsp], 1
$LN8@test:
	mov	eax, DWORD PTR tv77[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 328  : 		
; 329  : 		return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 330  : 	}

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?test@ceilPowerOfTwo@@YAHXZ ENDP			; ceilPowerOfTwo::test
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\s4002675\Downloads\glm-0.9.8.5\glm\glm\gtc\round.inl
;	COMDAT ??$floorPowerOfTwo@I@glm@@YAII@Z
_TEXT	SEGMENT
tv71 = 32
tv79 = 36
value$ = 64
??$floorPowerOfTwo@I@glm@@YAII@Z PROC			; glm::floorPowerOfTwo<unsigned int>, COMDAT

; 249  : 	{

$LN5:
	mov	DWORD PTR [rsp+8], ecx
	push	rdi
	sub	rsp, 48					; 00000030H

; 250  : 		return isPowerOfTwo(value) ? value : static_cast<genType>(1) << findMSB(value);

	mov	ecx, DWORD PTR value$[rsp]
	call	??$isPowerOfTwo@I@glm@@YA_NI@Z		; glm::isPowerOfTwo<unsigned int>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@floorPower
	mov	eax, DWORD PTR value$[rsp]
	mov	DWORD PTR tv71[rsp], eax
	jmp	SHORT $LN4@floorPower
$LN3@floorPower:
	mov	ecx, DWORD PTR value$[rsp]
	call	??$findMSB@I@glm@@YAHI@Z		; glm::findMSB<unsigned int>
	mov	ecx, 1
	mov	DWORD PTR tv79[rsp], ecx
	movzx	ecx, al
	mov	eax, DWORD PTR tv79[rsp]
	shl	eax, cl
	mov	DWORD PTR tv71[rsp], eax
$LN4@floorPower:
	mov	eax, DWORD PTR tv71[rsp]

; 251  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$floorPowerOfTwo@I@glm@@YAII@Z ENDP			; glm::floorPowerOfTwo<unsigned int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\s4002675\Downloads\glm-0.9.8.5\glm\test\gtc\gtc_round.cpp
_TEXT	SEGMENT
Error$ = 32
A$ = 36
B$ = 40
C$ = 44
tv67 = 48
tv72 = 52
tv77 = 56
?test@floorPowerOfTwo@@YAHXZ PROC			; floorPowerOfTwo::test

; 298  : 	{

$LN9:
	push	rdi
	sub	rsp, 64					; 00000040H

; 299  : 		int Error = 0;

	mov	DWORD PTR Error$[rsp], 0

; 300  : 		
; 301  : 		glm::uint32 const A = glm::floorPowerOfTwo(7u);

	mov	ecx, 7
	call	??$floorPowerOfTwo@I@glm@@YAII@Z	; glm::floorPowerOfTwo<unsigned int>
	mov	DWORD PTR A$[rsp], eax

; 302  : 		Error += A == 4u ? 0 : 1;

	cmp	DWORD PTR A$[rsp], 4
	jne	SHORT $LN3@test
	mov	DWORD PTR tv67[rsp], 0
	jmp	SHORT $LN4@test
$LN3@test:
	mov	DWORD PTR tv67[rsp], 1
$LN4@test:
	mov	eax, DWORD PTR tv67[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 303  : 		
; 304  : 		glm::uint32 const B = glm::floorPowerOfTwo(15u);

	mov	ecx, 15
	call	??$floorPowerOfTwo@I@glm@@YAII@Z	; glm::floorPowerOfTwo<unsigned int>
	mov	DWORD PTR B$[rsp], eax

; 305  : 		Error += B == 8u ? 0 : 1;

	cmp	DWORD PTR B$[rsp], 8
	jne	SHORT $LN5@test
	mov	DWORD PTR tv72[rsp], 0
	jmp	SHORT $LN6@test
$LN5@test:
	mov	DWORD PTR tv72[rsp], 1
$LN6@test:
	mov	eax, DWORD PTR tv72[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 306  : 		
; 307  : 		glm::uint32 const C = glm::floorPowerOfTwo(31u);

	mov	ecx, 31
	call	??$floorPowerOfTwo@I@glm@@YAII@Z	; glm::floorPowerOfTwo<unsigned int>
	mov	DWORD PTR C$[rsp], eax

; 308  : 		Error += C == 16u ? 0 : 1;

	cmp	DWORD PTR C$[rsp], 16
	jne	SHORT $LN7@test
	mov	DWORD PTR tv77[rsp], 0
	jmp	SHORT $LN8@test
$LN7@test:
	mov	DWORD PTR tv77[rsp], 1
$LN8@test:
	mov	eax, DWORD PTR tv77[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 309  : 		
; 310  : 		return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 311  : 	}

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?test@floorPowerOfTwo@@YAHXZ ENDP			; floorPowerOfTwo::test
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\s4002675\Downloads\glm-0.9.8.5\glm\glm\gtc\round.inl
;	COMDAT ??$roundPowerOfTwo@I@glm@@YAII@Z
_TEXT	SEGMENT
prev$ = 32
next$ = 36
tv82 = 40
tv75 = 44
value$ = 64
??$roundPowerOfTwo@I@glm@@YAII@Z PROC			; glm::roundPowerOfTwo<unsigned int>, COMDAT

; 264  : 	{

$LN6:
	mov	DWORD PTR [rsp+8], ecx
	push	rdi
	sub	rsp, 48					; 00000030H

; 265  : 		if(isPowerOfTwo(value))

	mov	ecx, DWORD PTR value$[rsp]
	call	??$isPowerOfTwo@I@glm@@YA_NI@Z		; glm::isPowerOfTwo<unsigned int>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@roundPower

; 266  : 			return value;

	mov	eax, DWORD PTR value$[rsp]
	jmp	SHORT $LN1@roundPower
$LN2@roundPower:

; 267  : 
; 268  : 		genIUType const prev = static_cast<genIUType>(1) << findMSB(value);

	mov	ecx, DWORD PTR value$[rsp]
	call	??$findMSB@I@glm@@YAHI@Z		; glm::findMSB<unsigned int>
	mov	ecx, 1
	mov	DWORD PTR tv82[rsp], ecx
	movzx	ecx, al
	mov	eax, DWORD PTR tv82[rsp]
	shl	eax, cl
	mov	DWORD PTR prev$[rsp], eax

; 269  : 		genIUType const next = prev << static_cast<genIUType>(1);

	mov	eax, DWORD PTR prev$[rsp]
	shl	eax, 1
	mov	DWORD PTR next$[rsp], eax

; 270  : 		return (next - value) < (value - prev) ? next : prev;

	mov	eax, DWORD PTR value$[rsp]
	mov	ecx, DWORD PTR next$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR prev$[rsp]
	mov	edx, DWORD PTR value$[rsp]
	sub	edx, ecx
	mov	ecx, edx
	cmp	eax, ecx
	jae	SHORT $LN4@roundPower
	mov	eax, DWORD PTR next$[rsp]
	mov	DWORD PTR tv75[rsp], eax
	jmp	SHORT $LN5@roundPower
$LN4@roundPower:
	mov	eax, DWORD PTR prev$[rsp]
	mov	DWORD PTR tv75[rsp], eax
$LN5@roundPower:
	mov	eax, DWORD PTR tv75[rsp]
$LN1@roundPower:

; 271  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$roundPowerOfTwo@I@glm@@YAII@Z ENDP			; glm::roundPowerOfTwo<unsigned int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\s4002675\Downloads\glm-0.9.8.5\glm\test\gtc\gtc_round.cpp
_TEXT	SEGMENT
Error$ = 32
A$ = 36
B$ = 40
C$ = 44
D$ = 48
E$ = 52
F$ = 56
tv67 = 60
tv72 = 64
tv77 = 68
tv82 = 72
tv87 = 76
tv92 = 80
?test@roundPowerOfTwo@@YAHXZ PROC			; roundPowerOfTwo::test

; 270  : 	{

$LN15:
	push	rdi
	sub	rsp, 96					; 00000060H

; 271  : 		int Error = 0;

	mov	DWORD PTR Error$[rsp], 0

; 272  : 		
; 273  : 		glm::uint32 const A = glm::roundPowerOfTwo(7u);

	mov	ecx, 7
	call	??$roundPowerOfTwo@I@glm@@YAII@Z	; glm::roundPowerOfTwo<unsigned int>
	mov	DWORD PTR A$[rsp], eax

; 274  : 		Error += A == 8u ? 0 : 1;

	cmp	DWORD PTR A$[rsp], 8
	jne	SHORT $LN3@test
	mov	DWORD PTR tv67[rsp], 0
	jmp	SHORT $LN4@test
$LN3@test:
	mov	DWORD PTR tv67[rsp], 1
$LN4@test:
	mov	eax, DWORD PTR tv67[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 275  : 		
; 276  : 		glm::uint32 const B = glm::roundPowerOfTwo(15u);

	mov	ecx, 15
	call	??$roundPowerOfTwo@I@glm@@YAII@Z	; glm::roundPowerOfTwo<unsigned int>
	mov	DWORD PTR B$[rsp], eax

; 277  : 		Error += B == 16u ? 0 : 1;

	cmp	DWORD PTR B$[rsp], 16
	jne	SHORT $LN5@test
	mov	DWORD PTR tv72[rsp], 0
	jmp	SHORT $LN6@test
$LN5@test:
	mov	DWORD PTR tv72[rsp], 1
$LN6@test:
	mov	eax, DWORD PTR tv72[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 278  : 
; 279  : 		glm::uint32 const C = glm::roundPowerOfTwo(31u);

	mov	ecx, 31
	call	??$roundPowerOfTwo@I@glm@@YAII@Z	; glm::roundPowerOfTwo<unsigned int>
	mov	DWORD PTR C$[rsp], eax

; 280  : 		Error += C == 32u ? 0 : 1;

	cmp	DWORD PTR C$[rsp], 32			; 00000020H
	jne	SHORT $LN7@test
	mov	DWORD PTR tv77[rsp], 0
	jmp	SHORT $LN8@test
$LN7@test:
	mov	DWORD PTR tv77[rsp], 1
$LN8@test:
	mov	eax, DWORD PTR tv77[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 281  : 		
; 282  : 		glm::uint32 const D = glm::roundPowerOfTwo(9u);

	mov	ecx, 9
	call	??$roundPowerOfTwo@I@glm@@YAII@Z	; glm::roundPowerOfTwo<unsigned int>
	mov	DWORD PTR D$[rsp], eax

; 283  : 		Error += D == 8u ? 0 : 1;

	cmp	DWORD PTR D$[rsp], 8
	jne	SHORT $LN9@test
	mov	DWORD PTR tv82[rsp], 0
	jmp	SHORT $LN10@test
$LN9@test:
	mov	DWORD PTR tv82[rsp], 1
$LN10@test:
	mov	eax, DWORD PTR tv82[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 284  : 		
; 285  : 		glm::uint32 const E = glm::roundPowerOfTwo(17u);

	mov	ecx, 17
	call	??$roundPowerOfTwo@I@glm@@YAII@Z	; glm::roundPowerOfTwo<unsigned int>
	mov	DWORD PTR E$[rsp], eax

; 286  : 		Error += E == 16u ? 0 : 1;

	cmp	DWORD PTR E$[rsp], 16
	jne	SHORT $LN11@test
	mov	DWORD PTR tv87[rsp], 0
	jmp	SHORT $LN12@test
$LN11@test:
	mov	DWORD PTR tv87[rsp], 1
$LN12@test:
	mov	eax, DWORD PTR tv87[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 287  : 		
; 288  : 		glm::uint32 const F = glm::roundPowerOfTwo(33u);

	mov	ecx, 33					; 00000021H
	call	??$roundPowerOfTwo@I@glm@@YAII@Z	; glm::roundPowerOfTwo<unsigned int>
	mov	DWORD PTR F$[rsp], eax

; 289  : 		Error += F == 32u ? 0 : 1;

	cmp	DWORD PTR F$[rsp], 32			; 00000020H
	jne	SHORT $LN13@test
	mov	DWORD PTR tv92[rsp], 0
	jmp	SHORT $LN14@test
$LN13@test:
	mov	DWORD PTR tv92[rsp], 1
$LN14@test:
	mov	eax, DWORD PTR tv92[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 290  : 		
; 291  : 		return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 292  : 	}

	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
?test@roundPowerOfTwo@@YAHXZ ENDP			; roundPowerOfTwo::test
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\s4002675\Downloads\glm-0.9.8.5\glm\test\gtc\gtc_round.cpp
_TEXT	SEGMENT
Error$ = 32
?test@ceilPowerOfTwo_advanced@@YAHXZ PROC		; ceilPowerOfTwo_advanced::test

; 257  : 	{

$LN3:
	push	rdi
	sub	rsp, 48					; 00000030H

; 258  : 		int Error(0);

	mov	DWORD PTR Error$[rsp], 0

; 259  : 
; 260  : 		Error += test_int32();

	call	?test_int32@ceilPowerOfTwo_advanced@@YAHXZ ; ceilPowerOfTwo_advanced::test_int32
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 261  : 		Error += test_uint32();

	call	?test_uint32@ceilPowerOfTwo_advanced@@YAHXZ ; ceilPowerOfTwo_advanced::test_uint32
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 262  : 
; 263  : 		return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 264  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?test@ceilPowerOfTwo_advanced@@YAHXZ ENDP		; ceilPowerOfTwo_advanced::test
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\s4002675\Downloads\glm-0.9.8.5\glm\test\gtc\gtc_round.cpp
;	COMDAT ??$ceilPowerOfTwo_loop@I@ceilPowerOfTwo_advanced@@YAII@Z
_TEXT	SEGMENT
tv71 = 32
value$ = 64
??$ceilPowerOfTwo_loop@I@ceilPowerOfTwo_advanced@@YAII@Z PROC ; ceilPowerOfTwo_advanced::ceilPowerOfTwo_loop<unsigned int>, COMDAT

; 164  : 	{

$LN5:
	mov	DWORD PTR [rsp+8], ecx
	push	rdi
	sub	rsp, 48					; 00000030H

; 165  : 		return glm::isPowerOfTwo(value) ? value : highestBitValue(value) << 1;

	mov	ecx, DWORD PTR value$[rsp]
	call	??$isPowerOfTwo@I@glm@@YA_NI@Z		; glm::isPowerOfTwo<unsigned int>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@ceilPowerO
	mov	eax, DWORD PTR value$[rsp]
	mov	DWORD PTR tv71[rsp], eax
	jmp	SHORT $LN4@ceilPowerO
$LN3@ceilPowerO:
	mov	ecx, DWORD PTR value$[rsp]
	call	??$highestBitValue@I@ceilPowerOfTwo_advanced@@YAII@Z ; ceilPowerOfTwo_advanced::highestBitValue<unsigned int>
	shl	eax, 1
	mov	DWORD PTR tv71[rsp], eax
$LN4@ceilPowerO:
	mov	eax, DWORD PTR tv71[rsp]

; 166  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$ceilPowerOfTwo_loop@I@ceilPowerOfTwo_advanced@@YAII@Z ENDP ; ceilPowerOfTwo_advanced::ceilPowerOfTwo_loop<unsigned int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@I@std@@V?$_Vector_val@U?$_Simple_types@I@std@@@2@$00@std@@QEBAAEBV?$allocator@I@2@XZ
_TEXT	SEGMENT
this$ = 16
?_Get_first@?$_Compressed_pair@V?$allocator@I@std@@V?$_Vector_val@U?$_Simple_types@I@std@@@2@$00@std@@QEBAAEBV?$allocator@I@2@XZ PROC ; std::_Compressed_pair<std::allocator<unsigned int>,std::_Vector_val<std::_Simple_types<unsigned int> >,1>::_Get_first, COMDAT

; 1381 :     constexpr const _Ty1& _Get_first() const noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1382 :         return *this;

	mov	rax, QWORD PTR this$[rsp]

; 1383 :     }

	pop	rdi
	ret	0
?_Get_first@?$_Compressed_pair@V?$allocator@I@std@@V?$_Vector_val@U?$_Simple_types@I@std@@@2@$00@std@@QEBAAEBV?$allocator@I@2@XZ ENDP ; std::_Compressed_pair<std::allocator<unsigned int>,std::_Vector_val<std::_Simple_types<unsigned int> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@I@std@@V?$_Vector_val@U?$_Simple_types@I@std@@@2@$00@std@@QEAAAEAV?$allocator@I@2@XZ
_TEXT	SEGMENT
this$ = 16
?_Get_first@?$_Compressed_pair@V?$allocator@I@std@@V?$_Vector_val@U?$_Simple_types@I@std@@@2@$00@std@@QEAAAEAV?$allocator@I@2@XZ PROC ; std::_Compressed_pair<std::allocator<unsigned int>,std::_Vector_val<std::_Simple_types<unsigned int> >,1>::_Get_first, COMDAT

; 1377 :     constexpr _Ty1& _Get_first() noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1378 :         return *this;

	mov	rax, QWORD PTR this$[rsp]

; 1379 :     }

	pop	rdi
	ret	0
?_Get_first@?$_Compressed_pair@V?$allocator@I@std@@V?$_Vector_val@U?$_Simple_types@I@std@@@2@$00@std@@QEAAAEAV?$allocator@I@2@XZ ENDP ; std::_Compressed_pair<std::allocator<unsigned int>,std::_Vector_val<std::_Simple_types<unsigned int> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\vector
;	COMDAT ??0?$_Vector_val@U?$_Simple_types@I@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??0?$_Vector_val@U?$_Simple_types@I@std@@@std@@QEAA@XZ PROC ; std::_Vector_val<std::_Simple_types<unsigned int> >::_Vector_val<std::_Simple_types<unsigned int> >, COMDAT

; 401  :     _CONSTEXPR20_CONTAINER _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rcx, QWORD PTR this$[rsp]
	call	??0_Container_base12@std@@QEAA@XZ	; std::_Container_base12::_Container_base12
	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR [rax+8], 0
	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR [rax+16], 0
	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR [rax+24], 0
	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??0?$_Vector_val@U?$_Simple_types@I@std@@@std@@QEAA@XZ ENDP ; std::_Vector_val<std::_Simple_types<unsigned int> >::_Vector_val<std::_Simple_types<unsigned int> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\vector
;	COMDAT ?_Getal@?$vector@IV?$allocator@I@std@@@std@@AEBAAEBV?$allocator@I@2@XZ
_TEXT	SEGMENT
this$ = 48
?_Getal@?$vector@IV?$allocator@I@std@@@std@@AEBAAEBV?$allocator@I@2@XZ PROC ; std::vector<unsigned int,std::allocator<unsigned int> >::_Getal, COMDAT

; 1821 :     _NODISCARD _CONSTEXPR20_CONTAINER const _Alty& _Getal() const noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 1822 :         return _Mypair._Get_first();

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, rax
	call	?_Get_first@?$_Compressed_pair@V?$allocator@I@std@@V?$_Vector_val@U?$_Simple_types@I@std@@@2@$00@std@@QEBAAEBV?$allocator@I@2@XZ ; std::_Compressed_pair<std::allocator<unsigned int>,std::_Vector_val<std::_Simple_types<unsigned int> >,1>::_Get_first

; 1823 :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?_Getal@?$vector@IV?$allocator@I@std@@@std@@AEBAAEBV?$allocator@I@2@XZ ENDP ; std::vector<unsigned int,std::allocator<unsigned int> >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\vector
;	COMDAT ?_Getal@?$vector@IV?$allocator@I@std@@@std@@AEAAAEAV?$allocator@I@2@XZ
_TEXT	SEGMENT
this$ = 48
?_Getal@?$vector@IV?$allocator@I@std@@@std@@AEAAAEAV?$allocator@I@2@XZ PROC ; std::vector<unsigned int,std::allocator<unsigned int> >::_Getal, COMDAT

; 1817 :     _NODISCARD _CONSTEXPR20_CONTAINER _Alty& _Getal() noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 1818 :         return _Mypair._Get_first();

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, rax
	call	?_Get_first@?$_Compressed_pair@V?$allocator@I@std@@V?$_Vector_val@U?$_Simple_types@I@std@@@2@$00@std@@QEAAAEAV?$allocator@I@2@XZ ; std::_Compressed_pair<std::allocator<unsigned int>,std::_Vector_val<std::_Simple_types<unsigned int> >,1>::_Get_first

; 1819 :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?_Getal@?$vector@IV?$allocator@I@std@@@std@@AEAAAEAV?$allocator@I@2@XZ ENDP ; std::vector<unsigned int,std::allocator<unsigned int> >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\vector
;	COMDAT ?_Orphan_range@?$vector@IV?$allocator@I@std@@@std@@AEBAXPEAI0@Z
_TEXT	SEGMENT
this$ = 48
_First$ = 56
_Last$ = 64
?_Orphan_range@?$vector@IV?$allocator@I@std@@@std@@AEBAXPEAI0@Z PROC ; std::vector<unsigned int,std::allocator<unsigned int> >::_Orphan_range, COMDAT

; 1802 :     _CONSTEXPR20_CONTAINER void _Orphan_range(pointer _First, pointer _Last) const {

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 1803 :         // orphan iterators within specified (inclusive) range
; 1804 : #ifdef __cpp_lib_constexpr_dynamic_alloc
; 1805 :         if (_STD is_constant_evaluated()) {
; 1806 :             _Orphan_range_unlocked(_First, _Last);
; 1807 :         } else
; 1808 : #endif // __cpp_lib_constexpr_dynamic_alloc
; 1809 :         {
; 1810 :             _Orphan_range_locked(_First, _Last);

	mov	r8, QWORD PTR _Last$[rsp]
	mov	rdx, QWORD PTR _First$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?_Orphan_range_locked@?$vector@IV?$allocator@I@std@@@std@@AEBAXPEAI0@Z ; std::vector<unsigned int,std::allocator<unsigned int> >::_Orphan_range_locked

; 1811 :         }
; 1812 :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?_Orphan_range@?$vector@IV?$allocator@I@std@@@std@@AEBAXPEAI0@Z ENDP ; std::vector<unsigned int,std::allocator<unsigned int> >::_Orphan_range
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\vector
;	COMDAT ?_Orphan_range_locked@?$vector@IV?$allocator@I@std@@@std@@AEBAXPEAI0@Z
_TEXT	SEGMENT
_Lock$ = 36
this$ = 80
_First$ = 88
_Last$ = 96
?_Orphan_range_locked@?$vector@IV?$allocator@I@std@@@std@@AEBAXPEAI0@Z PROC ; std::vector<unsigned int,std::allocator<unsigned int> >::_Orphan_range_locked, COMDAT

; 1797 :     void _Orphan_range_locked(pointer _First, pointer _Last) const {

$LN4:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 8
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+80]

; 1798 :         _Lockit _Lock(_LOCK_DEBUG);

	mov	edx, 3
	lea	rcx, QWORD PTR _Lock$[rsp]
	call	QWORD PTR __imp_??0_Lockit@std@@QEAA@H@Z
	npad	1

; 1799 :         _Orphan_range_unlocked(_First, _Last);

	mov	r8, QWORD PTR _Last$[rsp]
	mov	rdx, QWORD PTR _First$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?_Orphan_range_unlocked@?$vector@IV?$allocator@I@std@@@std@@AEBAXPEAI0@Z ; std::vector<unsigned int,std::allocator<unsigned int> >::_Orphan_range_unlocked
	npad	1

; 1800 :     }

	lea	rcx, QWORD PTR _Lock$[rsp]
	call	QWORD PTR __imp_??1_Lockit@std@@QEAA@XZ
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?_Orphan_range_locked@?$vector@IV?$allocator@I@std@@@std@@AEBAXPEAI0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?_Orphan_range_locked@?$vector@IV?$allocator@I@std@@@std@@AEBAXPEAI0@Z ENDP ; std::vector<unsigned int,std::allocator<unsigned int> >::_Orphan_range_locked
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
_Lock$ = 36
this$ = 80
_First$ = 88
_Last$ = 96
?dtor$0@?0??_Orphan_range_locked@?$vector@IV?$allocator@I@std@@@std@@AEBAXPEAI0@Z@4HA PROC ; `std::vector<unsigned int,std::allocator<unsigned int> >::_Orphan_range_locked'::`1'::dtor$0
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	lea	rcx, QWORD PTR _Lock$[rbp]
	call	QWORD PTR __imp_??1_Lockit@std@@QEAA@XZ
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$0@?0??_Orphan_range_locked@?$vector@IV?$allocator@I@std@@@std@@AEBAXPEAI0@Z@4HA ENDP ; `std::vector<unsigned int,std::allocator<unsigned int> >::_Orphan_range_locked'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
_Lock$ = 36
this$ = 80
_First$ = 88
_Last$ = 96
?dtor$0@?0??_Orphan_range_locked@?$vector@IV?$allocator@I@std@@@std@@AEBAXPEAI0@Z@4HA PROC ; `std::vector<unsigned int,std::allocator<unsigned int> >::_Orphan_range_locked'::`1'::dtor$0
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	lea	rcx, QWORD PTR _Lock$[rbp]
	call	QWORD PTR __imp_??1_Lockit@std@@QEAA@XZ
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$0@?0??_Orphan_range_locked@?$vector@IV?$allocator@I@std@@@std@@AEBAXPEAI0@Z@4HA ENDP ; `std::vector<unsigned int,std::allocator<unsigned int> >::_Orphan_range_locked'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\vector
;	COMDAT ?_Orphan_range_unlocked@?$vector@IV?$allocator@I@std@@@std@@AEBAXPEAI0@Z
_TEXT	SEGMENT
_Pnext$ = 0
_Pnextptr$1 = 8
_Temp$2 = 16
_Temp$3 = 24
this$ = 48
_First$ = 56
_Last$ = 64
?_Orphan_range_unlocked@?$vector@IV?$allocator@I@std@@@std@@AEBAXPEAI0@Z PROC ; std::vector<unsigned int,std::allocator<unsigned int> >::_Orphan_range_unlocked, COMDAT

; 1782 :     _CONSTEXPR20_CONTAINER void _Orphan_range_unlocked(pointer _First, pointer _Last) const {

$LN8:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 1783 :         _Iterator_base12** _Pnext = &_Mypair._Myval2._Myproxy->_Myfirstiter;

	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax]
	add	rax, 8
	mov	QWORD PTR _Pnext$[rsp], rax
$LN2@Orphan_ran:

; 1784 :         while (*_Pnext) {

	mov	rax, QWORD PTR _Pnext$[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN3@Orphan_ran

; 1785 :             const auto _Pnextptr = static_cast<const_iterator&>(**_Pnext)._Ptr;

	mov	rax, QWORD PTR _Pnext$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+16]
	mov	QWORD PTR _Pnextptr$1[rsp], rax

; 1786 :             if (_Pnextptr < _First || _Last < _Pnextptr) { // skip the iterator

	mov	rax, QWORD PTR _First$[rsp]
	cmp	QWORD PTR _Pnextptr$1[rsp], rax
	jb	SHORT $LN6@Orphan_ran
	mov	rax, QWORD PTR _Pnextptr$1[rsp]
	cmp	QWORD PTR _Last$[rsp], rax
	jae	SHORT $LN4@Orphan_ran
$LN6@Orphan_ran:

; 1787 :                 const auto _Temp = *_Pnext; // TRANSITION, VSO-1269037

	mov	rax, QWORD PTR _Pnext$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR _Temp$2[rsp], rax

; 1788 :                 _Pnext           = &_Temp->_Mynextiter;

	mov	rax, QWORD PTR _Temp$2[rsp]
	add	rax, 8
	mov	QWORD PTR _Pnext$[rsp], rax

; 1789 :             } else { // orphan the iterator

	jmp	SHORT $LN5@Orphan_ran
$LN4@Orphan_ran:

; 1790 :                 const auto _Temp = *_Pnext; // TRANSITION, VSO-1269037

	mov	rax, QWORD PTR _Pnext$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR _Temp$3[rsp], rax

; 1791 :                 _Temp->_Myproxy  = nullptr;

	mov	rax, QWORD PTR _Temp$3[rsp]
	mov	QWORD PTR [rax], 0

; 1792 :                 *_Pnext          = _Temp->_Mynextiter;

	mov	rax, QWORD PTR _Pnext$[rsp]
	mov	rcx, QWORD PTR _Temp$3[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	QWORD PTR [rax], rcx
$LN5@Orphan_ran:

; 1793 :             }
; 1794 :         }

	jmp	SHORT $LN2@Orphan_ran
$LN3@Orphan_ran:

; 1795 :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?_Orphan_range_unlocked@?$vector@IV?$allocator@I@std@@@std@@AEBAXPEAI0@Z ENDP ; std::vector<unsigned int,std::allocator<unsigned int> >::_Orphan_range_unlocked
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\vector
;	COMDAT ?_Xlength@?$vector@IV?$allocator@I@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@IV?$allocator@I@std@@@std@@CAXXZ PROC ; std::vector<unsigned int,std::allocator<unsigned int> >::_Xlength, COMDAT

; 1773 :     [[noreturn]] static void _Xlength() {

$LN3:
	push	rdi
	sub	rsp, 32					; 00000020H

; 1774 :         _Xlength_error("vector too long");

	lea	rcx, OFFSET FLAT:??_C@_0BA@FOIKENOD@vector?5too?5long@
	call	?_Xlength_error@std@@YAXPEBD@Z		; std::_Xlength_error
$LN2@Xlength:

; 1775 :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?_Xlength@?$vector@IV?$allocator@I@std@@@std@@CAXXZ ENDP ; std::vector<unsigned int,std::allocator<unsigned int> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\vector
;	COMDAT ?_Tidy@?$vector@IV?$allocator@I@std@@@std@@AEAAXXZ
_TEXT	SEGMENT
_My_data$ = 32
_Myfirst$ = 40
_Mylast$ = 48
_Myend$ = 56
tv82 = 64
this$ = 96
?_Tidy@?$vector@IV?$allocator@I@std@@@std@@AEAAXXZ PROC	; std::vector<unsigned int,std::allocator<unsigned int> >::_Tidy, COMDAT

; 1755 :     _CONSTEXPR20_CONTAINER void _Tidy() noexcept { // free all storage

$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H

; 1756 :         auto& _My_data    = _Mypair._Myval2;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR _My_data$[rsp], rax

; 1757 :         pointer& _Myfirst = _My_data._Myfirst;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 8
	mov	QWORD PTR _Myfirst$[rsp], rax

; 1758 :         pointer& _Mylast  = _My_data._Mylast;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 16
	mov	QWORD PTR _Mylast$[rsp], rax

; 1759 :         pointer& _Myend   = _My_data._Myend;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 24
	mov	QWORD PTR _Myend$[rsp], rax

; 1760 : 
; 1761 :         _My_data._Orphan_all();

	mov	rcx, QWORD PTR _My_data$[rsp]
	call	?_Orphan_all@_Container_base12@std@@QEAAXXZ ; std::_Container_base12::_Orphan_all

; 1762 : 
; 1763 :         if (_Myfirst) { // destroy and deallocate old array

	mov	rax, QWORD PTR _Myfirst$[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN2@Tidy

; 1764 :             _Destroy(_Myfirst, _Mylast);

	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	r8, QWORD PTR [rax]
	mov	rax, QWORD PTR _Myfirst$[rsp]
	mov	rdx, QWORD PTR [rax]
	mov	rcx, QWORD PTR this$[rsp]
	call	?_Destroy@?$vector@IV?$allocator@I@std@@@std@@AEAAXPEAI0@Z ; std::vector<unsigned int,std::allocator<unsigned int> >::_Destroy

; 1765 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

	mov	rax, QWORD PTR _Myend$[rsp]
	mov	rcx, QWORD PTR _Myfirst$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	rax, QWORD PTR [rax]
	sub	rax, rcx
	sar	rax, 2
	mov	QWORD PTR tv82[rsp], rax
	mov	rcx, QWORD PTR this$[rsp]
	call	?_Getal@?$vector@IV?$allocator@I@std@@@std@@AEAAAEAV?$allocator@I@2@XZ ; std::vector<unsigned int,std::allocator<unsigned int> >::_Getal
	mov	rcx, QWORD PTR tv82[rsp]
	mov	r8, rcx
	mov	rcx, QWORD PTR _Myfirst$[rsp]
	mov	rdx, QWORD PTR [rcx]
	mov	rcx, rax
	call	?deallocate@?$allocator@I@std@@QEAAXQEAI_K@Z ; std::allocator<unsigned int>::deallocate

; 1766 : 
; 1767 :             _Myfirst = nullptr;

	mov	rax, QWORD PTR _Myfirst$[rsp]
	mov	QWORD PTR [rax], 0

; 1768 :             _Mylast  = nullptr;

	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	QWORD PTR [rax], 0

; 1769 :             _Myend   = nullptr;

	mov	rax, QWORD PTR _Myend$[rsp]
	mov	QWORD PTR [rax], 0
$LN2@Tidy:

; 1770 :         }
; 1771 :     }

	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
?_Tidy@?$vector@IV?$allocator@I@std@@@std@@AEAAXXZ ENDP	; std::vector<unsigned int,std::allocator<unsigned int> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\vector
;	COMDAT ?_Change_array@?$vector@IV?$allocator@I@std@@@std@@AEAAXQEAI_K1@Z
_TEXT	SEGMENT
_My_data$ = 32
_Myfirst$ = 40
_Mylast$ = 48
_Myend$ = 56
tv82 = 64
this$ = 96
_Newvec$ = 104
_Newsize$ = 112
_Newcapacity$ = 120
?_Change_array@?$vector@IV?$allocator@I@std@@@std@@AEAAXQEAI_K1@Z PROC ; std::vector<unsigned int,std::allocator<unsigned int> >::_Change_array, COMDAT

; 1736 :         const pointer _Newvec, const size_type _Newsize, const size_type _Newcapacity) {

$LN4:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H

; 1737 :         // orphan all iterators, discard old array, acquire new array
; 1738 :         auto& _My_data    = _Mypair._Myval2;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR _My_data$[rsp], rax

; 1739 :         pointer& _Myfirst = _My_data._Myfirst;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 8
	mov	QWORD PTR _Myfirst$[rsp], rax

; 1740 :         pointer& _Mylast  = _My_data._Mylast;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 16
	mov	QWORD PTR _Mylast$[rsp], rax

; 1741 :         pointer& _Myend   = _My_data._Myend;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 24
	mov	QWORD PTR _Myend$[rsp], rax

; 1742 : 
; 1743 :         _My_data._Orphan_all();

	mov	rcx, QWORD PTR _My_data$[rsp]
	call	?_Orphan_all@_Container_base12@std@@QEAAXXZ ; std::_Container_base12::_Orphan_all

; 1744 : 
; 1745 :         if (_Myfirst) { // destroy and deallocate old array

	mov	rax, QWORD PTR _Myfirst$[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN2@Change_arr

; 1746 :             _Destroy(_Myfirst, _Mylast);

	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	r8, QWORD PTR [rax]
	mov	rax, QWORD PTR _Myfirst$[rsp]
	mov	rdx, QWORD PTR [rax]
	mov	rcx, QWORD PTR this$[rsp]
	call	?_Destroy@?$vector@IV?$allocator@I@std@@@std@@AEAAXPEAI0@Z ; std::vector<unsigned int,std::allocator<unsigned int> >::_Destroy

; 1747 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

	mov	rax, QWORD PTR _Myend$[rsp]
	mov	rcx, QWORD PTR _Myfirst$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	rax, QWORD PTR [rax]
	sub	rax, rcx
	sar	rax, 2
	mov	QWORD PTR tv82[rsp], rax
	mov	rcx, QWORD PTR this$[rsp]
	call	?_Getal@?$vector@IV?$allocator@I@std@@@std@@AEAAAEAV?$allocator@I@2@XZ ; std::vector<unsigned int,std::allocator<unsigned int> >::_Getal
	mov	rcx, QWORD PTR tv82[rsp]
	mov	r8, rcx
	mov	rcx, QWORD PTR _Myfirst$[rsp]
	mov	rdx, QWORD PTR [rcx]
	mov	rcx, rax
	call	?deallocate@?$allocator@I@std@@QEAAXQEAI_K@Z ; std::allocator<unsigned int>::deallocate
$LN2@Change_arr:

; 1748 :         }
; 1749 : 
; 1750 :         _Myfirst = _Newvec;

	mov	rax, QWORD PTR _Myfirst$[rsp]
	mov	rcx, QWORD PTR _Newvec$[rsp]
	mov	QWORD PTR [rax], rcx

; 1751 :         _Mylast  = _Newvec + _Newsize;

	mov	rax, QWORD PTR _Newvec$[rsp]
	mov	rcx, QWORD PTR _Newsize$[rsp]
	lea	rax, QWORD PTR [rax+rcx*4]
	mov	rcx, QWORD PTR _Mylast$[rsp]
	mov	QWORD PTR [rcx], rax

; 1752 :         _Myend   = _Newvec + _Newcapacity;

	mov	rax, QWORD PTR _Newvec$[rsp]
	mov	rcx, QWORD PTR _Newcapacity$[rsp]
	lea	rax, QWORD PTR [rax+rcx*4]
	mov	rcx, QWORD PTR _Myend$[rsp]
	mov	QWORD PTR [rcx], rax

; 1753 :     }

	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
?_Change_array@?$vector@IV?$allocator@I@std@@@std@@AEAAXQEAI_K1@Z ENDP ; std::vector<unsigned int,std::allocator<unsigned int> >::_Change_array
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\vector
;	COMDAT ?_Calculate_growth@?$vector@IV?$allocator@I@std@@@std@@AEBA_K_K@Z
_TEXT	SEGMENT
_Oldcapacity$ = 32
_Max$ = 40
_Geometric$ = 48
this$ = 80
_Newsize$ = 88
?_Calculate_growth@?$vector@IV?$allocator@I@std@@@std@@AEBA_K_K@Z PROC ; std::vector<unsigned int,std::allocator<unsigned int> >::_Calculate_growth, COMDAT

; 1683 :     _CONSTEXPR20_CONTAINER size_type _Calculate_growth(const size_type _Newsize) const {

$LN5:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 1684 :         // given _Oldcapacity and _Newsize, calculate geometric growth
; 1685 :         const size_type _Oldcapacity = capacity();

	mov	rcx, QWORD PTR this$[rsp]
	call	?capacity@?$vector@IV?$allocator@I@std@@@std@@QEBA_KXZ ; std::vector<unsigned int,std::allocator<unsigned int> >::capacity
	mov	QWORD PTR _Oldcapacity$[rsp], rax

; 1686 :         const auto _Max              = max_size();

	mov	rcx, QWORD PTR this$[rsp]
	call	?max_size@?$vector@IV?$allocator@I@std@@@std@@QEBA_KXZ ; std::vector<unsigned int,std::allocator<unsigned int> >::max_size
	mov	QWORD PTR _Max$[rsp], rax

; 1687 : 
; 1688 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

	xor	edx, edx
	mov	rax, QWORD PTR _Oldcapacity$[rsp]
	mov	ecx, 2
	div	rcx
	mov	rcx, QWORD PTR _Max$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	cmp	QWORD PTR _Oldcapacity$[rsp], rax
	jbe	SHORT $LN2@Calculate_

; 1689 :             return _Max; // geometric growth would overflow

	mov	rax, QWORD PTR _Max$[rsp]
	jmp	SHORT $LN1@Calculate_
$LN2@Calculate_:

; 1690 :         }
; 1691 : 
; 1692 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

	xor	edx, edx
	mov	rax, QWORD PTR _Oldcapacity$[rsp]
	mov	ecx, 2
	div	rcx
	mov	rcx, QWORD PTR _Oldcapacity$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR _Geometric$[rsp], rax

; 1693 : 
; 1694 :         if (_Geometric < _Newsize) {

	mov	rax, QWORD PTR _Newsize$[rsp]
	cmp	QWORD PTR _Geometric$[rsp], rax
	jae	SHORT $LN3@Calculate_

; 1695 :             return _Newsize; // geometric growth would be insufficient

	mov	rax, QWORD PTR _Newsize$[rsp]
	jmp	SHORT $LN1@Calculate_
$LN3@Calculate_:

; 1696 :         }
; 1697 : 
; 1698 :         return _Geometric; // geometric growth is sufficient

	mov	rax, QWORD PTR _Geometric$[rsp]
$LN1@Calculate_:

; 1699 :     }

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?_Calculate_growth@?$vector@IV?$allocator@I@std@@@std@@AEBA_K_K@Z ENDP ; std::vector<unsigned int,std::allocator<unsigned int> >::_Calculate_growth
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\vector
;	COMDAT ?_Destroy@?$vector@IV?$allocator@I@std@@@std@@AEAAXPEAI0@Z
_TEXT	SEGMENT
this$ = 48
_First$ = 56
_Last$ = 64
?_Destroy@?$vector@IV?$allocator@I@std@@@std@@AEAAXPEAI0@Z PROC ; std::vector<unsigned int,std::allocator<unsigned int> >::_Destroy, COMDAT

; 1678 :     _CONSTEXPR20_CONTAINER void _Destroy(pointer _First, pointer _Last) {

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 1679 :         // destroy [_First, _Last) using allocator
; 1680 :         _Destroy_range(_First, _Last, _Getal());

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Getal@?$vector@IV?$allocator@I@std@@@std@@AEAAAEAV?$allocator@I@2@XZ ; std::vector<unsigned int,std::allocator<unsigned int> >::_Getal
	mov	r8, rax
	mov	rdx, QWORD PTR _Last$[rsp]
	mov	rcx, QWORD PTR _First$[rsp]
	call	??$_Destroy_range@V?$allocator@I@std@@@std@@YAXPEAIQEAIAEAV?$allocator@I@0@@Z ; std::_Destroy_range<std::allocator<unsigned int> >

; 1681 :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?_Destroy@?$vector@IV?$allocator@I@std@@@std@@AEAAXPEAI0@Z ENDP ; std::vector<unsigned int,std::allocator<unsigned int> >::_Destroy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\vector
;	COMDAT ?_Umove_if_noexcept@?$vector@IV?$allocator@I@std@@@std@@AEAAXPEAI00@Z
_TEXT	SEGMENT
$T1 = 48
this$ = 80
_First$ = 88
_Last$ = 96
_Dest$ = 104
?_Umove_if_noexcept@?$vector@IV?$allocator@I@std@@@std@@AEAAXPEAI00@Z PROC ; std::vector<unsigned int,std::allocator<unsigned int> >::_Umove_if_noexcept, COMDAT

; 1672 :     _CONSTEXPR20_CONTAINER void _Umove_if_noexcept(pointer _First, pointer _Last, pointer _Dest) {

$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 1673 :         // move_if_noexcept [_First, _Last) to raw _Dest, using allocator
; 1674 :         _Umove_if_noexcept1(_First, _Last, _Dest,

	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	xor	eax, eax
	mov	ecx, 1
	rep stosb
	movzx	eax, BYTE PTR $T1[rsp]
	mov	BYTE PTR [rsp+32], al
	mov	r9, QWORD PTR _Dest$[rsp]
	mov	r8, QWORD PTR _Last$[rsp]
	mov	rdx, QWORD PTR _First$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?_Umove_if_noexcept1@?$vector@IV?$allocator@I@std@@@std@@AEAAXPEAI00U?$integral_constant@_N$00@2@@Z ; std::vector<unsigned int,std::allocator<unsigned int> >::_Umove_if_noexcept1

; 1675 :             bool_constant<disjunction_v<is_nothrow_move_constructible<_Ty>, negation<is_copy_constructible<_Ty>>>>{});
; 1676 :     }

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?_Umove_if_noexcept@?$vector@IV?$allocator@I@std@@@std@@AEAAXPEAI00@Z ENDP ; std::vector<unsigned int,std::allocator<unsigned int> >::_Umove_if_noexcept
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\vector
;	COMDAT ?_Umove_if_noexcept1@?$vector@IV?$allocator@I@std@@@std@@AEAAXPEAI00U?$integral_constant@_N$00@2@@Z
_TEXT	SEGMENT
this$ = 48
_First$ = 56
_Last$ = 64
_Dest$ = 72
__formal$ = 80
?_Umove_if_noexcept1@?$vector@IV?$allocator@I@std@@@std@@AEAAXPEAI00U?$integral_constant@_N$00@2@@Z PROC ; std::vector<unsigned int,std::allocator<unsigned int> >::_Umove_if_noexcept1, COMDAT

; 1662 :     _CONSTEXPR20_CONTAINER void _Umove_if_noexcept1(pointer _First, pointer _Last, pointer _Dest, true_type) {

$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 1663 :         // move [_First, _Last) to raw _Dest, using allocator
; 1664 :         _Uninitialized_move(_First, _Last, _Dest, _Getal());

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Getal@?$vector@IV?$allocator@I@std@@@std@@AEAAAEAV?$allocator@I@2@XZ ; std::vector<unsigned int,std::allocator<unsigned int> >::_Getal
	mov	r9, rax
	mov	r8, QWORD PTR _Dest$[rsp]
	mov	rdx, QWORD PTR _Last$[rsp]
	mov	rcx, QWORD PTR _First$[rsp]
	call	??$_Uninitialized_move@PEAIV?$allocator@I@std@@@std@@YAPEAIQEAI0PEAIAEAV?$allocator@I@0@@Z ; std::_Uninitialized_move<unsigned int *,std::allocator<unsigned int> >

; 1665 :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?_Umove_if_noexcept1@?$vector@IV?$allocator@I@std@@@std@@AEAAXPEAI00U?$integral_constant@_N$00@2@@Z ENDP ; std::vector<unsigned int,std::allocator<unsigned int> >::_Umove_if_noexcept1
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\vector
;	COMDAT ?_Ufill@?$vector@IV?$allocator@I@std@@@std@@AEAAPEAIPEAI_KU_Value_init_tag@2@@Z
_TEXT	SEGMENT
this$ = 48
_Dest$ = 56
_Count$ = 64
__formal$ = 72
?_Ufill@?$vector@IV?$allocator@I@std@@@std@@AEAAPEAIPEAI_KU_Value_init_tag@2@@Z PROC ; std::vector<unsigned int,std::allocator<unsigned int> >::_Ufill, COMDAT

; 1646 :     _CONSTEXPR20_CONTAINER pointer _Ufill(pointer _Dest, const size_type _Count, _Value_init_tag) {

$LN3:
	mov	BYTE PTR [rsp+32], r9b
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 1647 :         // fill raw _Dest with _Count value-initialized objects, using allocator
; 1648 :         return _Uninitialized_value_construct_n(_Dest, _Count, _Getal());

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Getal@?$vector@IV?$allocator@I@std@@@std@@AEAAAEAV?$allocator@I@2@XZ ; std::vector<unsigned int,std::allocator<unsigned int> >::_Getal
	mov	r8, rax
	mov	rdx, QWORD PTR _Count$[rsp]
	mov	rcx, QWORD PTR _Dest$[rsp]
	call	??$_Uninitialized_value_construct_n@V?$allocator@I@std@@@std@@YAPEAIPEAI_KAEAV?$allocator@I@0@@Z ; std::_Uninitialized_value_construct_n<std::allocator<unsigned int> >

; 1649 :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?_Ufill@?$vector@IV?$allocator@I@std@@@std@@AEAAPEAIPEAI_KU_Value_init_tag@2@@Z ENDP ; std::vector<unsigned int,std::allocator<unsigned int> >::_Ufill
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\vector
;	COMDAT ??A?$vector@IV?$allocator@I@std@@@std@@QEAAAEAI_K@Z
_TEXT	SEGMENT
_My_data$ = 48
this$ = 80
_Pos$ = 88
??A?$vector@IV?$allocator@I@std@@@std@@QEAAAEAI_K@Z PROC ; std::vector<unsigned int,std::allocator<unsigned int> >::operator[], COMDAT

; 1562 :     _NODISCARD _CONSTEXPR20_CONTAINER _Ty& operator[](const size_type _Pos) noexcept /* strengthened */ {

$LN12:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 1563 :         auto& _My_data = _Mypair._Myval2;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR _My_data$[rsp], rax
$LN4@operator:

; 1564 : #if _CONTAINER_DEBUG_LEVEL > 0
; 1565 :         _STL_VERIFY(

	mov	rax, QWORD PTR _My_data$[rsp]
	mov	rcx, QWORD PTR _My_data$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	rax, QWORD PTR [rax+16]
	sub	rax, rcx
	sar	rax, 2
	cmp	QWORD PTR _Pos$[rsp], rax
	jae	SHORT $LN7@operator
	jmp	SHORT $LN9@operator
$LN7@operator:
	lea	rax, OFFSET FLAT:??_C@_0BO@PFKOHNJC@vector?5subscript?5out?5of?5range@
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:??_C@_02DKCKIIND@?$CFs@
	mov	QWORD PTR [rsp+32], rax
	xor	r9d, r9d
	mov	r8d, 1566				; 0000061eH
	lea	rdx, OFFSET FLAT:??_C@_0GH@IJJCCHP@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
	mov	ecx, 2
	call	QWORD PTR __imp__CrtDbgReport
	cmp	eax, 1
	jne	SHORT $LN11@operator
	int	3
	xor	eax, eax
$LN11@operator:
	mov	QWORD PTR [rsp+32], 0
	mov	r9d, 1566				; 0000061eH
	lea	r8, OFFSET FLAT:??_C@_1MO@MBPFCBOF@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
	lea	rdx, OFFSET FLAT:??_C@_1JG@ILDNFCDK@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAu?$AAn?$AAs@
	lea	rcx, OFFSET FLAT:??_C@_1EA@LEKOKFNB@?$AA?$CC?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi@
	call	QWORD PTR __imp__invalid_parameter
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN7@operator
$LN9@operator:
	xor	eax, eax
	test	eax, eax
	jne	$LN4@operator

; 1566 :             _Pos < static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst), "vector subscript out of range");
; 1567 : #endif // _CONTAINER_DEBUG_LEVEL > 0
; 1568 : 
; 1569 :         return _My_data._Myfirst[_Pos];

	mov	rax, QWORD PTR _My_data$[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	rcx, QWORD PTR _Pos$[rsp]
	lea	rax, QWORD PTR [rax+rcx*4]

; 1570 :     }

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??A?$vector@IV?$allocator@I@std@@@std@@QEAAAEAI_K@Z ENDP ; std::vector<unsigned int,std::allocator<unsigned int> >::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\vector
;	COMDAT ?capacity@?$vector@IV?$allocator@I@std@@@std@@QEBA_KXZ
_TEXT	SEGMENT
_My_data$ = 0
this$ = 32
?capacity@?$vector@IV?$allocator@I@std@@@std@@QEBA_KXZ PROC ; std::vector<unsigned int,std::allocator<unsigned int> >::capacity, COMDAT

; 1557 :     _NODISCARD _CONSTEXPR20_CONTAINER size_type capacity() const noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 16

; 1558 :         auto& _My_data = _Mypair._Myval2;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR _My_data$[rsp], rax

; 1559 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

	mov	rax, QWORD PTR _My_data$[rsp]
	mov	rcx, QWORD PTR _My_data$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	rax, QWORD PTR [rax+24]
	sub	rax, rcx
	sar	rax, 2

; 1560 :     }

	add	rsp, 16
	pop	rdi
	ret	0
?capacity@?$vector@IV?$allocator@I@std@@@std@@QEBA_KXZ ENDP ; std::vector<unsigned int,std::allocator<unsigned int> >::capacity
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\vector
;	COMDAT ?max_size@?$vector@IV?$allocator@I@std@@@std@@QEBA_KXZ
_TEXT	SEGMENT
$T1 = 32
$T2 = 40
this$ = 64
?max_size@?$vector@IV?$allocator@I@std@@@std@@QEBA_KXZ PROC ; std::vector<unsigned int,std::allocator<unsigned int> >::max_size, COMDAT

; 1552 :     _NODISCARD _CONSTEXPR20_CONTAINER size_type max_size() const noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 1553 :         return (_STD min)(

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Getal@?$vector@IV?$allocator@I@std@@@std@@AEBAAEBV?$allocator@I@2@XZ ; std::vector<unsigned int,std::allocator<unsigned int> >::_Getal
	mov	rcx, rax
	call	?max_size@?$_Default_allocator_traits@V?$allocator@I@std@@@std@@SA_KAEBV?$allocator@I@2@@Z ; std::_Default_allocator_traits<std::allocator<unsigned int> >::max_size
	mov	QWORD PTR $T1[rsp], rax
	call	?max@?$numeric_limits@_J@std@@SA_JXZ	; std::numeric_limits<__int64>::max
	mov	QWORD PTR $T2[rsp], rax
	lea	rdx, QWORD PTR $T1[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$min@_K@std@@YAAEB_KAEB_K0@Z		; std::min<unsigned __int64>
	mov	rax, QWORD PTR [rax]

; 1554 :             static_cast<size_type>((numeric_limits<difference_type>::max)()), _Alty_traits::max_size(_Getal()));
; 1555 :     }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?max_size@?$vector@IV?$allocator@I@std@@@std@@QEBA_KXZ ENDP ; std::vector<unsigned int,std::allocator<unsigned int> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\vector
;	COMDAT ?size@?$vector@IV?$allocator@I@std@@@std@@QEBA_KXZ
_TEXT	SEGMENT
_My_data$ = 0
this$ = 32
?size@?$vector@IV?$allocator@I@std@@@std@@QEBA_KXZ PROC	; std::vector<unsigned int,std::allocator<unsigned int> >::size, COMDAT

; 1547 :     _NODISCARD _CONSTEXPR20_CONTAINER size_type size() const noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 16

; 1548 :         auto& _My_data = _Mypair._Myval2;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR _My_data$[rsp], rax

; 1549 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

	mov	rax, QWORD PTR _My_data$[rsp]
	mov	rcx, QWORD PTR _My_data$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	rax, QWORD PTR [rax+16]
	sub	rax, rcx
	sar	rax, 2

; 1550 :     }

	add	rsp, 16
	pop	rdi
	ret	0
?size@?$vector@IV?$allocator@I@std@@@std@@QEBA_KXZ ENDP	; std::vector<unsigned int,std::allocator<unsigned int> >::size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\vector
;	COMDAT ?resize@?$vector@IV?$allocator@I@std@@@std@@QEAAX_K@Z
_TEXT	SEGMENT
$T1 = 32
this$ = 64
_Newsize$ = 72
?resize@?$vector@IV?$allocator@I@std@@@std@@QEAAX_K@Z PROC ; std::vector<unsigned int,std::allocator<unsigned int> >::resize, COMDAT

; 1288 :     _CONSTEXPR20_CONTAINER void resize(_CRT_GUARDOVERFLOW const size_type _Newsize) {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 1289 :         // trim or append value-initialized elements, provide strong guarantee
; 1290 :         _Resize(_Newsize, _Value_init_tag{});

	lea	r8, QWORD PTR $T1[rsp]
	mov	rdx, QWORD PTR _Newsize$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	??$_Resize@U_Value_init_tag@std@@@?$vector@IV?$allocator@I@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z ; std::vector<unsigned int,std::allocator<unsigned int> >::_Resize<std::_Value_init_tag>

; 1291 :     }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?resize@?$vector@IV?$allocator@I@std@@@std@@QEAAX_K@Z ENDP ; std::vector<unsigned int,std::allocator<unsigned int> >::resize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\vector
;	COMDAT ??1?$vector@IV?$allocator@I@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
_Alproxy$ = 32
$S1$ = 52
$T4 = 68
this$ = 96
??1?$vector@IV?$allocator@I@std@@@std@@QEAA@XZ PROC	; std::vector<unsigned int,std::allocator<unsigned int> >::~vector<unsigned int,std::allocator<unsigned int> >, COMDAT

; 711  :     _CONSTEXPR20_CONTAINER ~vector() noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+96]

; 712  :         _Tidy();

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Tidy@?$vector@IV?$allocator@I@std@@@std@@AEAAXXZ ; std::vector<unsigned int,std::allocator<unsigned int> >::_Tidy

; 713  : #if _ITERATOR_DEBUG_LEVEL != 0
; 714  :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Getal());

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Getal@?$vector@IV?$allocator@I@std@@@std@@AEAAAEAV?$allocator@I@2@XZ ; std::vector<unsigned int,std::allocator<unsigned int> >::_Getal
	mov	rdx, rax
	lea	rcx, QWORD PTR $S1$[rsp]
	call	??$?0I@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@I@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><unsigned int>
	lea	rax, QWORD PTR $S1$[rsp]
	mov	QWORD PTR _Alproxy$[rsp], rax

; 715  :         _Delete_plain_internal(_Alproxy, _STD exchange(_Mypair._Myval2._Myproxy, nullptr));

	mov	QWORD PTR $T4[rsp], 0
	mov	rax, QWORD PTR this$[rsp]
	lea	rdx, QWORD PTR $T4[rsp]
	mov	rcx, rax
	call	??$exchange@PEAU_Container_proxy@std@@$$T@std@@YAPEAU_Container_proxy@0@AEAPEAU10@$$QEA$$T@Z ; std::exchange<std::_Container_proxy *,std::nullptr_t>
	mov	rdx, rax
	mov	rcx, QWORD PTR _Alproxy$[rsp]
	call	??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >

; 716  : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 717  :     }

	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??1?$vector@IV?$allocator@I@std@@@std@@QEAA@XZ$rtcFrameData
	call	_RTC_CheckStackVars
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??1?$vector@IV?$allocator@I@std@@@std@@QEAA@XZ ENDP	; std::vector<unsigned int,std::allocator<unsigned int> >::~vector<unsigned int,std::allocator<unsigned int> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\vector
;	COMDAT ??0?$vector@IV?$allocator@I@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 32
$T2 = 33
this$ = 64
??0?$vector@IV?$allocator@I@std@@@std@@QEAA@XZ PROC	; std::vector<unsigned int,std::allocator<unsigned int> >::vector<unsigned int,std::allocator<unsigned int> >, COMDAT

; 476  :         : _Mypair(_Zero_then_variadic_args_t{}) {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rax, QWORD PTR this$[rsp]
	movzx	edx, BYTE PTR $T1[rsp]
	mov	rcx, rax
	call	??$?0$$V@?$_Compressed_pair@V?$allocator@I@std@@V?$_Vector_val@U?$_Simple_types@I@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<unsigned int>,std::_Vector_val<std::_Simple_types<unsigned int> >,1>::_Compressed_pair<std::allocator<unsigned int>,std::_Vector_val<std::_Simple_types<unsigned int> >,1><>

; 477  :         _Mypair._Myval2._Alloc_proxy(_GET_PROXY_ALLOCATOR(_Alty, _Getal()));

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Getal@?$vector@IV?$allocator@I@std@@@std@@AEAAAEAV?$allocator@I@2@XZ ; std::vector<unsigned int,std::allocator<unsigned int> >::_Getal
	mov	rdx, rax
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0I@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@I@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><unsigned int>
	mov	rcx, QWORD PTR this$[rsp]
	mov	rdx, rax
	call	??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QEAAX$$QEAV?$allocator@U_Container_proxy@std@@@1@@Z ; std::_Container_base12::_Alloc_proxy<std::allocator<std::_Container_proxy> >

; 478  :     }

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??0?$vector@IV?$allocator@I@std@@@std@@QEAA@XZ ENDP	; std::vector<unsigned int,std::allocator<unsigned int> >::vector<unsigned int,std::allocator<unsigned int> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xmemory
;	COMDAT ?max_size@?$_Default_allocator_traits@V?$allocator@I@std@@@std@@SA_KAEBV?$allocator@I@2@@Z
_TEXT	SEGMENT
__formal$ = 16
?max_size@?$_Default_allocator_traits@V?$allocator@I@std@@@std@@SA_KAEBV?$allocator@I@2@@Z PROC ; std::_Default_allocator_traits<std::allocator<unsigned int> >::max_size, COMDAT

; 727  :     _NODISCARD static _CONSTEXPR20_DYNALLOC size_type max_size(const _Alloc&) noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 728  :         return static_cast<size_t>(-1) / sizeof(value_type);

	mov	rax, 4611686018427387903		; 3fffffffffffffffH

; 729  :     }

	pop	rdi
	ret	0
?max_size@?$_Default_allocator_traits@V?$allocator@I@std@@@std@@SA_KAEBV?$allocator@I@2@@Z ENDP ; std::_Default_allocator_traits<std::allocator<unsigned int> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xmemory
;	COMDAT ?allocate@?$allocator@I@std@@QEAAPEAI_K@Z
_TEXT	SEGMENT
this$ = 48
_Count$ = 56
?allocate@?$allocator@I@std@@QEAAPEAI_K@Z PROC		; std::allocator<unsigned int>::allocate, COMDAT

; 838  :     _NODISCARD _CONSTEXPR20_DYNALLOC __declspec(allocator) _Ty* allocate(_CRT_GUARDOVERFLOW const size_t _Count) {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 839  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

	mov	rcx, QWORD PTR _Count$[rsp]
	call	??$_Get_size_of_n@$03@std@@YA_K_K@Z	; std::_Get_size_of_n<4>
	mov	rcx, rax
	call	??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z ; std::_Allocate<16,std::_Default_allocate_traits,0>

; 840  :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?allocate@?$allocator@I@std@@QEAAPEAI_K@Z ENDP		; std::allocator<unsigned int>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xmemory
;	COMDAT ?deallocate@?$allocator@I@std@@QEAAXQEAI_K@Z
_TEXT	SEGMENT
this$ = 48
_Ptr$ = 56
_Count$ = 64
?deallocate@?$allocator@I@std@@QEAAXQEAI_K@Z PROC	; std::allocator<unsigned int>::deallocate, COMDAT

; 833  :     _CONSTEXPR20_DYNALLOC void deallocate(_Ty* const _Ptr, const size_t _Count) {

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 834  :         // no overflow check on the following multiply; we assume _Allocate did that check
; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

	mov	rax, QWORD PTR _Count$[rsp]
	shl	rax, 2
	mov	rdx, rax
	mov	rcx, QWORD PTR _Ptr$[rsp]
	call	??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z ; std::_Deallocate<16,0>

; 836  :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?deallocate@?$allocator@I@std@@QEAAXQEAI_K@Z ENDP	; std::allocator<unsigned int>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xmemory
;	COMDAT ??0?$allocator@I@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 16
??0?$allocator@I@std@@QEAA@XZ PROC			; std::allocator<unsigned int>::allocator<unsigned int>, COMDAT

; 825  :     constexpr allocator() noexcept {}

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$allocator@I@std@@QEAA@XZ ENDP			; std::allocator<unsigned int>::allocator<unsigned int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\s4002675\Downloads\glm-0.9.8.5\glm\test\gtc\gtc_round.cpp
_TEXT	SEGMENT
Error$ = 32
v$ = 56
Timestramp0$ = 100
i$4 = 104
n$5 = 108
Timestramp1$ = 112
i$6 = 116
n$7 = 120
Timestramp2$ = 124
$T8 = 128
tv79 = 132
tv91 = 136
?perf@ceilPowerOfTwo_advanced@@YAHXZ PROC		; ceilPowerOfTwo_advanced::perf

; 232  : 	{

$LN10:
	push	rdi
	sub	rsp, 144				; 00000090H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 28
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 233  : 		int Error(0);

	mov	DWORD PTR Error$[rsp], 0

; 234  : 
; 235  : 		std::vector<glm::uint> v;

	lea	rcx, QWORD PTR v$[rsp]
	call	??0?$vector@IV?$allocator@I@std@@@std@@QEAA@XZ ; std::vector<unsigned int,std::allocator<unsigned int> >::vector<unsigned int,std::allocator<unsigned int> >
	npad	1

; 236  : 		v.resize(100000000);

	mov	edx, 100000000				; 05f5e100H
	lea	rcx, QWORD PTR v$[rsp]
	call	?resize@?$vector@IV?$allocator@I@std@@@std@@QEAAX_K@Z ; std::vector<unsigned int,std::allocator<unsigned int> >::resize

; 237  : 
; 238  : 		std::clock_t Timestramp0 = std::clock();

	call	QWORD PTR __imp_clock
	mov	DWORD PTR Timestramp0$[rsp], eax

; 239  : 
; 240  : 		for(glm::uint32 i = 0, n = static_cast<glm::uint>(v.size()); i < n; ++i)

	mov	DWORD PTR i$4[rsp], 0
	lea	rcx, QWORD PTR v$[rsp]
	call	?size@?$vector@IV?$allocator@I@std@@@std@@QEBA_KXZ ; std::vector<unsigned int,std::allocator<unsigned int> >::size
	mov	DWORD PTR n$5[rsp], eax
	jmp	SHORT $LN4@perf
$LN2@perf:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN4@perf:
	mov	eax, DWORD PTR n$5[rsp]
	cmp	DWORD PTR i$4[rsp], eax
	jae	SHORT $LN3@perf

; 241  : 			v[i] = ceilPowerOfTwo_loop(i);

	mov	ecx, DWORD PTR i$4[rsp]
	call	??$ceilPowerOfTwo_loop@I@ceilPowerOfTwo_advanced@@YAII@Z ; ceilPowerOfTwo_advanced::ceilPowerOfTwo_loop<unsigned int>
	mov	DWORD PTR tv79[rsp], eax
	mov	ecx, DWORD PTR i$4[rsp]
	mov	edx, ecx
	lea	rcx, QWORD PTR v$[rsp]
	call	??A?$vector@IV?$allocator@I@std@@@std@@QEAAAEAI_K@Z ; std::vector<unsigned int,std::allocator<unsigned int> >::operator[]
	mov	ecx, DWORD PTR tv79[rsp]
	mov	DWORD PTR [rax], ecx
	jmp	SHORT $LN2@perf
$LN3@perf:

; 242  : 
; 243  : 		std::clock_t Timestramp1 = std::clock();

	call	QWORD PTR __imp_clock
	mov	DWORD PTR Timestramp1$[rsp], eax

; 244  : 
; 245  : 		for(glm::uint32 i = 0, n = static_cast<glm::uint>(v.size()); i < n; ++i)

	mov	DWORD PTR i$6[rsp], 0
	lea	rcx, QWORD PTR v$[rsp]
	call	?size@?$vector@IV?$allocator@I@std@@@std@@QEBA_KXZ ; std::vector<unsigned int,std::allocator<unsigned int> >::size
	mov	DWORD PTR n$7[rsp], eax
	jmp	SHORT $LN7@perf
$LN5@perf:
	mov	eax, DWORD PTR i$6[rsp]
	inc	eax
	mov	DWORD PTR i$6[rsp], eax
$LN7@perf:
	mov	eax, DWORD PTR n$7[rsp]
	cmp	DWORD PTR i$6[rsp], eax
	jae	SHORT $LN6@perf

; 246  : 			v[i] = glm::ceilPowerOfTwo(i);

	mov	ecx, DWORD PTR i$6[rsp]
	call	??$ceilPowerOfTwo@I@glm@@YAII@Z		; glm::ceilPowerOfTwo<unsigned int>
	mov	DWORD PTR tv91[rsp], eax
	mov	ecx, DWORD PTR i$6[rsp]
	mov	edx, ecx
	lea	rcx, QWORD PTR v$[rsp]
	call	??A?$vector@IV?$allocator@I@std@@@std@@QEAAAEAI_K@Z ; std::vector<unsigned int,std::allocator<unsigned int> >::operator[]
	mov	ecx, DWORD PTR tv91[rsp]
	mov	DWORD PTR [rax], ecx
	jmp	SHORT $LN5@perf
$LN6@perf:

; 247  : 
; 248  : 		std::clock_t Timestramp2 = std::clock();

	call	QWORD PTR __imp_clock
	mov	DWORD PTR Timestramp2$[rsp], eax

; 249  : 
; 250  : 		std::printf("ceilPowerOfTwo_loop: %d clocks\n", static_cast<unsigned int>(Timestramp1 - Timestramp0));

	mov	eax, DWORD PTR Timestramp0$[rsp]
	mov	ecx, DWORD PTR Timestramp1$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	edx, eax
	lea	rcx, OFFSET FLAT:$SG55657
	call	printf

; 251  : 		std::printf("glm::ceilPowerOfTwo: %d clocks\n", static_cast<unsigned int>(Timestramp2 - Timestramp1));

	mov	eax, DWORD PTR Timestramp1$[rsp]
	mov	ecx, DWORD PTR Timestramp2$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	edx, eax
	lea	rcx, OFFSET FLAT:$SG55658
	call	printf

; 252  : 
; 253  : 		return Error;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR $T8[rsp], eax
	lea	rcx, QWORD PTR v$[rsp]
	call	??1?$vector@IV?$allocator@I@std@@@std@@QEAA@XZ ; std::vector<unsigned int,std::allocator<unsigned int> >::~vector<unsigned int,std::allocator<unsigned int> >
	mov	eax, DWORD PTR $T8[rsp]

; 254  : 	}

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?perf@ceilPowerOfTwo_advanced@@YAHXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	add	rsp, 144				; 00000090H
	pop	rdi
	ret	0
?perf@ceilPowerOfTwo_advanced@@YAHXZ ENDP		; ceilPowerOfTwo_advanced::perf
_TEXT	ENDS
text$x	SEGMENT
Error$ = 32
v$ = 56
Timestramp0$ = 100
i$4 = 104
n$5 = 108
Timestramp1$ = 112
i$6 = 116
n$7 = 120
Timestramp2$ = 124
$T8 = 128
tv79 = 132
tv91 = 136
?dtor$0@?0??perf@ceilPowerOfTwo_advanced@@YAHXZ@4HA PROC ; `ceilPowerOfTwo_advanced::perf'::`1'::dtor$0
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	lea	rcx, QWORD PTR v$[rbp]
	call	??1?$vector@IV?$allocator@I@std@@@std@@QEAA@XZ ; std::vector<unsigned int,std::allocator<unsigned int> >::~vector<unsigned int,std::allocator<unsigned int> >
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$0@?0??perf@ceilPowerOfTwo_advanced@@YAHXZ@4HA ENDP ; `ceilPowerOfTwo_advanced::perf'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
text$x	SEGMENT
Error$ = 32
v$ = 56
Timestramp0$ = 100
i$4 = 104
n$5 = 108
Timestramp1$ = 112
i$6 = 116
n$7 = 120
Timestramp2$ = 124
$T8 = 128
tv79 = 132
tv91 = 136
?dtor$0@?0??perf@ceilPowerOfTwo_advanced@@YAHXZ@4HA PROC ; `ceilPowerOfTwo_advanced::perf'::`1'::dtor$0
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	lea	rcx, QWORD PTR v$[rbp]
	call	??1?$vector@IV?$allocator@I@std@@@std@@QEAA@XZ ; std::vector<unsigned int,std::allocator<unsigned int> >::~vector<unsigned int,std::allocator<unsigned int> >
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$0@?0??perf@ceilPowerOfTwo_advanced@@YAHXZ@4HA ENDP ; `ceilPowerOfTwo_advanced::perf'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\s4002675\Downloads\glm-0.9.8.5\glm\glm\gtc\round.inl
;	COMDAT ??$ceilPowerOfTwo@I@glm@@YAII@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 36
value$ = 64
??$ceilPowerOfTwo@I@glm@@YAII@Z PROC			; glm::ceilPowerOfTwo<unsigned int>, COMDAT

; 234  : 	{

$LN3:
	mov	DWORD PTR [rsp+8], ecx
	push	rdi
	sub	rsp, 48					; 00000030H

; 235  : 		return detail::compute_ceilPowerOfTwo<genType, defaultp, tvec1, std::numeric_limits<genType>::is_signed>::call(tvec1<genType, defaultp>(value)).x;

	mov	edx, DWORD PTR value$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??0?$tvec1@I$0A@@glm@@QEAA@I@Z		; glm::tvec1<unsigned int,0>::tvec1<unsigned int,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR $T2[rsp]
	call	?call@?$compute_ceilPowerOfTwo@I$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@I$0A@@3@AEBU43@@Z ; glm::detail::compute_ceilPowerOfTwo<unsigned int,0,glm::tvec1,0>::call
	mov	eax, DWORD PTR [rax]

; 236  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$ceilPowerOfTwo@I@glm@@YAII@Z ENDP			; glm::ceilPowerOfTwo<unsigned int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\s4002675\Downloads\glm-0.9.8.5\glm\test\gtc\gtc_round.cpp
_TEXT	SEGMENT
Data$ = 48
Error$ = 132
i$4 = 136
n$5 = 144
Result$6 = 152
tv75 = 168
__$ArrayPad$ = 176
?test_uint32@ceilPowerOfTwo_advanced@@YAHXZ PROC	; ceilPowerOfTwo_advanced::test_uint32

; 205  : 	{

$LN8:
	push	rdi
	sub	rsp, 192				; 000000c0H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 40					; 00000028H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 206  : 		type<glm::uint32> const Data[] =
; 207  : 		{
; 208  : 			{0x00000001, 0x00000001},

	mov	DWORD PTR Data$[rsp], 1
	mov	DWORD PTR Data$[rsp+4], 1

; 209  : 			{0x00000002, 0x00000002},

	mov	DWORD PTR Data$[rsp+8], 2
	mov	DWORD PTR Data$[rsp+12], 2

; 210  : 			{0x00000004, 0x00000004},

	mov	DWORD PTR Data$[rsp+16], 4
	mov	DWORD PTR Data$[rsp+20], 4

; 211  : 			{0x00000007, 0x00000008},

	mov	DWORD PTR Data$[rsp+24], 7
	mov	DWORD PTR Data$[rsp+28], 8

; 212  : 			{0x0000ffff, 0x00010000},

	mov	DWORD PTR Data$[rsp+32], 65535		; 0000ffffH
	mov	DWORD PTR Data$[rsp+36], 65536		; 00010000H

; 213  : 			{0x0000fff0, 0x00010000},

	mov	DWORD PTR Data$[rsp+40], 65520		; 0000fff0H
	mov	DWORD PTR Data$[rsp+44], 65536		; 00010000H

; 214  : 			{0x0000f000, 0x00010000},

	mov	DWORD PTR Data$[rsp+48], 61440		; 0000f000H
	mov	DWORD PTR Data$[rsp+52], 65536		; 00010000H

; 215  : 			{0x80000000, 0x80000000},

	mov	DWORD PTR Data$[rsp+56], -2147483648	; 80000000H
	mov	DWORD PTR Data$[rsp+60], -2147483648	; 80000000H

; 216  : 			{0x00000000, 0x00000000},

	mov	DWORD PTR Data$[rsp+64], 0
	mov	DWORD PTR Data$[rsp+68], 0

; 217  : 			{0x00000003, 0x00000004}

	mov	DWORD PTR Data$[rsp+72], 3
	mov	DWORD PTR Data$[rsp+76], 4

; 218  : 		};
; 219  : 
; 220  : 		int Error(0);

	mov	DWORD PTR Error$[rsp], 0

; 221  : 
; 222  : 		for(std::size_t i = 0, n = sizeof(Data) / sizeof(type<glm::uint32>); i < n; ++i)

	mov	QWORD PTR i$4[rsp], 0
	mov	QWORD PTR n$5[rsp], 10
	jmp	SHORT $LN4@test_uint3
$LN2@test_uint3:
	mov	rax, QWORD PTR i$4[rsp]
	inc	rax
	mov	QWORD PTR i$4[rsp], rax
$LN4@test_uint3:
	mov	rax, QWORD PTR n$5[rsp]
	cmp	QWORD PTR i$4[rsp], rax
	jae	SHORT $LN3@test_uint3

; 223  : 		{
; 224  : 			glm::uint32 Result = glm::ceilPowerOfTwo(Data[i].Value);

	mov	rax, QWORD PTR i$4[rsp]
	mov	ecx, DWORD PTR Data$[rsp+rax*8]
	call	??$ceilPowerOfTwo@I@glm@@YAII@Z		; glm::ceilPowerOfTwo<unsigned int>
	mov	DWORD PTR Result$6[rsp], eax

; 225  : 			Error += Data[i].Return == Result ? 0 : 1;

	mov	rax, QWORD PTR i$4[rsp]
	mov	ecx, DWORD PTR Result$6[rsp]
	cmp	DWORD PTR Data$[rsp+rax*8+4], ecx
	jne	SHORT $LN6@test_uint3
	mov	DWORD PTR tv75[rsp], 0
	jmp	SHORT $LN7@test_uint3
$LN6@test_uint3:
	mov	DWORD PTR tv75[rsp], 1
$LN7@test_uint3:
	mov	eax, DWORD PTR tv75[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 226  : 		}

	jmp	$LN2@test_uint3
$LN3@test_uint3:

; 227  : 
; 228  : 		return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 229  : 	}

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?test_uint32@ceilPowerOfTwo_advanced@@YAHXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 192				; 000000c0H
	pop	rdi
	ret	0
?test_uint32@ceilPowerOfTwo_advanced@@YAHXZ ENDP	; ceilPowerOfTwo_advanced::test_uint32
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\s4002675\Downloads\glm-0.9.8.5\glm\glm\gtc\round.inl
;	COMDAT ??$ceilPowerOfTwo@H@glm@@YAHH@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 36
value$ = 64
??$ceilPowerOfTwo@H@glm@@YAHH@Z PROC			; glm::ceilPowerOfTwo<int>, COMDAT

; 234  : 	{

$LN3:
	mov	DWORD PTR [rsp+8], ecx
	push	rdi
	sub	rsp, 48					; 00000030H

; 235  : 		return detail::compute_ceilPowerOfTwo<genType, defaultp, tvec1, std::numeric_limits<genType>::is_signed>::call(tvec1<genType, defaultp>(value)).x;

	mov	edx, DWORD PTR value$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??0?$tvec1@H$0A@@glm@@QEAA@H@Z		; glm::tvec1<int,0>::tvec1<int,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR $T2[rsp]
	call	?call@?$compute_ceilPowerOfTwo@H$0A@Utvec1@glm@@$00@detail@glm@@SA?AU?$tvec1@H$0A@@3@AEBU43@@Z ; glm::detail::compute_ceilPowerOfTwo<int,0,glm::tvec1,1>::call
	mov	eax, DWORD PTR [rax]

; 236  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$ceilPowerOfTwo@H@glm@@YAHH@Z ENDP			; glm::ceilPowerOfTwo<int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\s4002675\Downloads\glm-0.9.8.5\glm\test\gtc\gtc_round.cpp
_TEXT	SEGMENT
Data$ = 48
Error$ = 148
i$4 = 152
n$5 = 160
Result$6 = 168
tv75 = 184
__$ArrayPad$ = 192
?test_int32@ceilPowerOfTwo_advanced@@YAHXZ PROC		; ceilPowerOfTwo_advanced::test_int32

; 176  : 	{

$LN8:
	push	rdi
	sub	rsp, 208				; 000000d0H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 44					; 0000002cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 177  : 		type<glm::int32> const Data[] =
; 178  : 		{
; 179  : 			{0x0000ffff, 0x00010000},

	mov	DWORD PTR Data$[rsp], 65535		; 0000ffffH
	mov	DWORD PTR Data$[rsp+4], 65536		; 00010000H

; 180  : 			{-3, -4},

	mov	DWORD PTR Data$[rsp+8], -3
	mov	DWORD PTR Data$[rsp+12], -4

; 181  : 			{-8, -8},

	mov	DWORD PTR Data$[rsp+16], -8
	mov	DWORD PTR Data$[rsp+20], -8

; 182  : 			{0x00000001, 0x00000001},

	mov	DWORD PTR Data$[rsp+24], 1
	mov	DWORD PTR Data$[rsp+28], 1

; 183  : 			{0x00000002, 0x00000002},

	mov	DWORD PTR Data$[rsp+32], 2
	mov	DWORD PTR Data$[rsp+36], 2

; 184  : 			{0x00000004, 0x00000004},

	mov	DWORD PTR Data$[rsp+40], 4
	mov	DWORD PTR Data$[rsp+44], 4

; 185  : 			{0x00000007, 0x00000008},

	mov	DWORD PTR Data$[rsp+48], 7
	mov	DWORD PTR Data$[rsp+52], 8

; 186  : 			{0x0000fff0, 0x00010000},

	mov	DWORD PTR Data$[rsp+56], 65520		; 0000fff0H
	mov	DWORD PTR Data$[rsp+60], 65536		; 00010000H

; 187  : 			{0x0000f000, 0x00010000},

	mov	DWORD PTR Data$[rsp+64], 61440		; 0000f000H
	mov	DWORD PTR Data$[rsp+68], 65536		; 00010000H

; 188  : 			{0x08000000, 0x08000000},

	mov	DWORD PTR Data$[rsp+72], 134217728	; 08000000H
	mov	DWORD PTR Data$[rsp+76], 134217728	; 08000000H

; 189  : 			{0x00000000, 0x00000000},

	mov	DWORD PTR Data$[rsp+80], 0
	mov	DWORD PTR Data$[rsp+84], 0

; 190  : 			{0x00000003, 0x00000004}

	mov	DWORD PTR Data$[rsp+88], 3
	mov	DWORD PTR Data$[rsp+92], 4

; 191  : 		};
; 192  : 
; 193  : 		int Error(0);

	mov	DWORD PTR Error$[rsp], 0

; 194  : 
; 195  : 		for(std::size_t i = 0, n = sizeof(Data) / sizeof(type<glm::int32>); i < n; ++i)

	mov	QWORD PTR i$4[rsp], 0
	mov	QWORD PTR n$5[rsp], 12
	jmp	SHORT $LN4@test_int32
$LN2@test_int32:
	mov	rax, QWORD PTR i$4[rsp]
	inc	rax
	mov	QWORD PTR i$4[rsp], rax
$LN4@test_int32:
	mov	rax, QWORD PTR n$5[rsp]
	cmp	QWORD PTR i$4[rsp], rax
	jae	SHORT $LN3@test_int32

; 196  : 		{
; 197  : 			glm::int32 Result = glm::ceilPowerOfTwo(Data[i].Value);

	mov	rax, QWORD PTR i$4[rsp]
	mov	ecx, DWORD PTR Data$[rsp+rax*8]
	call	??$ceilPowerOfTwo@H@glm@@YAHH@Z		; glm::ceilPowerOfTwo<int>
	mov	DWORD PTR Result$6[rsp], eax

; 198  : 			Error += Data[i].Return == Result ? 0 : 1;

	mov	rax, QWORD PTR i$4[rsp]
	mov	ecx, DWORD PTR Result$6[rsp]
	cmp	DWORD PTR Data$[rsp+rax*8+4], ecx
	jne	SHORT $LN6@test_int32
	mov	DWORD PTR tv75[rsp], 0
	jmp	SHORT $LN7@test_int32
$LN6@test_int32:
	mov	DWORD PTR tv75[rsp], 1
$LN7@test_int32:
	mov	eax, DWORD PTR tv75[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 199  : 		}

	jmp	$LN2@test_int32
$LN3@test_int32:

; 200  : 
; 201  : 		return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 202  : 	}

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?test_int32@ceilPowerOfTwo_advanced@@YAHXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 208				; 000000d0H
	pop	rdi
	ret	0
?test_int32@ceilPowerOfTwo_advanced@@YAHXZ ENDP		; ceilPowerOfTwo_advanced::test_int32
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\s4002675\Downloads\glm-0.9.8.5\glm\test\gtc\gtc_round.cpp
_TEXT	SEGMENT
Error$ = 32
?test@isPowerOfTwo@@YAHXZ PROC				; isPowerOfTwo::test

; 135  : 	{

$LN3:
	push	rdi
	sub	rsp, 48					; 00000030H

; 136  : 		int Error(0);

	mov	DWORD PTR Error$[rsp], 0

; 137  : 
; 138  : 		Error += test_int16();

	call	?test_int16@isPowerOfTwo@@YAHXZ		; isPowerOfTwo::test_int16
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 139  : 		Error += test_uint16();

	call	?test_uint16@isPowerOfTwo@@YAHXZ	; isPowerOfTwo::test_uint16
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 140  : 		Error += test_int32();

	call	?test_int32@isPowerOfTwo@@YAHXZ		; isPowerOfTwo::test_int32
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 141  : 		Error += test_uint32();

	call	?test_uint32@isPowerOfTwo@@YAHXZ	; isPowerOfTwo::test_uint32
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 142  : 
; 143  : 		return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 144  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?test@isPowerOfTwo@@YAHXZ ENDP				; isPowerOfTwo::test
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\s4002675\Downloads\glm-0.9.8.5\glm\glm\gtc\round.inl
;	COMDAT ??$isPowerOfTwo@I@glm@@YA_NI@Z
_TEXT	SEGMENT
Result$ = 32
tv69 = 36
Value$ = 64
??$isPowerOfTwo@I@glm@@YA_NI@Z PROC			; glm::isPowerOfTwo<unsigned int>, COMDAT

; 217  : 	{

$LN5:
	mov	DWORD PTR [rsp+8], ecx
	push	rdi
	sub	rsp, 48					; 00000030H

; 218  : 		genType const Result = glm::abs(Value);

	mov	ecx, DWORD PTR Value$[rsp]
	call	??$abs@I@glm@@YAII@Z			; glm::abs<unsigned int>
	mov	DWORD PTR Result$[rsp], eax

; 219  : 		return !(Result & (Result - 1));

	mov	eax, DWORD PTR Result$[rsp]
	dec	eax
	mov	ecx, DWORD PTR Result$[rsp]
	and	ecx, eax
	mov	eax, ecx
	test	eax, eax
	jne	SHORT $LN3@isPowerOfT
	mov	DWORD PTR tv69[rsp], 1
	jmp	SHORT $LN4@isPowerOfT
$LN3@isPowerOfT:
	mov	DWORD PTR tv69[rsp], 0
$LN4@isPowerOfT:
	movzx	eax, BYTE PTR tv69[rsp]

; 220  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$isPowerOfTwo@I@glm@@YA_NI@Z ENDP			; glm::isPowerOfTwo<unsigned int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\s4002675\Downloads\glm-0.9.8.5\glm\test\gtc\gtc_round.cpp
_TEXT	SEGMENT
Data$ = 40
Error$ = 100
i$4 = 104
n$5 = 112
Result$6 = 120
tv77 = 136
__$ArrayPad$ = 144
?test_uint32@isPowerOfTwo@@YAHXZ PROC			; isPowerOfTwo::test_uint32

; 112  : 	{

$LN8:
	push	rdi
	sub	rsp, 160				; 000000a0H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 32					; 00000020H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 113  : 		type<glm::uint> const Data[] =
; 114  : 		{
; 115  : 			{0x00000001, true},

	mov	DWORD PTR Data$[rsp], 1
	mov	BYTE PTR Data$[rsp+4], 1

; 116  : 			{0x00000002, true},

	mov	DWORD PTR Data$[rsp+8], 2
	mov	BYTE PTR Data$[rsp+12], 1

; 117  : 			{0x00000004, true},

	mov	DWORD PTR Data$[rsp+16], 4
	mov	BYTE PTR Data$[rsp+20], 1

; 118  : 			{0x80000000, true},

	mov	DWORD PTR Data$[rsp+24], -2147483648	; 80000000H
	mov	BYTE PTR Data$[rsp+28], 1

; 119  : 			{0x00000000, true},

	mov	DWORD PTR Data$[rsp+32], 0
	mov	BYTE PTR Data$[rsp+36], 1

; 120  : 			{0x00000003, false}

	mov	DWORD PTR Data$[rsp+40], 3
	mov	BYTE PTR Data$[rsp+44], 0

; 121  : 		};
; 122  : 
; 123  : 		int Error(0);

	mov	DWORD PTR Error$[rsp], 0

; 124  : 
; 125  : 		for(std::size_t i = 0, n = sizeof(Data) / sizeof(type<glm::uint>); i < n; ++i)

	mov	QWORD PTR i$4[rsp], 0
	mov	QWORD PTR n$5[rsp], 6
	jmp	SHORT $LN4@test_uint3
$LN2@test_uint3:
	mov	rax, QWORD PTR i$4[rsp]
	inc	rax
	mov	QWORD PTR i$4[rsp], rax
$LN4@test_uint3:
	mov	rax, QWORD PTR n$5[rsp]
	cmp	QWORD PTR i$4[rsp], rax
	jae	SHORT $LN3@test_uint3

; 126  : 		{
; 127  : 			bool Result = glm::isPowerOfTwo(Data[i].Value);

	mov	rax, QWORD PTR i$4[rsp]
	mov	ecx, DWORD PTR Data$[rsp+rax*8]
	call	??$isPowerOfTwo@I@glm@@YA_NI@Z		; glm::isPowerOfTwo<unsigned int>
	mov	BYTE PTR Result$6[rsp], al

; 128  : 			Error += Data[i].Return == Result ? 0 : 1;

	mov	rax, QWORD PTR i$4[rsp]
	movzx	eax, BYTE PTR Data$[rsp+rax*8+4]
	movzx	ecx, BYTE PTR Result$6[rsp]
	cmp	eax, ecx
	jne	SHORT $LN6@test_uint3
	mov	DWORD PTR tv77[rsp], 0
	jmp	SHORT $LN7@test_uint3
$LN6@test_uint3:
	mov	DWORD PTR tv77[rsp], 1
$LN7@test_uint3:
	mov	eax, DWORD PTR tv77[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 129  : 		}

	jmp	SHORT $LN2@test_uint3
$LN3@test_uint3:

; 130  : 
; 131  : 		return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 132  : 	}

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?test_uint32@isPowerOfTwo@@YAHXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 160				; 000000a0H
	pop	rdi
	ret	0
?test_uint32@isPowerOfTwo@@YAHXZ ENDP			; isPowerOfTwo::test_uint32
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\s4002675\Downloads\glm-0.9.8.5\glm\glm\detail\func_vector_relational.inl
;	COMDAT ??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z
_TEXT	SEGMENT
Result$ = 32
i$1 = 36
tv74 = 40
v$ = 64
??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z PROC ; glm::all<0,glm::tvec4>, COMDAT

; 86   : 	{

$LN8:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 87   : 		bool Result = true;

	mov	BYTE PTR Result$[rsp], 1

; 88   : 		for(length_t i = 0; i < v.length(); ++i)

	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN4@all
$LN2@all:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN4@all:
	call	?length@?$tvec4@_N$0A@@glm@@SAHXZ	; glm::tvec4<bool,0>::length
	cmp	DWORD PTR i$1[rsp], eax
	jge	SHORT $LN3@all

; 89   : 			Result = Result && v[i];

	movzx	eax, BYTE PTR Result$[rsp]
	test	eax, eax
	je	SHORT $LN6@all
	mov	edx, DWORD PTR i$1[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	call	??A?$tvec4@_N$0A@@glm@@QEBAAEB_NH@Z	; glm::tvec4<bool,0>::operator[]
	movzx	eax, BYTE PTR [rax]
	test	eax, eax
	je	SHORT $LN6@all
	mov	DWORD PTR tv74[rsp], 1
	jmp	SHORT $LN7@all
$LN6@all:
	mov	DWORD PTR tv74[rsp], 0
$LN7@all:
	movzx	eax, BYTE PTR tv74[rsp]
	mov	BYTE PTR Result$[rsp], al
	jmp	SHORT $LN2@all
$LN3@all:

; 90   : 		return Result;

	movzx	eax, BYTE PTR Result$[rsp]

; 91   : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ENDP ; glm::all<0,glm::tvec4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\s4002675\Downloads\glm-0.9.8.5\glm\glm\detail\func_vector_relational.inl
;	COMDAT ??$equal@_N$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
Result$ = 36
i$4 = 52
tv64 = 56
tv82 = 60
tv88 = 64
__$ReturnUdt$ = 96
x$ = 104
y$ = 112
??$equal@_N$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU10@0@Z PROC ; glm::equal<bool,0,glm::tvec4>, COMDAT

; 55   : 	{

$LN9:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+96]

; 56   : 		assert(x.length() == y.length());

	call	?length@?$tvec4@_N$0A@@glm@@SAHXZ	; glm::tvec4<bool,0>::length
	mov	DWORD PTR tv64[rsp], eax
	call	?length@?$tvec4@_N$0A@@glm@@SAHXZ	; glm::tvec4<bool,0>::length
	mov	ecx, DWORD PTR tv64[rsp]
	cmp	ecx, eax
	je	SHORT $LN6@equal
	mov	r8d, 56					; 00000038H
	lea	rdx, OFFSET FLAT:??_C@_1KE@MOONLNIK@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAs?$AA4?$AA0?$AA0?$AA2?$AA6@
	lea	rcx, OFFSET FLAT:??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN6@equal:

; 57   : 
; 58   : 		vecType<bool, P> Result(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??0?$tvec4@_N$0A@@glm@@QEAA@W4ctor@1@@Z	; glm::tvec4<bool,0>::tvec4<bool,0>

; 59   : 		for(length_t i = 0; i < x.length(); ++i)

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@equal
$LN2@equal:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN4@equal:
	call	?length@?$tvec4@_N$0A@@glm@@SAHXZ	; glm::tvec4<bool,0>::length
	cmp	DWORD PTR i$4[rsp], eax
	jge	SHORT $LN3@equal

; 60   : 			Result[i] = x[i] == y[i];

	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	??A?$tvec4@_N$0A@@glm@@QEBAAEB_NH@Z	; glm::tvec4<bool,0>::operator[]
	movzx	eax, BYTE PTR [rax]
	mov	DWORD PTR tv82[rsp], eax
	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	call	??A?$tvec4@_N$0A@@glm@@QEBAAEB_NH@Z	; glm::tvec4<bool,0>::operator[]
	movzx	eax, BYTE PTR [rax]
	mov	ecx, DWORD PTR tv82[rsp]
	cmp	ecx, eax
	jne	SHORT $LN7@equal
	mov	DWORD PTR tv88[rsp], 1
	jmp	SHORT $LN8@equal
$LN7@equal:
	mov	DWORD PTR tv88[rsp], 0
$LN8@equal:
	mov	edx, DWORD PTR i$4[rsp]
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tvec4@_N$0A@@glm@@QEAAAEA_NH@Z	; glm::tvec4<bool,0>::operator[]
	movzx	ecx, BYTE PTR tv88[rsp]
	mov	BYTE PTR [rax], cl
	jmp	SHORT $LN2@equal
$LN3@equal:

; 61   : 		return Result;

	mov	rax, QWORD PTR __$ReturnUdt$[rsp]
	mov	ecx, DWORD PTR Result$[rsp]
	mov	DWORD PTR [rax], ecx
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 62   : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$equal@_N$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU10@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??$equal@_N$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU10@0@Z ENDP ; glm::equal<bool,0,glm::tvec4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\s4002675\Downloads\glm-0.9.8.5\glm\glm\gtc\round.inl
;	COMDAT ??$isPowerOfTwo@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@H$0A@@0@@Z
_TEXT	SEGMENT
Result$ = 40
$T4 = 68
$T5 = 84
$T6 = 100
tv68 = 120
__$ReturnUdt$ = 144
Value$ = 152
??$isPowerOfTwo@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@H$0A@@0@@Z PROC ; glm::isPowerOfTwo<int,0,glm::tvec4>, COMDAT

; 224  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 128				; 00000080H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 24
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+144]

; 225  : 		vecType<T, P> const Result(abs(Value));

	mov	rdx, QWORD PTR Value$[rsp]
	lea	rcx, QWORD PTR Result$[rsp]
	call	??$abs@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@H$0A@@0@AEBU10@@Z ; glm::abs<int,0,glm::tvec4>

; 226  : 		return equal(Result & (Result - 1), vecType<T, P>(0));

	xor	edx, edx
	lea	rcx, QWORD PTR $T4[rsp]
	call	??0?$tvec4@H$0A@@glm@@QEAA@H@Z		; glm::tvec4<int,0>::tvec4<int,0>
	mov	QWORD PTR tv68[rsp], rax
	mov	r8d, 1
	lea	rdx, QWORD PTR Result$[rsp]
	lea	rcx, QWORD PTR $T5[rsp]
	call	??$?GH$0A@@glm@@YA?AU?$tvec4@H$0A@@0@AEBU10@H@Z ; glm::operator-<int,0>
	mov	r8, rax
	lea	rdx, QWORD PTR Result$[rsp]
	lea	rcx, QWORD PTR $T6[rsp]
	call	??$?IH$0A@@glm@@YA?AU?$tvec4@H$0A@@0@AEBU10@0@Z ; glm::operator&<int,0>
	mov	rcx, QWORD PTR tv68[rsp]
	mov	r8, rcx
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$equal@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@H$0A@@0@0@Z ; glm::equal<int,0,glm::tvec4>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 227  : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$isPowerOfTwo@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@H$0A@@0@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 128				; 00000080H
	pop	rdi
	ret	0
??$isPowerOfTwo@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@H$0A@@0@@Z ENDP ; glm::isPowerOfTwo<int,0,glm::tvec4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\s4002675\Downloads\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@H$0A@@glm@@QEAA@HHHH@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
c$ = 40
d$ = 48
??0?$tvec4@H$0A@@glm@@QEAA@HHHH@Z PROC			; glm::tvec4<int,0>::tvec4<int,0>, COMDAT

; 193  : 	{}

$LN3:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 192  : 		: x(a), y(b), z(c), w(d)

	mov	rax, QWORD PTR this$[rsp]
	mov	ecx, DWORD PTR a$[rsp]
	mov	DWORD PTR [rax], ecx
	mov	rax, QWORD PTR this$[rsp]
	mov	ecx, DWORD PTR b$[rsp]
	mov	DWORD PTR [rax+4], ecx
	mov	rax, QWORD PTR this$[rsp]
	mov	ecx, DWORD PTR c$[rsp]
	mov	DWORD PTR [rax+8], ecx
	mov	rax, QWORD PTR this$[rsp]
	mov	ecx, DWORD PTR d$[rsp]
	mov	DWORD PTR [rax+12], ecx

; 193  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec4@H$0A@@glm@@QEAA@HHHH@Z ENDP			; glm::tvec4<int,0>::tvec4<int,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\s4002675\Downloads\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@H$0A@@glm@@QEAA@H@Z
_TEXT	SEGMENT
this$ = 16
scalar$ = 24
??0?$tvec4@H$0A@@glm@@QEAA@H@Z PROC			; glm::tvec4<int,0>::tvec4<int,0>, COMDAT

; 188  : 	{}

$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 187  : 		: x(scalar), y(scalar), z(scalar), w(scalar)

	mov	rax, QWORD PTR this$[rsp]
	mov	ecx, DWORD PTR scalar$[rsp]
	mov	DWORD PTR [rax], ecx
	mov	rax, QWORD PTR this$[rsp]
	mov	ecx, DWORD PTR scalar$[rsp]
	mov	DWORD PTR [rax+4], ecx
	mov	rax, QWORD PTR this$[rsp]
	mov	ecx, DWORD PTR scalar$[rsp]
	mov	DWORD PTR [rax+8], ecx
	mov	rax, QWORD PTR this$[rsp]
	mov	ecx, DWORD PTR scalar$[rsp]
	mov	DWORD PTR [rax+12], ecx

; 188  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec4@H$0A@@glm@@QEAA@H@Z ENDP			; glm::tvec4<int,0>::tvec4<int,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\s4002675\Downloads\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@H$0A@@glm@@QEBAAEBHH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec4@H$0A@@glm@@QEBAAEBHH@Z PROC			; glm::tvec4<int,0>::operator[], COMDAT

; 336  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 337  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec4@H$0A@@glm@@SAHXZ	; glm::tvec4<int,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 337				; 00000151H
	lea	rdx, OFFSET FLAT:??_C@_1IK@NGAJILNN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAs?$AA4?$AA0?$AA0?$AA2?$AA6@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 338  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	lea	rax, QWORD PTR [rcx+rax*4]

; 339  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec4@H$0A@@glm@@QEBAAEBHH@Z ENDP			; glm::tvec4<int,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\s4002675\Downloads\glm-0.9.8.5\glm\glm\detail\type_vec4.hpp
;	COMDAT ?length@?$tvec4@H$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec4@H$0A@@glm@@SAHXZ PROC			; glm::tvec4<int,0>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

$LN3:
	push	rdi
	mov	eax, 4
	pop	rdi
	ret	0
?length@?$tvec4@H$0A@@glm@@SAHXZ ENDP			; glm::tvec4<int,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\s4002675\Downloads\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@_N$0A@@glm@@QEAA@_N@Z
_TEXT	SEGMENT
this$ = 16
scalar$ = 24
??0?$tvec4@_N$0A@@glm@@QEAA@_N@Z PROC			; glm::tvec4<bool,0>::tvec4<bool,0>, COMDAT

; 188  : 	{}

$LN3:
	mov	BYTE PTR [rsp+16], dl
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 187  : 		: x(scalar), y(scalar), z(scalar), w(scalar)

	mov	rax, QWORD PTR this$[rsp]
	movzx	ecx, BYTE PTR scalar$[rsp]
	mov	BYTE PTR [rax], cl
	mov	rax, QWORD PTR this$[rsp]
	movzx	ecx, BYTE PTR scalar$[rsp]
	mov	BYTE PTR [rax+1], cl
	mov	rax, QWORD PTR this$[rsp]
	movzx	ecx, BYTE PTR scalar$[rsp]
	mov	BYTE PTR [rax+2], cl
	mov	rax, QWORD PTR this$[rsp]
	movzx	ecx, BYTE PTR scalar$[rsp]
	mov	BYTE PTR [rax+3], cl

; 188  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec4@_N$0A@@glm@@QEAA@_N@Z ENDP			; glm::tvec4<bool,0>::tvec4<bool,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\s4002675\Downloads\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@_N$0A@@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 16
__formal$ = 24
??0?$tvec4@_N$0A@@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tvec4<bool,0>::tvec4<bool,0>, COMDAT

; 183  : 	{}

$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec4@_N$0A@@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tvec4<bool,0>::tvec4<bool,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\s4002675\Downloads\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@_N$0A@@glm@@QEBAAEB_NH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec4@_N$0A@@glm@@QEBAAEB_NH@Z PROC		; glm::tvec4<bool,0>::operator[], COMDAT

; 336  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 337  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec4@_N$0A@@glm@@SAHXZ	; glm::tvec4<bool,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 337				; 00000151H
	lea	rdx, OFFSET FLAT:??_C@_1IK@NGAJILNN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAs?$AA4?$AA0?$AA0?$AA2?$AA6@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 338  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 339  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec4@_N$0A@@glm@@QEBAAEB_NH@Z ENDP		; glm::tvec4<bool,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\s4002675\Downloads\glm-0.9.8.5\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@_N$0A@@glm@@QEAAAEA_NH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec4@_N$0A@@glm@@QEAAAEA_NH@Z PROC		; glm::tvec4<bool,0>::operator[], COMDAT

; 329  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 330  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec4@_N$0A@@glm@@SAHXZ	; glm::tvec4<bool,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 330				; 0000014aH
	lea	rdx, OFFSET FLAT:??_C@_1IK@NGAJILNN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAs?$AA4?$AA0?$AA0?$AA2?$AA6@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 331  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 332  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec4@_N$0A@@glm@@QEAAAEA_NH@Z ENDP		; glm::tvec4<bool,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\s4002675\Downloads\glm-0.9.8.5\glm\glm\detail\type_vec4.hpp
;	COMDAT ?length@?$tvec4@_N$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec4@_N$0A@@glm@@SAHXZ PROC			; glm::tvec4<bool,0>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

$LN3:
	push	rdi
	mov	eax, 4
	pop	rdi
	ret	0
?length@?$tvec4@_N$0A@@glm@@SAHXZ ENDP			; glm::tvec4<bool,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\s4002675\Downloads\glm-0.9.8.5\glm\glm\detail\func_vector_relational.inl
;	COMDAT ??$all@$0A@Utvec3@glm@@@glm@@YA_NAEBU?$tvec3@_N$0A@@0@@Z
_TEXT	SEGMENT
Result$ = 32
i$1 = 36
tv74 = 40
v$ = 64
??$all@$0A@Utvec3@glm@@@glm@@YA_NAEBU?$tvec3@_N$0A@@0@@Z PROC ; glm::all<0,glm::tvec3>, COMDAT

; 86   : 	{

$LN8:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 87   : 		bool Result = true;

	mov	BYTE PTR Result$[rsp], 1

; 88   : 		for(length_t i = 0; i < v.length(); ++i)

	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN4@all
$LN2@all:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN4@all:
	call	?length@?$tvec3@_N$0A@@glm@@SAHXZ	; glm::tvec3<bool,0>::length
	cmp	DWORD PTR i$1[rsp], eax
	jge	SHORT $LN3@all

; 89   : 			Result = Result && v[i];

	movzx	eax, BYTE PTR Result$[rsp]
	test	eax, eax
	je	SHORT $LN6@all
	mov	edx, DWORD PTR i$1[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	call	??A?$tvec3@_N$0A@@glm@@QEBAAEB_NH@Z	; glm::tvec3<bool,0>::operator[]
	movzx	eax, BYTE PTR [rax]
	test	eax, eax
	je	SHORT $LN6@all
	mov	DWORD PTR tv74[rsp], 1
	jmp	SHORT $LN7@all
$LN6@all:
	mov	DWORD PTR tv74[rsp], 0
$LN7@all:
	movzx	eax, BYTE PTR tv74[rsp]
	mov	BYTE PTR Result$[rsp], al
	jmp	SHORT $LN2@all
$LN3@all:

; 90   : 		return Result;

	movzx	eax, BYTE PTR Result$[rsp]

; 91   : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$all@$0A@Utvec3@glm@@@glm@@YA_NAEBU?$tvec3@_N$0A@@0@@Z ENDP ; glm::all<0,glm::tvec3>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\s4002675\Downloads\glm-0.9.8.5\glm\glm\detail\func_vector_relational.inl
;	COMDAT ??$equal@_N$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
Result$ = 36
i$4 = 52
tv64 = 56
tv82 = 60
tv88 = 64
__$ReturnUdt$ = 112
x$ = 120
y$ = 128
??$equal@_N$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU10@0@Z PROC ; glm::equal<bool,0,glm::tvec3>, COMDAT

; 55   : 	{

$LN9:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 88					; 00000058H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 14
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+112]

; 56   : 		assert(x.length() == y.length());

	call	?length@?$tvec3@_N$0A@@glm@@SAHXZ	; glm::tvec3<bool,0>::length
	mov	DWORD PTR tv64[rsp], eax
	call	?length@?$tvec3@_N$0A@@glm@@SAHXZ	; glm::tvec3<bool,0>::length
	mov	ecx, DWORD PTR tv64[rsp]
	cmp	ecx, eax
	je	SHORT $LN6@equal
	mov	r8d, 56					; 00000038H
	lea	rdx, OFFSET FLAT:??_C@_1KE@MOONLNIK@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAs?$AA4?$AA0?$AA0?$AA2?$AA6@
	lea	rcx, OFFSET FLAT:??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN6@equal:

; 57   : 
; 58   : 		vecType<bool, P> Result(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??0?$tvec3@_N$0A@@glm@@QEAA@W4ctor@1@@Z	; glm::tvec3<bool,0>::tvec3<bool,0>

; 59   : 		for(length_t i = 0; i < x.length(); ++i)

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@equal
$LN2@equal:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN4@equal:
	call	?length@?$tvec3@_N$0A@@glm@@SAHXZ	; glm::tvec3<bool,0>::length
	cmp	DWORD PTR i$4[rsp], eax
	jge	SHORT $LN3@equal

; 60   : 			Result[i] = x[i] == y[i];

	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	??A?$tvec3@_N$0A@@glm@@QEBAAEB_NH@Z	; glm::tvec3<bool,0>::operator[]
	movzx	eax, BYTE PTR [rax]
	mov	DWORD PTR tv82[rsp], eax
	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	call	??A?$tvec3@_N$0A@@glm@@QEBAAEB_NH@Z	; glm::tvec3<bool,0>::operator[]
	movzx	eax, BYTE PTR [rax]
	mov	ecx, DWORD PTR tv82[rsp]
	cmp	ecx, eax
	jne	SHORT $LN7@equal
	mov	DWORD PTR tv88[rsp], 1
	jmp	SHORT $LN8@equal
$LN7@equal:
	mov	DWORD PTR tv88[rsp], 0
$LN8@equal:
	mov	edx, DWORD PTR i$4[rsp]
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tvec3@_N$0A@@glm@@QEAAAEA_NH@Z	; glm::tvec3<bool,0>::operator[]
	movzx	ecx, BYTE PTR tv88[rsp]
	mov	BYTE PTR [rax], cl
	jmp	SHORT $LN2@equal
$LN3@equal:

; 61   : 		return Result;

	lea	rax, QWORD PTR Result$[rsp]
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 3
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 62   : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$equal@_N$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU10@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 88					; 00000058H
	pop	rdi
	pop	rsi
	ret	0
??$equal@_N$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU10@0@Z ENDP ; glm::equal<bool,0,glm::tvec3>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\s4002675\Downloads\glm-0.9.8.5\glm\glm\gtc\round.inl
;	COMDAT ??$isPowerOfTwo@H$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@H$0A@@0@@Z
_TEXT	SEGMENT
Result$ = 40
$T4 = 68
$T5 = 80
$T6 = 92
tv68 = 104
__$ReturnUdt$ = 128
Value$ = 136
??$isPowerOfTwo@H$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@H$0A@@0@@Z PROC ; glm::isPowerOfTwo<int,0,glm::tvec3>, COMDAT

; 224  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 112				; 00000070H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 20
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+128]

; 225  : 		vecType<T, P> const Result(abs(Value));

	mov	rdx, QWORD PTR Value$[rsp]
	lea	rcx, QWORD PTR Result$[rsp]
	call	??$abs@H$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@H$0A@@0@AEBU10@@Z ; glm::abs<int,0,glm::tvec3>

; 226  : 		return equal(Result & (Result - 1), vecType<T, P>(0));

	xor	edx, edx
	lea	rcx, QWORD PTR $T4[rsp]
	call	??0?$tvec3@H$0A@@glm@@QEAA@H@Z		; glm::tvec3<int,0>::tvec3<int,0>
	mov	QWORD PTR tv68[rsp], rax
	mov	r8d, 1
	lea	rdx, QWORD PTR Result$[rsp]
	lea	rcx, QWORD PTR $T5[rsp]
	call	??$?GH$0A@@glm@@YA?AU?$tvec3@H$0A@@0@AEBU10@H@Z ; glm::operator-<int,0>
	mov	r8, rax
	lea	rdx, QWORD PTR Result$[rsp]
	lea	rcx, QWORD PTR $T6[rsp]
	call	??$?IH$0A@@glm@@YA?AU?$tvec3@H$0A@@0@AEBU10@0@Z ; glm::operator&<int,0>
	mov	rcx, QWORD PTR tv68[rsp]
	mov	r8, rcx
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$equal@H$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@H$0A@@0@0@Z ; glm::equal<int,0,glm::tvec3>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 227  : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$isPowerOfTwo@H$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@H$0A@@0@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 112				; 00000070H
	pop	rdi
	ret	0
??$isPowerOfTwo@H$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@H$0A@@0@@Z ENDP ; glm::isPowerOfTwo<int,0,glm::tvec3>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\s4002675\Downloads\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@H$0A@@glm@@QEAA@HHH@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
c$ = 40
??0?$tvec3@H$0A@@glm@@QEAA@HHH@Z PROC			; glm::tvec3<int,0>::tvec3<int,0>, COMDAT

; 70   : 	{}

$LN3:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 69   : 		: x(a), y(b), z(c)

	mov	rax, QWORD PTR this$[rsp]
	mov	ecx, DWORD PTR a$[rsp]
	mov	DWORD PTR [rax], ecx
	mov	rax, QWORD PTR this$[rsp]
	mov	ecx, DWORD PTR b$[rsp]
	mov	DWORD PTR [rax+4], ecx
	mov	rax, QWORD PTR this$[rsp]
	mov	ecx, DWORD PTR c$[rsp]
	mov	DWORD PTR [rax+8], ecx

; 70   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec3@H$0A@@glm@@QEAA@HHH@Z ENDP			; glm::tvec3<int,0>::tvec3<int,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\s4002675\Downloads\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@H$0A@@glm@@QEAA@H@Z
_TEXT	SEGMENT
this$ = 16
scalar$ = 24
??0?$tvec3@H$0A@@glm@@QEAA@H@Z PROC			; glm::tvec3<int,0>::tvec3<int,0>, COMDAT

; 65   : 	{}

$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 64   : 		: x(scalar), y(scalar), z(scalar)

	mov	rax, QWORD PTR this$[rsp]
	mov	ecx, DWORD PTR scalar$[rsp]
	mov	DWORD PTR [rax], ecx
	mov	rax, QWORD PTR this$[rsp]
	mov	ecx, DWORD PTR scalar$[rsp]
	mov	DWORD PTR [rax+4], ecx
	mov	rax, QWORD PTR this$[rsp]
	mov	ecx, DWORD PTR scalar$[rsp]
	mov	DWORD PTR [rax+8], ecx

; 65   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec3@H$0A@@glm@@QEAA@H@Z ENDP			; glm::tvec3<int,0>::tvec3<int,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\s4002675\Downloads\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@H$0A@@glm@@QEBAAEBHH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec3@H$0A@@glm@@QEBAAEBHH@Z PROC			; glm::tvec3<int,0>::operator[], COMDAT

; 151  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 152  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec3@H$0A@@glm@@SAHXZ	; glm::tvec3<int,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 152				; 00000098H
	lea	rdx, OFFSET FLAT:??_C@_1IK@KCJBGCFC@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAs?$AA4?$AA0?$AA0?$AA2?$AA6@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 153  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	lea	rax, QWORD PTR [rcx+rax*4]

; 154  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec3@H$0A@@glm@@QEBAAEBHH@Z ENDP			; glm::tvec3<int,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\s4002675\Downloads\glm-0.9.8.5\glm\glm\detail\type_vec3.hpp
;	COMDAT ?length@?$tvec3@H$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec3@H$0A@@glm@@SAHXZ PROC			; glm::tvec3<int,0>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 3;}

$LN3:
	push	rdi
	mov	eax, 3
	pop	rdi
	ret	0
?length@?$tvec3@H$0A@@glm@@SAHXZ ENDP			; glm::tvec3<int,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\s4002675\Downloads\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@_N$0A@@glm@@QEAA@_N@Z
_TEXT	SEGMENT
this$ = 16
scalar$ = 24
??0?$tvec3@_N$0A@@glm@@QEAA@_N@Z PROC			; glm::tvec3<bool,0>::tvec3<bool,0>, COMDAT

; 65   : 	{}

$LN3:
	mov	BYTE PTR [rsp+16], dl
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 64   : 		: x(scalar), y(scalar), z(scalar)

	mov	rax, QWORD PTR this$[rsp]
	movzx	ecx, BYTE PTR scalar$[rsp]
	mov	BYTE PTR [rax], cl
	mov	rax, QWORD PTR this$[rsp]
	movzx	ecx, BYTE PTR scalar$[rsp]
	mov	BYTE PTR [rax+1], cl
	mov	rax, QWORD PTR this$[rsp]
	movzx	ecx, BYTE PTR scalar$[rsp]
	mov	BYTE PTR [rax+2], cl

; 65   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec3@_N$0A@@glm@@QEAA@_N@Z ENDP			; glm::tvec3<bool,0>::tvec3<bool,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\s4002675\Downloads\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@_N$0A@@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 16
__formal$ = 24
??0?$tvec3@_N$0A@@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tvec3<bool,0>::tvec3<bool,0>, COMDAT

; 60   : 	{}

$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec3@_N$0A@@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tvec3<bool,0>::tvec3<bool,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\s4002675\Downloads\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@_N$0A@@glm@@QEBAAEB_NH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec3@_N$0A@@glm@@QEBAAEB_NH@Z PROC		; glm::tvec3<bool,0>::operator[], COMDAT

; 151  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 152  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec3@_N$0A@@glm@@SAHXZ	; glm::tvec3<bool,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 152				; 00000098H
	lea	rdx, OFFSET FLAT:??_C@_1IK@KCJBGCFC@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAs?$AA4?$AA0?$AA0?$AA2?$AA6@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 153  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 154  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec3@_N$0A@@glm@@QEBAAEB_NH@Z ENDP		; glm::tvec3<bool,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\s4002675\Downloads\glm-0.9.8.5\glm\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@_N$0A@@glm@@QEAAAEA_NH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec3@_N$0A@@glm@@QEAAAEA_NH@Z PROC		; glm::tvec3<bool,0>::operator[], COMDAT

; 144  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 145  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec3@_N$0A@@glm@@SAHXZ	; glm::tvec3<bool,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 145				; 00000091H
	lea	rdx, OFFSET FLAT:??_C@_1IK@KCJBGCFC@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAs?$AA4?$AA0?$AA0?$AA2?$AA6@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 146  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 147  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec3@_N$0A@@glm@@QEAAAEA_NH@Z ENDP		; glm::tvec3<bool,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\s4002675\Downloads\glm-0.9.8.5\glm\glm\detail\type_vec3.hpp
;	COMDAT ?length@?$tvec3@_N$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec3@_N$0A@@glm@@SAHXZ PROC			; glm::tvec3<bool,0>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 3;}

$LN3:
	push	rdi
	mov	eax, 3
	pop	rdi
	ret	0
?length@?$tvec3@_N$0A@@glm@@SAHXZ ENDP			; glm::tvec3<bool,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\s4002675\Downloads\glm-0.9.8.5\glm\glm\detail\func_vector_relational.inl
;	COMDAT ??$all@$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@_N$0A@@0@@Z
_TEXT	SEGMENT
Result$ = 32
i$1 = 36
tv74 = 40
v$ = 64
??$all@$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@_N$0A@@0@@Z PROC ; glm::all<0,glm::tvec2>, COMDAT

; 86   : 	{

$LN8:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 87   : 		bool Result = true;

	mov	BYTE PTR Result$[rsp], 1

; 88   : 		for(length_t i = 0; i < v.length(); ++i)

	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN4@all
$LN2@all:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN4@all:
	call	?length@?$tvec2@_N$0A@@glm@@SAHXZ	; glm::tvec2<bool,0>::length
	cmp	DWORD PTR i$1[rsp], eax
	jge	SHORT $LN3@all

; 89   : 			Result = Result && v[i];

	movzx	eax, BYTE PTR Result$[rsp]
	test	eax, eax
	je	SHORT $LN6@all
	mov	edx, DWORD PTR i$1[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	call	??A?$tvec2@_N$0A@@glm@@QEBAAEB_NH@Z	; glm::tvec2<bool,0>::operator[]
	movzx	eax, BYTE PTR [rax]
	test	eax, eax
	je	SHORT $LN6@all
	mov	DWORD PTR tv74[rsp], 1
	jmp	SHORT $LN7@all
$LN6@all:
	mov	DWORD PTR tv74[rsp], 0
$LN7@all:
	movzx	eax, BYTE PTR tv74[rsp]
	mov	BYTE PTR Result$[rsp], al
	jmp	SHORT $LN2@all
$LN3@all:

; 90   : 		return Result;

	movzx	eax, BYTE PTR Result$[rsp]

; 91   : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$all@$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@_N$0A@@0@@Z ENDP ; glm::all<0,glm::tvec2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\s4002675\Downloads\glm-0.9.8.5\glm\glm\detail\func_vector_relational.inl
;	COMDAT ??$equal@_N$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
Result$ = 36
i$4 = 52
tv64 = 56
tv82 = 60
tv88 = 64
__$ReturnUdt$ = 96
x$ = 104
y$ = 112
??$equal@_N$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU10@0@Z PROC ; glm::equal<bool,0,glm::tvec2>, COMDAT

; 55   : 	{

$LN9:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+96]

; 56   : 		assert(x.length() == y.length());

	call	?length@?$tvec2@_N$0A@@glm@@SAHXZ	; glm::tvec2<bool,0>::length
	mov	DWORD PTR tv64[rsp], eax
	call	?length@?$tvec2@_N$0A@@glm@@SAHXZ	; glm::tvec2<bool,0>::length
	mov	ecx, DWORD PTR tv64[rsp]
	cmp	ecx, eax
	je	SHORT $LN6@equal
	mov	r8d, 56					; 00000038H
	lea	rdx, OFFSET FLAT:??_C@_1KE@MOONLNIK@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAs?$AA4?$AA0?$AA0?$AA2?$AA6@
	lea	rcx, OFFSET FLAT:??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN6@equal:

; 57   : 
; 58   : 		vecType<bool, P> Result(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??0?$tvec2@_N$0A@@glm@@QEAA@W4ctor@1@@Z	; glm::tvec2<bool,0>::tvec2<bool,0>

; 59   : 		for(length_t i = 0; i < x.length(); ++i)

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@equal
$LN2@equal:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN4@equal:
	call	?length@?$tvec2@_N$0A@@glm@@SAHXZ	; glm::tvec2<bool,0>::length
	cmp	DWORD PTR i$4[rsp], eax
	jge	SHORT $LN3@equal

; 60   : 			Result[i] = x[i] == y[i];

	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	??A?$tvec2@_N$0A@@glm@@QEBAAEB_NH@Z	; glm::tvec2<bool,0>::operator[]
	movzx	eax, BYTE PTR [rax]
	mov	DWORD PTR tv82[rsp], eax
	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	call	??A?$tvec2@_N$0A@@glm@@QEBAAEB_NH@Z	; glm::tvec2<bool,0>::operator[]
	movzx	eax, BYTE PTR [rax]
	mov	ecx, DWORD PTR tv82[rsp]
	cmp	ecx, eax
	jne	SHORT $LN7@equal
	mov	DWORD PTR tv88[rsp], 1
	jmp	SHORT $LN8@equal
$LN7@equal:
	mov	DWORD PTR tv88[rsp], 0
$LN8@equal:
	mov	edx, DWORD PTR i$4[rsp]
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tvec2@_N$0A@@glm@@QEAAAEA_NH@Z	; glm::tvec2<bool,0>::operator[]
	movzx	ecx, BYTE PTR tv88[rsp]
	mov	BYTE PTR [rax], cl
	jmp	SHORT $LN2@equal
$LN3@equal:

; 61   : 		return Result;

	mov	rax, QWORD PTR __$ReturnUdt$[rsp]
	movzx	ecx, WORD PTR Result$[rsp]
	mov	WORD PTR [rax], cx
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 62   : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$equal@_N$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU10@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??$equal@_N$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU10@0@Z ENDP ; glm::equal<bool,0,glm::tvec2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\s4002675\Downloads\glm-0.9.8.5\glm\glm\gtc\round.inl
;	COMDAT ??$isPowerOfTwo@H$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@H$0A@@0@@Z
_TEXT	SEGMENT
Result$ = 40
$T4 = 52
$T5 = 60
$T6 = 68
tv68 = 80
__$ReturnUdt$ = 112
Value$ = 120
??$isPowerOfTwo@H$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@H$0A@@0@@Z PROC ; glm::isPowerOfTwo<int,0,glm::tvec2>, COMDAT

; 224  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 96					; 00000060H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 16
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+112]

; 225  : 		vecType<T, P> const Result(abs(Value));

	mov	rdx, QWORD PTR Value$[rsp]
	lea	rcx, QWORD PTR Result$[rsp]
	call	??$abs@H$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@H$0A@@0@AEBU10@@Z ; glm::abs<int,0,glm::tvec2>

; 226  : 		return equal(Result & (Result - 1), vecType<T, P>(0));

	xor	edx, edx
	lea	rcx, QWORD PTR $T4[rsp]
	call	??0?$tvec2@H$0A@@glm@@QEAA@H@Z		; glm::tvec2<int,0>::tvec2<int,0>
	mov	QWORD PTR tv68[rsp], rax
	mov	r8d, 1
	lea	rdx, QWORD PTR Result$[rsp]
	lea	rcx, QWORD PTR $T5[rsp]
	call	??$?GH$0A@@glm@@YA?AU?$tvec2@H$0A@@0@AEBU10@H@Z ; glm::operator-<int,0>
	mov	r8, rax
	lea	rdx, QWORD PTR Result$[rsp]
	lea	rcx, QWORD PTR $T6[rsp]
	call	??$?IH$0A@@glm@@YA?AU?$tvec2@H$0A@@0@AEBU10@0@Z ; glm::operator&<int,0>
	mov	rcx, QWORD PTR tv68[rsp]
	mov	r8, rcx
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$equal@H$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@H$0A@@0@0@Z ; glm::equal<int,0,glm::tvec2>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 227  : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$isPowerOfTwo@H$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@H$0A@@0@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
??$isPowerOfTwo@H$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@H$0A@@0@@Z ENDP ; glm::isPowerOfTwo<int,0,glm::tvec2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\s4002675\Downloads\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@H$0A@@glm@@QEAA@HH@Z
_TEXT	SEGMENT
this$ = 16
s1$ = 24
s2$ = 32
??0?$tvec2@H$0A@@glm@@QEAA@HH@Z PROC			; glm::tvec2<int,0>::tvec2<int,0>, COMDAT

; 57   : 	{}

$LN3:
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 56   : 		: x(s1), y(s2)

	mov	rax, QWORD PTR this$[rsp]
	mov	ecx, DWORD PTR s1$[rsp]
	mov	DWORD PTR [rax], ecx
	mov	rax, QWORD PTR this$[rsp]
	mov	ecx, DWORD PTR s2$[rsp]
	mov	DWORD PTR [rax+4], ecx

; 57   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec2@H$0A@@glm@@QEAA@HH@Z ENDP			; glm::tvec2<int,0>::tvec2<int,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\s4002675\Downloads\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@H$0A@@glm@@QEAA@H@Z
_TEXT	SEGMENT
this$ = 16
scalar$ = 24
??0?$tvec2@H$0A@@glm@@QEAA@H@Z PROC			; glm::tvec2<int,0>::tvec2<int,0>, COMDAT

; 52   : 	{}

$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 51   : 		: x(scalar), y(scalar)

	mov	rax, QWORD PTR this$[rsp]
	mov	ecx, DWORD PTR scalar$[rsp]
	mov	DWORD PTR [rax], ecx
	mov	rax, QWORD PTR this$[rsp]
	mov	ecx, DWORD PTR scalar$[rsp]
	mov	DWORD PTR [rax+4], ecx

; 52   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec2@H$0A@@glm@@QEAA@H@Z ENDP			; glm::tvec2<int,0>::tvec2<int,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\s4002675\Downloads\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@H$0A@@glm@@QEBAAEBHH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec2@H$0A@@glm@@QEBAAEBHH@Z PROC			; glm::tvec2<int,0>::operator[], COMDAT

; 109  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 110  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec2@H$0A@@glm@@SAHXZ	; glm::tvec2<int,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 110				; 0000006eH
	lea	rdx, OFFSET FLAT:??_C@_1IK@DJDECODN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAs?$AA4?$AA0?$AA0?$AA2?$AA6@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 111  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	lea	rax, QWORD PTR [rcx+rax*4]

; 112  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec2@H$0A@@glm@@QEBAAEBHH@Z ENDP			; glm::tvec2<int,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\s4002675\Downloads\glm-0.9.8.5\glm\glm\detail\type_vec2.hpp
;	COMDAT ?length@?$tvec2@H$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec2@H$0A@@glm@@SAHXZ PROC			; glm::tvec2<int,0>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 2;}

$LN3:
	push	rdi
	mov	eax, 2
	pop	rdi
	ret	0
?length@?$tvec2@H$0A@@glm@@SAHXZ ENDP			; glm::tvec2<int,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\s4002675\Downloads\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@_N$0A@@glm@@QEAA@_N@Z
_TEXT	SEGMENT
this$ = 16
scalar$ = 24
??0?$tvec2@_N$0A@@glm@@QEAA@_N@Z PROC			; glm::tvec2<bool,0>::tvec2<bool,0>, COMDAT

; 52   : 	{}

$LN3:
	mov	BYTE PTR [rsp+16], dl
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 51   : 		: x(scalar), y(scalar)

	mov	rax, QWORD PTR this$[rsp]
	movzx	ecx, BYTE PTR scalar$[rsp]
	mov	BYTE PTR [rax], cl
	mov	rax, QWORD PTR this$[rsp]
	movzx	ecx, BYTE PTR scalar$[rsp]
	mov	BYTE PTR [rax+1], cl

; 52   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec2@_N$0A@@glm@@QEAA@_N@Z ENDP			; glm::tvec2<bool,0>::tvec2<bool,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\s4002675\Downloads\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@_N$0A@@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 16
__formal$ = 24
??0?$tvec2@_N$0A@@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tvec2<bool,0>::tvec2<bool,0>, COMDAT

; 47   : 	{}

$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec2@_N$0A@@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tvec2<bool,0>::tvec2<bool,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\s4002675\Downloads\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@_N$0A@@glm@@QEBAAEB_NH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec2@_N$0A@@glm@@QEBAAEB_NH@Z PROC		; glm::tvec2<bool,0>::operator[], COMDAT

; 109  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 110  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec2@_N$0A@@glm@@SAHXZ	; glm::tvec2<bool,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 110				; 0000006eH
	lea	rdx, OFFSET FLAT:??_C@_1IK@DJDECODN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAs?$AA4?$AA0?$AA0?$AA2?$AA6@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 111  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 112  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec2@_N$0A@@glm@@QEBAAEB_NH@Z ENDP		; glm::tvec2<bool,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\s4002675\Downloads\glm-0.9.8.5\glm\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@_N$0A@@glm@@QEAAAEA_NH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec2@_N$0A@@glm@@QEAAAEA_NH@Z PROC		; glm::tvec2<bool,0>::operator[], COMDAT

; 102  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 103  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec2@_N$0A@@glm@@SAHXZ	; glm::tvec2<bool,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 103				; 00000067H
	lea	rdx, OFFSET FLAT:??_C@_1IK@DJDECODN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAs?$AA4?$AA0?$AA0?$AA2?$AA6@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 104  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 105  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec2@_N$0A@@glm@@QEAAAEA_NH@Z ENDP		; glm::tvec2<bool,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\s4002675\Downloads\glm-0.9.8.5\glm\glm\detail\type_vec2.hpp
;	COMDAT ?length@?$tvec2@_N$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec2@_N$0A@@glm@@SAHXZ PROC			; glm::tvec2<bool,0>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 2;}

$LN3:
	push	rdi
	mov	eax, 2
	pop	rdi
	ret	0
?length@?$tvec2@_N$0A@@glm@@SAHXZ ENDP			; glm::tvec2<bool,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\s4002675\Downloads\glm-0.9.8.5\glm\glm\detail\func_vector_relational.inl
;	COMDAT ??$all@$0A@Utvec1@glm@@@glm@@YA_NAEBU?$tvec1@_N$0A@@0@@Z
_TEXT	SEGMENT
Result$ = 32
i$1 = 36
tv74 = 40
v$ = 64
??$all@$0A@Utvec1@glm@@@glm@@YA_NAEBU?$tvec1@_N$0A@@0@@Z PROC ; glm::all<0,glm::tvec1>, COMDAT

; 86   : 	{

$LN8:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 87   : 		bool Result = true;

	mov	BYTE PTR Result$[rsp], 1

; 88   : 		for(length_t i = 0; i < v.length(); ++i)

	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN4@all
$LN2@all:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN4@all:
	call	?length@?$tvec1@_N$0A@@glm@@SAHXZ	; glm::tvec1<bool,0>::length
	cmp	DWORD PTR i$1[rsp], eax
	jge	SHORT $LN3@all

; 89   : 			Result = Result && v[i];

	movzx	eax, BYTE PTR Result$[rsp]
	test	eax, eax
	je	SHORT $LN6@all
	mov	edx, DWORD PTR i$1[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	call	??A?$tvec1@_N$0A@@glm@@QEBAAEB_NH@Z	; glm::tvec1<bool,0>::operator[]
	movzx	eax, BYTE PTR [rax]
	test	eax, eax
	je	SHORT $LN6@all
	mov	DWORD PTR tv74[rsp], 1
	jmp	SHORT $LN7@all
$LN6@all:
	mov	DWORD PTR tv74[rsp], 0
$LN7@all:
	movzx	eax, BYTE PTR tv74[rsp]
	mov	BYTE PTR Result$[rsp], al
	jmp	SHORT $LN2@all
$LN3@all:

; 90   : 		return Result;

	movzx	eax, BYTE PTR Result$[rsp]

; 91   : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$all@$0A@Utvec1@glm@@@glm@@YA_NAEBU?$tvec1@_N$0A@@0@@Z ENDP ; glm::all<0,glm::tvec1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\s4002675\Downloads\glm-0.9.8.5\glm\glm\detail\func_vector_relational.inl
;	COMDAT ??$equal@_N$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
Result$ = 36
i$4 = 52
tv64 = 56
tv82 = 60
tv88 = 64
__$ReturnUdt$ = 96
x$ = 104
y$ = 112
??$equal@_N$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU10@0@Z PROC ; glm::equal<bool,0,glm::tvec1>, COMDAT

; 55   : 	{

$LN9:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+96]

; 56   : 		assert(x.length() == y.length());

	call	?length@?$tvec1@_N$0A@@glm@@SAHXZ	; glm::tvec1<bool,0>::length
	mov	DWORD PTR tv64[rsp], eax
	call	?length@?$tvec1@_N$0A@@glm@@SAHXZ	; glm::tvec1<bool,0>::length
	mov	ecx, DWORD PTR tv64[rsp]
	cmp	ecx, eax
	je	SHORT $LN6@equal
	mov	r8d, 56					; 00000038H
	lea	rdx, OFFSET FLAT:??_C@_1KE@MOONLNIK@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAs?$AA4?$AA0?$AA0?$AA2?$AA6@
	lea	rcx, OFFSET FLAT:??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN6@equal:

; 57   : 
; 58   : 		vecType<bool, P> Result(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??0?$tvec1@_N$0A@@glm@@QEAA@W4ctor@1@@Z	; glm::tvec1<bool,0>::tvec1<bool,0>

; 59   : 		for(length_t i = 0; i < x.length(); ++i)

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@equal
$LN2@equal:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN4@equal:
	call	?length@?$tvec1@_N$0A@@glm@@SAHXZ	; glm::tvec1<bool,0>::length
	cmp	DWORD PTR i$4[rsp], eax
	jge	SHORT $LN3@equal

; 60   : 			Result[i] = x[i] == y[i];

	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	??A?$tvec1@_N$0A@@glm@@QEBAAEB_NH@Z	; glm::tvec1<bool,0>::operator[]
	movzx	eax, BYTE PTR [rax]
	mov	DWORD PTR tv82[rsp], eax
	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	call	??A?$tvec1@_N$0A@@glm@@QEBAAEB_NH@Z	; glm::tvec1<bool,0>::operator[]
	movzx	eax, BYTE PTR [rax]
	mov	ecx, DWORD PTR tv82[rsp]
	cmp	ecx, eax
	jne	SHORT $LN7@equal
	mov	DWORD PTR tv88[rsp], 1
	jmp	SHORT $LN8@equal
$LN7@equal:
	mov	DWORD PTR tv88[rsp], 0
$LN8@equal:
	mov	edx, DWORD PTR i$4[rsp]
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tvec1@_N$0A@@glm@@QEAAAEA_NH@Z	; glm::tvec1<bool,0>::operator[]
	movzx	ecx, BYTE PTR tv88[rsp]
	mov	BYTE PTR [rax], cl
	jmp	SHORT $LN2@equal
$LN3@equal:

; 61   : 		return Result;

	mov	rax, QWORD PTR __$ReturnUdt$[rsp]
	movzx	ecx, BYTE PTR Result$[rsp]
	mov	BYTE PTR [rax], cl
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 62   : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$equal@_N$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU10@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??$equal@_N$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU10@0@Z ENDP ; glm::equal<bool,0,glm::tvec1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\s4002675\Downloads\glm-0.9.8.5\glm\glm\gtc\round.inl
;	COMDAT ??$isPowerOfTwo@H$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@H$0A@@0@@Z
_TEXT	SEGMENT
Result$ = 36
$T4 = 52
$T5 = 56
$T6 = 60
tv68 = 64
__$ReturnUdt$ = 96
Value$ = 104
??$isPowerOfTwo@H$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@H$0A@@0@@Z PROC ; glm::isPowerOfTwo<int,0,glm::tvec1>, COMDAT

; 224  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+96]

; 225  : 		vecType<T, P> const Result(abs(Value));

	mov	rdx, QWORD PTR Value$[rsp]
	lea	rcx, QWORD PTR Result$[rsp]
	call	??$abs@H$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@H$0A@@0@AEBU10@@Z ; glm::abs<int,0,glm::tvec1>

; 226  : 		return equal(Result & (Result - 1), vecType<T, P>(0));

	xor	edx, edx
	lea	rcx, QWORD PTR $T4[rsp]
	call	??0?$tvec1@H$0A@@glm@@QEAA@H@Z		; glm::tvec1<int,0>::tvec1<int,0>
	mov	QWORD PTR tv68[rsp], rax
	mov	r8d, 1
	lea	rdx, QWORD PTR Result$[rsp]
	lea	rcx, QWORD PTR $T5[rsp]
	call	??$?GH$0A@@glm@@YA?AU?$tvec1@H$0A@@0@AEBU10@H@Z ; glm::operator-<int,0>
	mov	r8, rax
	lea	rdx, QWORD PTR Result$[rsp]
	lea	rcx, QWORD PTR $T6[rsp]
	call	??$?IH$0A@@glm@@YA?AU?$tvec1@H$0A@@0@AEBU10@0@Z ; glm::operator&<int,0>
	mov	rcx, QWORD PTR tv68[rsp]
	mov	r8, rcx
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$equal@H$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@H$0A@@0@0@Z ; glm::equal<int,0,glm::tvec1>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 227  : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$isPowerOfTwo@H$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@H$0A@@0@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??$isPowerOfTwo@H$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@H$0A@@0@@Z ENDP ; glm::isPowerOfTwo<int,0,glm::tvec1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\s4002675\Downloads\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@H$0A@@glm@@QEAA@H@Z
_TEXT	SEGMENT
this$ = 16
scalar$ = 24
??0?$tvec1@H$0A@@glm@@QEAA@H@Z PROC			; glm::tvec1<int,0>::tvec1<int,0>, COMDAT

; 39   : 	{}

$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 38   : 		: x(scalar)

	mov	rax, QWORD PTR this$[rsp]
	mov	ecx, DWORD PTR scalar$[rsp]
	mov	DWORD PTR [rax], ecx

; 39   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec1@H$0A@@glm@@QEAA@H@Z ENDP			; glm::tvec1<int,0>::tvec1<int,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\s4002675\Downloads\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@H$0A@@glm@@QEBAAEBHH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec1@H$0A@@glm@@QEBAAEBHH@Z PROC			; glm::tvec1<int,0>::operator[], COMDAT

; 78   : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 79   : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec1@H$0A@@glm@@SAHXZ	; glm::tvec1<int,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 79					; 0000004fH
	lea	rdx, OFFSET FLAT:??_C@_1IK@EOKKPMMN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAs?$AA4?$AA0?$AA0?$AA2?$AA6@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 80   : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	lea	rax, QWORD PTR [rcx+rax*4]

; 81   : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec1@H$0A@@glm@@QEBAAEBHH@Z ENDP			; glm::tvec1<int,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\s4002675\Downloads\glm-0.9.8.5\glm\glm\detail\type_vec1.hpp
;	COMDAT ?length@?$tvec1@H$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec1@H$0A@@glm@@SAHXZ PROC			; glm::tvec1<int,0>::length, COMDAT

; 81   : 		GLM_FUNC_DECL static length_type length(){return 1;}

$LN3:
	push	rdi
	mov	eax, 1
	pop	rdi
	ret	0
?length@?$tvec1@H$0A@@glm@@SAHXZ ENDP			; glm::tvec1<int,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\s4002675\Downloads\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@_N$0A@@glm@@QEAA@_N@Z
_TEXT	SEGMENT
this$ = 16
scalar$ = 24
??0?$tvec1@_N$0A@@glm@@QEAA@_N@Z PROC			; glm::tvec1<bool,0>::tvec1<bool,0>, COMDAT

; 39   : 	{}

$LN3:
	mov	BYTE PTR [rsp+16], dl
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 38   : 		: x(scalar)

	mov	rax, QWORD PTR this$[rsp]
	movzx	ecx, BYTE PTR scalar$[rsp]
	mov	BYTE PTR [rax], cl

; 39   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec1@_N$0A@@glm@@QEAA@_N@Z ENDP			; glm::tvec1<bool,0>::tvec1<bool,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\s4002675\Downloads\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@_N$0A@@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 16
__formal$ = 24
??0?$tvec1@_N$0A@@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tvec1<bool,0>::tvec1<bool,0>, COMDAT

; 34   : 	{}

$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec1@_N$0A@@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tvec1<bool,0>::tvec1<bool,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\s4002675\Downloads\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@_N$0A@@glm@@QEBAAEB_NH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec1@_N$0A@@glm@@QEBAAEB_NH@Z PROC		; glm::tvec1<bool,0>::operator[], COMDAT

; 78   : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 79   : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec1@_N$0A@@glm@@SAHXZ	; glm::tvec1<bool,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 79					; 0000004fH
	lea	rdx, OFFSET FLAT:??_C@_1IK@EOKKPMMN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAs?$AA4?$AA0?$AA0?$AA2?$AA6@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 80   : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 81   : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec1@_N$0A@@glm@@QEBAAEB_NH@Z ENDP		; glm::tvec1<bool,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\s4002675\Downloads\glm-0.9.8.5\glm\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@_N$0A@@glm@@QEAAAEA_NH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec1@_N$0A@@glm@@QEAAAEA_NH@Z PROC		; glm::tvec1<bool,0>::operator[], COMDAT

; 71   : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 72   : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec1@_N$0A@@glm@@SAHXZ	; glm::tvec1<bool,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 72					; 00000048H
	lea	rdx, OFFSET FLAT:??_C@_1IK@EOKKPMMN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAs?$AA4?$AA0?$AA0?$AA2?$AA6@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 73   : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 74   : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec1@_N$0A@@glm@@QEAAAEA_NH@Z ENDP		; glm::tvec1<bool,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\s4002675\Downloads\glm-0.9.8.5\glm\glm\detail\type_vec1.hpp
;	COMDAT ?length@?$tvec1@_N$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec1@_N$0A@@glm@@SAHXZ PROC			; glm::tvec1<bool,0>::length, COMDAT

; 81   : 		GLM_FUNC_DECL static length_type length(){return 1;}

$LN3:
	push	rdi
	mov	eax, 1
	pop	rdi
	ret	0
?length@?$tvec1@_N$0A@@glm@@SAHXZ ENDP			; glm::tvec1<bool,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\s4002675\Downloads\glm-0.9.8.5\glm\glm\gtc\round.inl
;	COMDAT ??$isPowerOfTwo@H@glm@@YA_NH@Z
_TEXT	SEGMENT
Result$ = 32
tv69 = 36
Value$ = 64
??$isPowerOfTwo@H@glm@@YA_NH@Z PROC			; glm::isPowerOfTwo<int>, COMDAT

; 217  : 	{

$LN5:
	mov	DWORD PTR [rsp+8], ecx
	push	rdi
	sub	rsp, 48					; 00000030H

; 218  : 		genType const Result = glm::abs(Value);

	mov	ecx, DWORD PTR Value$[rsp]
	call	??$abs@H@glm@@YAHH@Z			; glm::abs<int>
	mov	DWORD PTR Result$[rsp], eax

; 219  : 		return !(Result & (Result - 1));

	mov	eax, DWORD PTR Result$[rsp]
	dec	eax
	mov	ecx, DWORD PTR Result$[rsp]
	and	ecx, eax
	mov	eax, ecx
	test	eax, eax
	jne	SHORT $LN3@isPowerOfT
	mov	DWORD PTR tv69[rsp], 1
	jmp	SHORT $LN4@isPowerOfT
$LN3@isPowerOfT:
	mov	DWORD PTR tv69[rsp], 0
$LN4@isPowerOfT:
	movzx	eax, BYTE PTR tv69[rsp]

; 220  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$isPowerOfTwo@H@glm@@YA_NH@Z ENDP			; glm::isPowerOfTwo<int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\s4002675\Downloads\glm-0.9.8.5\glm\test\gtc\gtc_round.cpp
_TEXT	SEGMENT
Data$ = 40
Error$ = 100
i$8 = 104
n$9 = 112
Result$10 = 120
i$11 = 128
n$12 = 136
Result$13 = 148
i$14 = 168
n$15 = 176
Result$16 = 196
i$17 = 216
n$18 = 224
Result$19 = 244
i$20 = 264
n$21 = 272
Result$22 = 292
$T23 = 320
$T24 = 324
$T25 = 325
$T26 = 328
$T27 = 336
$T28 = 338
$T29 = 340
$T30 = 352
$T31 = 355
$T32 = 360
$T33 = 376
$T34 = 380
tv77 = 384
tv167 = 388
tv193 = 392
tv219 = 396
tv245 = 400
__$ArrayPad$ = 408
?test_int32@isPowerOfTwo@@YAHXZ PROC			; isPowerOfTwo::test_int32

; 65   : 	{

$LN28:
	push	rdi
	sub	rsp, 416				; 000001a0H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 96					; 00000060H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 66   : 		type<int> const Data[] =
; 67   : 		{
; 68   : 			{0x00000001, true},

	mov	DWORD PTR Data$[rsp], 1
	mov	BYTE PTR Data$[rsp+4], 1

; 69   : 			{0x00000002, true},

	mov	DWORD PTR Data$[rsp+8], 2
	mov	BYTE PTR Data$[rsp+12], 1

; 70   : 			{0x00000004, true},

	mov	DWORD PTR Data$[rsp+16], 4
	mov	BYTE PTR Data$[rsp+20], 1

; 71   : 			{0x0000000f, false},

	mov	DWORD PTR Data$[rsp+24], 15
	mov	BYTE PTR Data$[rsp+28], 0

; 72   : 			{0x00000000, true},

	mov	DWORD PTR Data$[rsp+32], 0
	mov	BYTE PTR Data$[rsp+36], 1

; 73   : 			{0x00000003, false}

	mov	DWORD PTR Data$[rsp+40], 3
	mov	BYTE PTR Data$[rsp+44], 0

; 74   : 		};
; 75   : 
; 76   : 		int Error(0);

	mov	DWORD PTR Error$[rsp], 0

; 77   : 
; 78   : 		for(std::size_t i = 0, n = sizeof(Data) / sizeof(type<int>); i < n; ++i)

	mov	QWORD PTR i$8[rsp], 0
	mov	QWORD PTR n$9[rsp], 6
	jmp	SHORT $LN4@test_int32
$LN2@test_int32:
	mov	rax, QWORD PTR i$8[rsp]
	inc	rax
	mov	QWORD PTR i$8[rsp], rax
$LN4@test_int32:
	mov	rax, QWORD PTR n$9[rsp]
	cmp	QWORD PTR i$8[rsp], rax
	jae	SHORT $LN3@test_int32

; 79   : 		{
; 80   : 			bool Result = glm::isPowerOfTwo(Data[i].Value);

	mov	rax, QWORD PTR i$8[rsp]
	mov	ecx, DWORD PTR Data$[rsp+rax*8]
	call	??$isPowerOfTwo@H@glm@@YA_NH@Z		; glm::isPowerOfTwo<int>
	mov	BYTE PTR Result$10[rsp], al

; 81   : 			Error += Data[i].Return == Result ? 0 : 1;

	mov	rax, QWORD PTR i$8[rsp]
	movzx	eax, BYTE PTR Data$[rsp+rax*8+4]
	movzx	ecx, BYTE PTR Result$10[rsp]
	cmp	eax, ecx
	jne	SHORT $LN18@test_int32
	mov	DWORD PTR tv77[rsp], 0
	jmp	SHORT $LN19@test_int32
$LN18@test_int32:
	mov	DWORD PTR tv77[rsp], 1
$LN19@test_int32:
	mov	eax, DWORD PTR tv77[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 82   : 		}

	jmp	SHORT $LN2@test_int32
$LN3@test_int32:

; 83   : 
; 84   : 		for(std::size_t i = 0, n = sizeof(Data) / sizeof(type<int>); i < n; ++i)

	mov	QWORD PTR i$11[rsp], 0
	mov	QWORD PTR n$12[rsp], 6
	jmp	SHORT $LN7@test_int32
$LN5@test_int32:
	mov	rax, QWORD PTR i$11[rsp]
	inc	rax
	mov	QWORD PTR i$11[rsp], rax
$LN7@test_int32:
	mov	rax, QWORD PTR n$12[rsp]
	cmp	QWORD PTR i$11[rsp], rax
	jae	$LN6@test_int32

; 85   : 		{
; 86   : 			glm::bvec1 Result = glm::isPowerOfTwo(glm::ivec1(Data[i].Value));

	mov	rax, QWORD PTR i$11[rsp]
	mov	edx, DWORD PTR Data$[rsp+rax*8]
	lea	rcx, QWORD PTR $T23[rsp]
	call	??0?$tvec1@H$0A@@glm@@QEAA@H@Z		; glm::tvec1<int,0>::tvec1<int,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR Result$13[rsp]
	call	??$isPowerOfTwo@H$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@H$0A@@0@@Z ; glm::isPowerOfTwo<int,0,glm::tvec1>

; 87   : 			Error += glm::all(glm::equal(glm::bvec1(Data[i].Return), Result)) ? 0 : 1;

	mov	rax, QWORD PTR i$11[rsp]
	movzx	edx, BYTE PTR Data$[rsp+rax*8+4]
	lea	rcx, QWORD PTR $T24[rsp]
	call	??0?$tvec1@_N$0A@@glm@@QEAA@_N@Z	; glm::tvec1<bool,0>::tvec1<bool,0>
	lea	r8, QWORD PTR Result$13[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T25[rsp]
	call	??$equal@_N$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU10@0@Z ; glm::equal<bool,0,glm::tvec1>
	mov	rcx, rax
	call	??$all@$0A@Utvec1@glm@@@glm@@YA_NAEBU?$tvec1@_N$0A@@0@@Z ; glm::all<0,glm::tvec1>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN20@test_int32
	mov	DWORD PTR tv167[rsp], 0
	jmp	SHORT $LN21@test_int32
$LN20@test_int32:
	mov	DWORD PTR tv167[rsp], 1
$LN21@test_int32:
	mov	eax, DWORD PTR tv167[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 88   : 		}

	jmp	$LN5@test_int32
$LN6@test_int32:

; 89   : 
; 90   : 		for(std::size_t i = 0, n = sizeof(Data) / sizeof(type<int>); i < n; ++i)

	mov	QWORD PTR i$14[rsp], 0
	mov	QWORD PTR n$15[rsp], 6
	jmp	SHORT $LN10@test_int32
$LN8@test_int32:
	mov	rax, QWORD PTR i$14[rsp]
	inc	rax
	mov	QWORD PTR i$14[rsp], rax
$LN10@test_int32:
	mov	rax, QWORD PTR n$15[rsp]
	cmp	QWORD PTR i$14[rsp], rax
	jae	$LN9@test_int32

; 91   : 		{
; 92   : 			glm::bvec2 Result = glm::isPowerOfTwo(glm::ivec2(Data[i].Value));

	mov	rax, QWORD PTR i$14[rsp]
	mov	edx, DWORD PTR Data$[rsp+rax*8]
	lea	rcx, QWORD PTR $T26[rsp]
	call	??0?$tvec2@H$0A@@glm@@QEAA@H@Z		; glm::tvec2<int,0>::tvec2<int,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR Result$16[rsp]
	call	??$isPowerOfTwo@H$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@H$0A@@0@@Z ; glm::isPowerOfTwo<int,0,glm::tvec2>

; 93   : 			Error += glm::all(glm::equal(glm::bvec2(Data[i].Return), Result)) ? 0 : 1;

	mov	rax, QWORD PTR i$14[rsp]
	movzx	edx, BYTE PTR Data$[rsp+rax*8+4]
	lea	rcx, QWORD PTR $T27[rsp]
	call	??0?$tvec2@_N$0A@@glm@@QEAA@_N@Z	; glm::tvec2<bool,0>::tvec2<bool,0>
	lea	r8, QWORD PTR Result$16[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T28[rsp]
	call	??$equal@_N$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU10@0@Z ; glm::equal<bool,0,glm::tvec2>
	mov	rcx, rax
	call	??$all@$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@_N$0A@@0@@Z ; glm::all<0,glm::tvec2>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN22@test_int32
	mov	DWORD PTR tv193[rsp], 0
	jmp	SHORT $LN23@test_int32
$LN22@test_int32:
	mov	DWORD PTR tv193[rsp], 1
$LN23@test_int32:
	mov	eax, DWORD PTR tv193[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 94   : 		}

	jmp	$LN8@test_int32
$LN9@test_int32:

; 95   : 
; 96   : 		for(std::size_t i = 0, n = sizeof(Data) / sizeof(type<int>); i < n; ++i)

	mov	QWORD PTR i$17[rsp], 0
	mov	QWORD PTR n$18[rsp], 6
	jmp	SHORT $LN13@test_int32
$LN11@test_int32:
	mov	rax, QWORD PTR i$17[rsp]
	inc	rax
	mov	QWORD PTR i$17[rsp], rax
$LN13@test_int32:
	mov	rax, QWORD PTR n$18[rsp]
	cmp	QWORD PTR i$17[rsp], rax
	jae	$LN12@test_int32

; 97   : 		{
; 98   : 			glm::bvec3 Result = glm::isPowerOfTwo(glm::ivec3(Data[i].Value));

	mov	rax, QWORD PTR i$17[rsp]
	mov	edx, DWORD PTR Data$[rsp+rax*8]
	lea	rcx, QWORD PTR $T29[rsp]
	call	??0?$tvec3@H$0A@@glm@@QEAA@H@Z		; glm::tvec3<int,0>::tvec3<int,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR Result$19[rsp]
	call	??$isPowerOfTwo@H$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@H$0A@@0@@Z ; glm::isPowerOfTwo<int,0,glm::tvec3>

; 99   : 			Error += glm::all(glm::equal(glm::bvec3(Data[i].Return), Result)) ? 0 : 1;

	mov	rax, QWORD PTR i$17[rsp]
	movzx	edx, BYTE PTR Data$[rsp+rax*8+4]
	lea	rcx, QWORD PTR $T30[rsp]
	call	??0?$tvec3@_N$0A@@glm@@QEAA@_N@Z	; glm::tvec3<bool,0>::tvec3<bool,0>
	lea	r8, QWORD PTR Result$19[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T31[rsp]
	call	??$equal@_N$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU10@0@Z ; glm::equal<bool,0,glm::tvec3>
	mov	rcx, rax
	call	??$all@$0A@Utvec3@glm@@@glm@@YA_NAEBU?$tvec3@_N$0A@@0@@Z ; glm::all<0,glm::tvec3>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN24@test_int32
	mov	DWORD PTR tv219[rsp], 0
	jmp	SHORT $LN25@test_int32
$LN24@test_int32:
	mov	DWORD PTR tv219[rsp], 1
$LN25@test_int32:
	mov	eax, DWORD PTR tv219[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 100  : 		}

	jmp	$LN11@test_int32
$LN12@test_int32:

; 101  : 
; 102  : 		for(std::size_t i = 0, n = sizeof(Data) / sizeof(type<int>); i < n; ++i)

	mov	QWORD PTR i$20[rsp], 0
	mov	QWORD PTR n$21[rsp], 6
	jmp	SHORT $LN16@test_int32
$LN14@test_int32:
	mov	rax, QWORD PTR i$20[rsp]
	inc	rax
	mov	QWORD PTR i$20[rsp], rax
$LN16@test_int32:
	mov	rax, QWORD PTR n$21[rsp]
	cmp	QWORD PTR i$20[rsp], rax
	jae	$LN15@test_int32

; 103  : 		{
; 104  : 			glm::bvec4 Result = glm::isPowerOfTwo(glm::ivec4(Data[i].Value));

	mov	rax, QWORD PTR i$20[rsp]
	mov	edx, DWORD PTR Data$[rsp+rax*8]
	lea	rcx, QWORD PTR $T32[rsp]
	call	??0?$tvec4@H$0A@@glm@@QEAA@H@Z		; glm::tvec4<int,0>::tvec4<int,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR Result$22[rsp]
	call	??$isPowerOfTwo@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@H$0A@@0@@Z ; glm::isPowerOfTwo<int,0,glm::tvec4>

; 105  : 			Error += glm::all(glm::equal(glm::bvec4(Data[i].Return), Result)) ? 0 : 1;

	mov	rax, QWORD PTR i$20[rsp]
	movzx	edx, BYTE PTR Data$[rsp+rax*8+4]
	lea	rcx, QWORD PTR $T33[rsp]
	call	??0?$tvec4@_N$0A@@glm@@QEAA@_N@Z	; glm::tvec4<bool,0>::tvec4<bool,0>
	lea	r8, QWORD PTR Result$22[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T34[rsp]
	call	??$equal@_N$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU10@0@Z ; glm::equal<bool,0,glm::tvec4>
	mov	rcx, rax
	call	??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::all<0,glm::tvec4>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN26@test_int32
	mov	DWORD PTR tv245[rsp], 0
	jmp	SHORT $LN27@test_int32
$LN26@test_int32:
	mov	DWORD PTR tv245[rsp], 1
$LN27@test_int32:
	mov	eax, DWORD PTR tv245[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 106  : 		}

	jmp	$LN14@test_int32
$LN15@test_int32:

; 107  : 
; 108  : 		return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 109  : 	}

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?test_int32@isPowerOfTwo@@YAHXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 416				; 000001a0H
	pop	rdi
	ret	0
?test_int32@isPowerOfTwo@@YAHXZ ENDP			; isPowerOfTwo::test_int32
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\s4002675\Downloads\glm-0.9.8.5\glm\glm\gtc\round.inl
;	COMDAT ??$isPowerOfTwo@G@glm@@YA_NG@Z
_TEXT	SEGMENT
Result$ = 32
tv71 = 36
Value$ = 64
??$isPowerOfTwo@G@glm@@YA_NG@Z PROC			; glm::isPowerOfTwo<unsigned short>, COMDAT

; 217  : 	{

$LN5:
	mov	WORD PTR [rsp+8], cx
	push	rdi
	sub	rsp, 48					; 00000030H

; 218  : 		genType const Result = glm::abs(Value);

	movzx	ecx, WORD PTR Value$[rsp]
	call	??$abs@G@glm@@YAGG@Z			; glm::abs<unsigned short>
	mov	WORD PTR Result$[rsp], ax

; 219  : 		return !(Result & (Result - 1));

	movzx	eax, WORD PTR Result$[rsp]
	movzx	ecx, WORD PTR Result$[rsp]
	dec	ecx
	and	eax, ecx
	test	eax, eax
	jne	SHORT $LN3@isPowerOfT
	mov	DWORD PTR tv71[rsp], 1
	jmp	SHORT $LN4@isPowerOfT
$LN3@isPowerOfT:
	mov	DWORD PTR tv71[rsp], 0
$LN4@isPowerOfT:
	movzx	eax, BYTE PTR tv71[rsp]

; 220  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$isPowerOfTwo@G@glm@@YA_NG@Z ENDP			; glm::isPowerOfTwo<unsigned short>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\s4002675\Downloads\glm-0.9.8.5\glm\test\gtc\gtc_round.cpp
_TEXT	SEGMENT
Data$ = 40
Error$ = 68
i$4 = 72
n$5 = 80
Result$6 = 88
tv77 = 104
__$ArrayPad$ = 112
?test_uint16@isPowerOfTwo@@YAHXZ PROC			; isPowerOfTwo::test_uint16

; 42   : 	{

$LN8:
	push	rdi
	sub	rsp, 128				; 00000080H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 24
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 43   : 		type<glm::uint16> const Data[] =
; 44   : 		{
; 45   : 			{0x0001, true},

	mov	eax, 1
	mov	WORD PTR Data$[rsp], ax
	mov	BYTE PTR Data$[rsp+2], 1

; 46   : 			{0x0002, true},

	mov	eax, 2
	mov	WORD PTR Data$[rsp+4], ax
	mov	BYTE PTR Data$[rsp+6], 1

; 47   : 			{0x0004, true},

	mov	eax, 4
	mov	WORD PTR Data$[rsp+8], ax
	mov	BYTE PTR Data$[rsp+10], 1

; 48   : 			{0x0000, true},

	xor	eax, eax
	mov	WORD PTR Data$[rsp+12], ax
	mov	BYTE PTR Data$[rsp+14], 1

; 49   : 			{0x0000, true},

	xor	eax, eax
	mov	WORD PTR Data$[rsp+16], ax
	mov	BYTE PTR Data$[rsp+18], 1

; 50   : 			{0x0003, false}

	mov	eax, 3
	mov	WORD PTR Data$[rsp+20], ax
	mov	BYTE PTR Data$[rsp+22], 0

; 51   : 		};
; 52   : 
; 53   : 		int Error(0);

	mov	DWORD PTR Error$[rsp], 0

; 54   : 
; 55   : 		for(std::size_t i = 0, n = sizeof(Data) / sizeof(type<glm::uint16>); i < n; ++i)

	mov	QWORD PTR i$4[rsp], 0
	mov	QWORD PTR n$5[rsp], 6
	jmp	SHORT $LN4@test_uint1
$LN2@test_uint1:
	mov	rax, QWORD PTR i$4[rsp]
	inc	rax
	mov	QWORD PTR i$4[rsp], rax
$LN4@test_uint1:
	mov	rax, QWORD PTR n$5[rsp]
	cmp	QWORD PTR i$4[rsp], rax
	jae	SHORT $LN3@test_uint1

; 56   : 		{
; 57   : 			bool Result = glm::isPowerOfTwo(Data[i].Value);

	mov	rax, QWORD PTR i$4[rsp]
	movzx	ecx, WORD PTR Data$[rsp+rax*4]
	call	??$isPowerOfTwo@G@glm@@YA_NG@Z		; glm::isPowerOfTwo<unsigned short>
	mov	BYTE PTR Result$6[rsp], al

; 58   : 			Error += Data[i].Return == Result ? 0 : 1;

	mov	rax, QWORD PTR i$4[rsp]
	movzx	eax, BYTE PTR Data$[rsp+rax*4+2]
	movzx	ecx, BYTE PTR Result$6[rsp]
	cmp	eax, ecx
	jne	SHORT $LN6@test_uint1
	mov	DWORD PTR tv77[rsp], 0
	jmp	SHORT $LN7@test_uint1
$LN6@test_uint1:
	mov	DWORD PTR tv77[rsp], 1
$LN7@test_uint1:
	mov	eax, DWORD PTR tv77[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 59   : 		}

	jmp	SHORT $LN2@test_uint1
$LN3@test_uint1:

; 60   : 
; 61   : 		return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 62   : 	}

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?test_uint16@isPowerOfTwo@@YAHXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 128				; 00000080H
	pop	rdi
	ret	0
?test_uint16@isPowerOfTwo@@YAHXZ ENDP			; isPowerOfTwo::test_uint16
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\s4002675\Downloads\glm-0.9.8.5\glm\glm\gtc\round.inl
;	COMDAT ??$isPowerOfTwo@F@glm@@YA_NF@Z
_TEXT	SEGMENT
Result$ = 32
tv71 = 36
Value$ = 64
??$isPowerOfTwo@F@glm@@YA_NF@Z PROC			; glm::isPowerOfTwo<short>, COMDAT

; 217  : 	{

$LN5:
	mov	WORD PTR [rsp+8], cx
	push	rdi
	sub	rsp, 48					; 00000030H

; 218  : 		genType const Result = glm::abs(Value);

	movzx	ecx, WORD PTR Value$[rsp]
	call	??$abs@F@glm@@YAFF@Z			; glm::abs<short>
	mov	WORD PTR Result$[rsp], ax

; 219  : 		return !(Result & (Result - 1));

	movsx	eax, WORD PTR Result$[rsp]
	movsx	ecx, WORD PTR Result$[rsp]
	dec	ecx
	and	eax, ecx
	test	eax, eax
	jne	SHORT $LN3@isPowerOfT
	mov	DWORD PTR tv71[rsp], 1
	jmp	SHORT $LN4@isPowerOfT
$LN3@isPowerOfT:
	mov	DWORD PTR tv71[rsp], 0
$LN4@isPowerOfT:
	movzx	eax, BYTE PTR tv71[rsp]

; 220  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$isPowerOfTwo@F@glm@@YA_NF@Z ENDP			; glm::isPowerOfTwo<short>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\s4002675\Downloads\glm-0.9.8.5\glm\test\gtc\gtc_round.cpp
_TEXT	SEGMENT
Data$ = 40
Error$ = 68
i$4 = 72
n$5 = 80
Result$6 = 88
tv77 = 104
__$ArrayPad$ = 112
?test_int16@isPowerOfTwo@@YAHXZ PROC			; isPowerOfTwo::test_int16

; 19   : 	{

$LN8:
	push	rdi
	sub	rsp, 128				; 00000080H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 24
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 20   : 		type<glm::int16> const Data[] =
; 21   : 		{
; 22   : 			{0x0001, true},

	mov	eax, 1
	mov	WORD PTR Data$[rsp], ax
	mov	BYTE PTR Data$[rsp+2], 1

; 23   : 			{0x0002, true},

	mov	eax, 2
	mov	WORD PTR Data$[rsp+4], ax
	mov	BYTE PTR Data$[rsp+6], 1

; 24   : 			{0x0004, true},

	mov	eax, 4
	mov	WORD PTR Data$[rsp+8], ax
	mov	BYTE PTR Data$[rsp+10], 1

; 25   : 			{0x0080, true},

	mov	eax, 128				; 00000080H
	mov	WORD PTR Data$[rsp+12], ax
	mov	BYTE PTR Data$[rsp+14], 1

; 26   : 			{0x0000, true},

	xor	eax, eax
	mov	WORD PTR Data$[rsp+16], ax
	mov	BYTE PTR Data$[rsp+18], 1

; 27   : 			{0x0003, false}

	mov	eax, 3
	mov	WORD PTR Data$[rsp+20], ax
	mov	BYTE PTR Data$[rsp+22], 0

; 28   : 		};
; 29   : 
; 30   : 		int Error(0);

	mov	DWORD PTR Error$[rsp], 0

; 31   : 
; 32   : 		for(std::size_t i = 0, n = sizeof(Data) / sizeof(type<glm::int16>); i < n; ++i)

	mov	QWORD PTR i$4[rsp], 0
	mov	QWORD PTR n$5[rsp], 6
	jmp	SHORT $LN4@test_int16
$LN2@test_int16:
	mov	rax, QWORD PTR i$4[rsp]
	inc	rax
	mov	QWORD PTR i$4[rsp], rax
$LN4@test_int16:
	mov	rax, QWORD PTR n$5[rsp]
	cmp	QWORD PTR i$4[rsp], rax
	jae	SHORT $LN3@test_int16

; 33   : 		{
; 34   : 			bool Result = glm::isPowerOfTwo(Data[i].Value);

	mov	rax, QWORD PTR i$4[rsp]
	movzx	ecx, WORD PTR Data$[rsp+rax*4]
	call	??$isPowerOfTwo@F@glm@@YA_NF@Z		; glm::isPowerOfTwo<short>
	mov	BYTE PTR Result$6[rsp], al

; 35   : 			Error += Data[i].Return == Result ? 0 : 1;

	mov	rax, QWORD PTR i$4[rsp]
	movzx	eax, BYTE PTR Data$[rsp+rax*4+2]
	movzx	ecx, BYTE PTR Result$6[rsp]
	cmp	eax, ecx
	jne	SHORT $LN6@test_int16
	mov	DWORD PTR tv77[rsp], 0
	jmp	SHORT $LN7@test_int16
$LN6@test_int16:
	mov	DWORD PTR tv77[rsp], 1
$LN7@test_int16:
	mov	eax, DWORD PTR tv77[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 36   : 		}

	jmp	SHORT $LN2@test_int16
$LN3@test_int16:

; 37   : 
; 38   : 		return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 39   : 	}

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?test_int16@isPowerOfTwo@@YAHXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 128				; 00000080H
	pop	rdi
	ret	0
?test_int16@isPowerOfTwo@@YAHXZ ENDP			; isPowerOfTwo::test_int16
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xmemory
;	COMDAT ?_Orphan_all_locked@_Container_base12@std@@AEAAXXZ
_TEXT	SEGMENT
_Lock$ = 36
this$ = 80
?_Orphan_all_locked@_Container_base12@std@@AEAAXXZ PROC	; std::_Container_base12::_Orphan_all_locked, COMDAT

; 1095 :     void _Orphan_all_locked() noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 8
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+80]

; 1096 :         _Lockit _Lock(_LOCK_DEBUG);

	mov	edx, 3
	lea	rcx, QWORD PTR _Lock$[rsp]
	call	QWORD PTR __imp_??0_Lockit@std@@QEAA@H@Z

; 1097 :         _Orphan_all_unlocked();

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Orphan_all_unlocked@_Container_base12@std@@AEAAXXZ ; std::_Container_base12::_Orphan_all_unlocked

; 1098 :     }

	lea	rcx, QWORD PTR _Lock$[rsp]
	call	QWORD PTR __imp_??1_Lockit@std@@QEAA@XZ
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?_Orphan_all_locked@_Container_base12@std@@AEAAXXZ$rtcFrameData
	call	_RTC_CheckStackVars
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?_Orphan_all_locked@_Container_base12@std@@AEAAXXZ ENDP	; std::_Container_base12::_Orphan_all_locked
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xmemory
;	COMDAT ?_Orphan_all_unlocked@_Container_base12@std@@AEAAXXZ
_TEXT	SEGMENT
_Pnext$1 = 0
this$ = 32
?_Orphan_all_unlocked@_Container_base12@std@@AEAAXXZ PROC ; std::_Container_base12::_Orphan_all_unlocked, COMDAT

; 1220 : _CONSTEXPR20_CONTAINER void _Container_base12::_Orphan_all_unlocked() noexcept {

$LN6:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 16

; 1221 :     for (auto& _Pnext = _Myproxy->_Myfirstiter; _Pnext; _Pnext = _Pnext->_Mynextiter) { // TRANSITION, VSO-1269037

	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax]
	add	rax, 8
	mov	QWORD PTR _Pnext$1[rsp], rax
	jmp	SHORT $LN4@Orphan_all
$LN2@Orphan_all:
	mov	rax, QWORD PTR _Pnext$1[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR _Pnext$1[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR [rcx], rax
$LN4@Orphan_all:
	mov	rax, QWORD PTR _Pnext$1[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN3@Orphan_all

; 1222 :         _Pnext->_Myproxy = nullptr;

	mov	rax, QWORD PTR _Pnext$1[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR [rax], 0

; 1223 :     }

	jmp	SHORT $LN2@Orphan_all
$LN3@Orphan_all:

; 1224 :     _Myproxy->_Myfirstiter = nullptr;

	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR [rax+8], 0

; 1225 : }

	add	rsp, 16
	pop	rdi
	ret	0
?_Orphan_all_unlocked@_Container_base12@std@@AEAAXXZ ENDP ; std::_Container_base12::_Orphan_all_unlocked
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xmemory
;	COMDAT ?_Orphan_all@_Container_base12@std@@QEAAXXZ
_TEXT	SEGMENT
this$ = 48
?_Orphan_all@_Container_base12@std@@QEAAXXZ PROC	; std::_Container_base12::_Orphan_all, COMDAT

; 1227 : _CONSTEXPR20_CONTAINER void _Container_base12::_Orphan_all() noexcept {

$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 1228 : #if _ITERATOR_DEBUG_LEVEL == 2
; 1229 :     if (_Myproxy) { // proxy allocated, drain it

	mov	rax, QWORD PTR this$[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN2@Orphan_all

; 1230 : #ifdef __cpp_lib_constexpr_dynamic_alloc
; 1231 :         if (_STD is_constant_evaluated()) {
; 1232 :             _Orphan_all_unlocked();
; 1233 :         } else
; 1234 : #endif // __cpp_lib_constexpr_dynamic_alloc
; 1235 :         {
; 1236 :             _Orphan_all_locked();

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Orphan_all_locked@_Container_base12@std@@AEAAXXZ ; std::_Container_base12::_Orphan_all_locked
$LN2@Orphan_all:

; 1237 :         }
; 1238 :     }
; 1239 : #endif // _ITERATOR_DEBUG_LEVEL == 2
; 1240 : }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?_Orphan_all@_Container_base12@std@@QEAAXXZ ENDP	; std::_Container_base12::_Orphan_all
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xmemory
;	COMDAT ??0_Container_base12@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 16
??0_Container_base12@std@@QEAA@XZ PROC			; std::_Container_base12::_Container_base12, COMDAT

; 1064 :     _CONSTEXPR20_CONTAINER _Container_base12() noexcept = default;

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1065 : 
; 1066 :     _Container_base12(const _Container_base12&) = delete;
; 1067 :     _Container_base12& operator=(const _Container_base12&) = delete;
; 1068 : 
; 1069 :     _CONSTEXPR20_CONTAINER void _Orphan_all() noexcept;
; 1070 :     _CONSTEXPR20_CONTAINER void _Swap_proxy_and_iterators(_Container_base12&) noexcept;
; 1071 : 
; 1072 :     template <class _Alloc>
; 1073 :     _CONSTEXPR20_CONTAINER void _Alloc_proxy(_Alloc&& _Al) {
; 1074 :         _Container_proxy* const _New_proxy = _Unfancy(_Al.allocate(1));
; 1075 :         _Construct_in_place(*_New_proxy, this);
; 1076 :         _Myproxy            = _New_proxy;
; 1077 :         _New_proxy->_Mycont = this;
; 1078 :     }
; 1079 : 
; 1080 :     template <class _Alloc>
; 1081 :     _CONSTEXPR20_CONTAINER void _Reload_proxy(_Alloc&& _Old_alloc, _Alloc&& _New_alloc) {
; 1082 :         // pre: no iterators refer to the existing proxy
; 1083 :         _Container_proxy* const _New_proxy = _Unfancy(_New_alloc.allocate(1));
; 1084 :         _Construct_in_place(*_New_proxy, this);
; 1085 :         _New_proxy->_Mycont = this;
; 1086 :         _Delete_plain_internal(_Old_alloc, _STD exchange(_Myproxy, _New_proxy));
; 1087 :     }
; 1088 : 
; 1089 :     _Container_proxy* _Myproxy = nullptr;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR [rax], 0

; 1064 :     _CONSTEXPR20_CONTAINER _Container_base12() noexcept = default;

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0_Container_base12@std@@QEAA@XZ ENDP			; std::_Container_base12::_Container_base12
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xmemory
;	COMDAT ??0_Container_proxy@std@@QEAA@PEAU_Container_base12@1@@Z
_TEXT	SEGMENT
this$ = 16
_Mycont_$ = 24
??0_Container_proxy@std@@QEAA@PEAU_Container_base12@1@@Z PROC ; std::_Container_proxy::_Container_proxy, COMDAT

; 1056 :     _CONSTEXPR20_CONTAINER _Container_proxy(_Container_base12* _Mycont_) noexcept : _Mycont(_Mycont_) {}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR _Mycont_$[rsp]
	mov	QWORD PTR [rax], rcx

; 1057 : 
; 1058 :     const _Container_base12* _Mycont       = nullptr;
; 1059 :     mutable _Iterator_base12* _Myfirstiter = nullptr;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR [rax+8], 0

; 1056 :     _CONSTEXPR20_CONTAINER _Container_proxy(_Container_base12* _Mycont_) noexcept : _Mycont(_Mycont_) {}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0_Container_proxy@std@@QEAA@PEAU_Container_base12@1@@Z ENDP ; std::_Container_proxy::_Container_proxy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xmemory
;	COMDAT ?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z
_TEXT	SEGMENT
_Ptr_user$ = 48
_Ptr_container$ = 56
_Min_back_shift$ = 64
_Back_shift$ = 72
_Ptr$ = 96
_Bytes$ = 104
?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z PROC ; std::_Adjust_manually_vector_aligned, COMDAT

; 153  : inline void _Adjust_manually_vector_aligned(void*& _Ptr, size_t& _Bytes) {

$LN21:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H

; 154  :     // adjust parameters from _Allocate_manually_vector_aligned to pass to operator delete
; 155  :     _Bytes += _Non_user_size;

	mov	rax, QWORD PTR _Bytes$[rsp]
	mov	rax, QWORD PTR [rax]
	add	rax, 47					; 0000002fH
	mov	rcx, QWORD PTR _Bytes$[rsp]
	mov	QWORD PTR [rcx], rax

; 156  : 
; 157  :     const uintptr_t* const _Ptr_user = reinterpret_cast<uintptr_t*>(_Ptr);

	mov	rax, QWORD PTR _Ptr$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR _Ptr_user$[rsp], rax

; 158  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

	mov	eax, 8
	imul	rax, rax, -1
	mov	rcx, QWORD PTR _Ptr_user$[rsp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	QWORD PTR _Ptr_container$[rsp], rax
$LN4@Adjust_man:

; 159  : 
; 160  :     // If the following asserts, it likely means that we are performing
; 161  :     // an aligned delete on memory coming from an unaligned allocation.
; 162  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");

	mov	eax, 8
	imul	rax, rax, -2
	mov	rcx, QWORD PTR _Ptr_user$[rsp]
	mov	rdx, -361700864190383366		; fafafafafafafafaH
	cmp	QWORD PTR [rcx+rax], rdx
	jne	SHORT $LN14@Adjust_man
	jmp	SHORT $LN15@Adjust_man
$LN14@Adjust_man:
$LN7@Adjust_man:
	lea	rax, OFFSET FLAT:??_C@_0BB@FCMFBGOM@invalid?5argument@
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:??_C@_02DKCKIIND@?$CFs@
	mov	QWORD PTR [rsp+32], rax
	xor	r9d, r9d
	mov	r8d, 162				; 000000a2H
	lea	rdx, OFFSET FLAT:??_C@_0GI@KDIDHNIL@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
	mov	ecx, 2
	call	QWORD PTR __imp__CrtDbgReport
	cmp	eax, 1
	jne	SHORT $LN19@Adjust_man
	int	3
	xor	eax, eax
$LN19@Adjust_man:
	mov	QWORD PTR [rsp+32], 0
	mov	r9d, 162				; 000000a2H
	lea	r8, OFFSET FLAT:??_C@_1NA@FOAKNOEL@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
	lea	rdx, OFFSET FLAT:??_C@_1EK@NIFDJFDG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAd?$AAj?$AAu?$AAs?$AAt?$AA_?$AAm?$AAa@
	lea	rcx, OFFSET FLAT:??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@
	call	QWORD PTR __imp__invalid_parameter
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN7@Adjust_man
$LN15@Adjust_man:
	xor	eax, eax
	test	eax, eax
	jne	$LN4@Adjust_man

; 163  : 
; 164  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 165  :     // in range [_Min_back_shift, _Non_user_size]
; 166  : #ifdef _DEBUG
; 167  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);

	mov	QWORD PTR _Min_back_shift$[rsp], 16

; 168  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 169  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 170  : #endif // _DEBUG
; 171  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

	mov	rax, QWORD PTR _Ptr$[rsp]
	mov	rcx, QWORD PTR _Ptr_container$[rsp]
	mov	rax, QWORD PTR [rax]
	sub	rax, rcx
	mov	QWORD PTR _Back_shift$[rsp], rax
$LN10@Adjust_man:

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

	cmp	QWORD PTR _Back_shift$[rsp], 16
	jb	SHORT $LN16@Adjust_man
	cmp	QWORD PTR _Back_shift$[rsp], 47		; 0000002fH
	ja	SHORT $LN16@Adjust_man
	jmp	SHORT $LN17@Adjust_man
$LN16@Adjust_man:
$LN13@Adjust_man:
	lea	rax, OFFSET FLAT:??_C@_0BB@FCMFBGOM@invalid?5argument@
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:??_C@_02DKCKIIND@?$CFs@
	mov	QWORD PTR [rsp+32], rax
	xor	r9d, r9d
	mov	r8d, 172				; 000000acH
	lea	rdx, OFFSET FLAT:??_C@_0GI@KDIDHNIL@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
	mov	ecx, 2
	call	QWORD PTR __imp__CrtDbgReport
	cmp	eax, 1
	jne	SHORT $LN20@Adjust_man
	int	3
	xor	eax, eax
$LN20@Adjust_man:
	mov	QWORD PTR [rsp+32], 0
	mov	r9d, 172				; 000000acH
	lea	r8, OFFSET FLAT:??_C@_1NA@FOAKNOEL@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
	lea	rdx, OFFSET FLAT:??_C@_1EK@NIFDJFDG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAd?$AAj?$AAu?$AAs?$AAt?$AA_?$AAm?$AAa@
	lea	rcx, OFFSET FLAT:??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@
	call	QWORD PTR __imp__invalid_parameter
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN13@Adjust_man
$LN17@Adjust_man:
	xor	eax, eax
	test	eax, eax
	jne	$LN10@Adjust_man

; 173  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

	mov	rax, QWORD PTR _Ptr$[rsp]
	mov	rcx, QWORD PTR _Ptr_container$[rsp]
	mov	QWORD PTR [rax], rcx

; 174  : }

	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z ENDP ; std::_Adjust_manually_vector_aligned
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xmemory
;	COMDAT ?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z
_TEXT	SEGMENT
_Bytes$ = 48
?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z PROC ; std::_Default_allocate_traits::_Allocate, COMDAT

; 84   :         void* _Allocate(const size_t _Bytes) {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 85   :         return ::operator new(_Bytes);

	mov	rcx, QWORD PTR _Bytes$[rsp]
	call	??2@YAPEAX_K@Z				; operator new

; 86   :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z ENDP ; std::_Default_allocate_traits::_Allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\exception
;	COMDAT ?_Throw_bad_array_new_length@std@@YAXXZ
_TEXT	SEGMENT
$T1 = 32
?_Throw_bad_array_new_length@std@@YAXXZ PROC		; std::_Throw_bad_array_new_length, COMDAT

; 320  : [[noreturn]] inline void _Throw_bad_array_new_length() {

$LN3:
	push	rdi
	sub	rsp, 64					; 00000040H

; 321  :     _THROW(bad_array_new_length{});

	lea	rcx, QWORD PTR $T1[rsp]
	call	??0bad_array_new_length@std@@QEAA@XZ	; std::bad_array_new_length::bad_array_new_length
	lea	rdx, OFFSET FLAT:_TI3?AVbad_array_new_length@std@@
	lea	rcx, QWORD PTR $T1[rsp]
	call	_CxxThrowException
$LN2@Throw_bad_:

; 322  : }

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?_Throw_bad_array_new_length@std@@YAXXZ ENDP		; std::_Throw_bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_Gbad_array_new_length@std@@UEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 48
__flags$ = 56
??_Gbad_array_new_length@std@@UEAAPEAXI@Z PROC		; std::bad_array_new_length::`scalar deleting destructor', COMDAT
$LN4:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rcx, QWORD PTR this$[rsp]
	call	??1bad_array_new_length@std@@UEAA@XZ
	mov	eax, DWORD PTR __flags$[rsp]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN2@scalar
	mov	edx, 24
	mov	rcx, QWORD PTR this$[rsp]
	call	??3@YAXPEAX_K@Z				; operator delete
$LN2@scalar:
	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??_Gbad_array_new_length@std@@UEAAPEAXI@Z ENDP		; std::bad_array_new_length::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0bad_array_new_length@std@@QEAA@AEBV01@@Z
_TEXT	SEGMENT
this$ = 48
__that$ = 56
??0bad_array_new_length@std@@QEAA@AEBV01@@Z PROC	; std::bad_array_new_length::bad_array_new_length, COMDAT
$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdx, QWORD PTR __that$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	??0bad_alloc@std@@QEAA@AEBV01@@Z
	mov	rax, QWORD PTR this$[rsp]
	lea	rcx, OFFSET FLAT:??_7bad_array_new_length@std@@6B@
	mov	QWORD PTR [rax], rcx
	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??0bad_array_new_length@std@@QEAA@AEBV01@@Z ENDP	; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1bad_array_new_length@std@@UEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1bad_array_new_length@std@@UEAA@XZ PROC		; std::bad_array_new_length::~bad_array_new_length, COMDAT
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rcx, QWORD PTR this$[rsp]
	call	??1bad_alloc@std@@UEAA@XZ
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??1bad_array_new_length@std@@UEAA@XZ ENDP		; std::bad_array_new_length::~bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??0bad_array_new_length@std@@QEAA@XZ PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT

; 141  :     {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 140  :         : bad_alloc("bad array new length")

	lea	rdx, OFFSET FLAT:??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
	mov	rcx, QWORD PTR this$[rsp]
	call	??0bad_alloc@std@@AEAA@QEBD@Z		; std::bad_alloc::bad_alloc

; 141  :     {

	mov	rax, QWORD PTR this$[rsp]
	lea	rcx, OFFSET FLAT:??_7bad_array_new_length@std@@6B@
	mov	QWORD PTR [rax], rcx

; 142  :     }

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??0bad_array_new_length@std@@QEAA@XZ ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_Gbad_alloc@std@@UEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 48
__flags$ = 56
??_Gbad_alloc@std@@UEAAPEAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
$LN4:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rcx, QWORD PTR this$[rsp]
	call	??1bad_alloc@std@@UEAA@XZ
	mov	eax, DWORD PTR __flags$[rsp]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN2@scalar
	mov	edx, 24
	mov	rcx, QWORD PTR this$[rsp]
	call	??3@YAXPEAX_K@Z				; operator delete
$LN2@scalar:
	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??_Gbad_alloc@std@@UEAAPEAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0bad_alloc@std@@QEAA@AEBV01@@Z
_TEXT	SEGMENT
this$ = 48
__that$ = 56
??0bad_alloc@std@@QEAA@AEBV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdx, QWORD PTR __that$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	??0exception@std@@QEAA@AEBV01@@Z	; std::exception::exception
	mov	rax, QWORD PTR this$[rsp]
	lea	rcx, OFFSET FLAT:??_7bad_alloc@std@@6B@
	mov	QWORD PTR [rax], rcx
	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??0bad_alloc@std@@QEAA@AEBV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1bad_alloc@std@@UEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1bad_alloc@std@@UEAA@XZ PROC				; std::bad_alloc::~bad_alloc, COMDAT
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rcx, QWORD PTR this$[rsp]
	call	??1exception@std@@UEAA@XZ		; std::exception::~exception
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??1bad_alloc@std@@UEAA@XZ ENDP				; std::bad_alloc::~bad_alloc
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\vcruntime_exception.h
;	COMDAT ??0bad_alloc@std@@AEAA@QEBD@Z
_TEXT	SEGMENT
this$ = 48
_Message$ = 56
??0bad_alloc@std@@AEAA@QEBD@Z PROC			; std::bad_alloc::bad_alloc, COMDAT

; 130  :     {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 129  :         : exception(_Message, 1)

	mov	r8d, 1
	mov	rdx, QWORD PTR _Message$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	??0exception@std@@QEAA@QEBDH@Z		; std::exception::exception

; 130  :     {

	mov	rax, QWORD PTR this$[rsp]
	lea	rcx, OFFSET FLAT:??_7bad_alloc@std@@6B@
	mov	QWORD PTR [rax], rcx

; 131  :     }

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??0bad_alloc@std@@AEAA@QEBD@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_Gexception@std@@UEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 48
__flags$ = 56
??_Gexception@std@@UEAAPEAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
$LN4:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rcx, QWORD PTR this$[rsp]
	call	??1exception@std@@UEAA@XZ		; std::exception::~exception
	mov	eax, DWORD PTR __flags$[rsp]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN2@scalar
	mov	edx, 24
	mov	rcx, QWORD PTR this$[rsp]
	call	??3@YAXPEAX_K@Z				; operator delete
$LN2@scalar:
	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??_Gexception@std@@UEAAPEAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UEBAPEBDXZ
_TEXT	SEGMENT
tv69 = 0
this$ = 32
?what@exception@std@@UEBAPEBDXZ PROC			; std::exception::what, COMDAT

; 94   :     {

$LN5:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 16

; 95   :         return _Data._What ? _Data._What : "Unknown exception";

	mov	rax, QWORD PTR this$[rsp]
	cmp	QWORD PTR [rax+8], 0
	je	SHORT $LN3@what
	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR tv69[rsp], rax
	jmp	SHORT $LN4@what
$LN3@what:
	lea	rax, OFFSET FLAT:??_C@_0BC@EOODALEL@Unknown?5exception@
	mov	QWORD PTR tv69[rsp], rax
$LN4@what:
	mov	rax, QWORD PTR tv69[rsp]

; 96   :     }

	add	rsp, 16
	pop	rdi
	ret	0
?what@exception@std@@UEBAPEBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1exception@std@@UEAA@XZ PROC				; std::exception::~exception, COMDAT

; 89   :     {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rax, QWORD PTR this$[rsp]
	lea	rcx, OFFSET FLAT:??_7exception@std@@6B@
	mov	QWORD PTR [rax], rcx

; 90   :         __std_exception_destroy(&_Data);

	mov	rax, QWORD PTR this$[rsp]
	add	rax, 8
	mov	rcx, rax
	call	__std_exception_destroy

; 91   :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??1exception@std@@UEAA@XZ ENDP				; std::exception::~exception
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QEAA@AEBV01@@Z
_TEXT	SEGMENT
this$ = 48
_Other$ = 56
??0exception@std@@QEAA@AEBV01@@Z PROC			; std::exception::exception, COMDAT

; 72   :     {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rax, QWORD PTR this$[rsp]
	lea	rcx, OFFSET FLAT:??_7exception@std@@6B@
	mov	QWORD PTR [rax], rcx

; 71   :         : _Data()

	mov	rax, QWORD PTR this$[rsp]
	add	rax, 8
	mov	rdi, rax
	xor	eax, eax
	mov	ecx, 16
	rep stosb

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

	mov	rax, QWORD PTR this$[rsp]
	add	rax, 8
	mov	rcx, QWORD PTR _Other$[rsp]
	add	rcx, 8
	mov	rdx, rax
	call	__std_exception_copy

; 74   :     }

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??0exception@std@@QEAA@AEBV01@@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QEAA@QEBDH@Z
_TEXT	SEGMENT
this$ = 16
_Message$ = 24
__formal$ = 32
??0exception@std@@QEAA@QEBDH@Z PROC			; std::exception::exception, COMDAT

; 66   :     {

$LN3:
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	lea	rcx, OFFSET FLAT:??_7exception@std@@6B@
	mov	QWORD PTR [rax], rcx

; 65   :         : _Data()

	mov	rax, QWORD PTR this$[rsp]
	add	rax, 8
	mov	rdi, rax
	xor	eax, eax
	mov	ecx, 16
	rep stosb

; 67   :         _Data._What = _Message;

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR _Message$[rsp]
	mov	QWORD PTR [rax+8], rcx

; 68   :     }

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0exception@std@@QEAA@QEBDH@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\s4002675\Downloads\glm-0.9.8.5\glm\glm\detail\func_common.inl
;	COMDAT ??$abs@N@glm@@YANN@Z
_TEXT	SEGMENT
x$ = 64
??$abs@N@glm@@YANN@Z PROC				; glm::abs<double>, COMDAT

; 310  : 	{

$LN3:
	movsd	QWORD PTR [rsp+8], xmm0
	push	rdi
	sub	rsp, 48					; 00000030H

; 311  : 		return detail::compute_abs<genFIType, std::numeric_limits<genFIType>::is_signed>::call(x);

	movsd	xmm0, QWORD PTR x$[rsp]
	call	?call@?$compute_abs@N$00@detail@glm@@SANN@Z ; glm::detail::compute_abs<double,1>::call

; 312  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$abs@N@glm@@YANN@Z ENDP				; glm::abs<double>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\s4002675\Downloads\glm-0.9.8.5\glm\glm\gtc\epsilon.inl
;	COMDAT ??$epsilonEqual@N@glm@@YA_NAEBN00@Z
_TEXT	SEGMENT
tv68 = 32
x$ = 64
y$ = 72
epsilon$ = 80
??$epsilonEqual@N@glm@@YA_NAEBN00@Z PROC		; glm::epsilonEqual<double>, COMDAT

; 32   : 	{

$LN5:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 33   : 		return abs(x - y) < epsilon;

	mov	rax, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	movsd	xmm0, QWORD PTR [rax]
	subsd	xmm0, QWORD PTR [rcx]
	call	??$abs@N@glm@@YANN@Z			; glm::abs<double>
	mov	rax, QWORD PTR epsilon$[rsp]
	movsd	xmm1, QWORD PTR [rax]
	comisd	xmm1, xmm0
	jbe	SHORT $LN3@epsilonEqu
	mov	DWORD PTR tv68[rsp], 1
	jmp	SHORT $LN4@epsilonEqu
$LN3@epsilonEqu:
	mov	DWORD PTR tv68[rsp], 0
$LN4@epsilonEqu:
	movzx	eax, BYTE PTR tv68[rsp]

; 34   : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$epsilonEqual@N@glm@@YA_NAEBN00@Z ENDP		; glm::epsilonEqual<double>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\s4002675\Downloads\glm-0.9.8.5\glm\glm\detail\func_common.inl
;	COMDAT ??$abs@H@glm@@YAHH@Z
_TEXT	SEGMENT
y$ = 0
x$ = 32
??$abs@H@glm@@YAHH@Z PROC				; glm::abs<int>, COMDAT

; 33   : 	{

$LN3:
	mov	DWORD PTR [rsp+8], ecx
	push	rdi
	sub	rsp, 16

; 34   : 		int32 const y = x >> 31;

	mov	eax, DWORD PTR x$[rsp]
	sar	eax, 31
	mov	DWORD PTR y$[rsp], eax

; 35   : 		return (x ^ y) - y;

	mov	eax, DWORD PTR y$[rsp]
	mov	ecx, DWORD PTR x$[rsp]
	xor	ecx, eax
	mov	eax, ecx
	sub	eax, DWORD PTR y$[rsp]

; 36   : 	}

	add	rsp, 16
	pop	rdi
	ret	0
??$abs@H@glm@@YAHH@Z ENDP				; glm::abs<int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\vcruntime_new.h
;	COMDAT ??2@YAPEAX_KPEAX@Z
_TEXT	SEGMENT
_Size$ = 16
_Where$ = 24
??2@YAPEAX_KPEAX@Z PROC					; operator new, COMDAT

; 167  :     {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 168  :         (void)_Size;
; 169  :         return _Where;

	mov	rax, QWORD PTR _Where$[rsp]

; 170  :     }

	pop	rdi
	ret	0
??2@YAPEAX_KPEAX@Z ENDP					; operator new
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\limits
;	COMDAT ?max@?$numeric_limits@_J@std@@SA_JXZ
_TEXT	SEGMENT
?max@?$numeric_limits@_J@std@@SA_JXZ PROC		; std::numeric_limits<__int64>::max, COMDAT

; 647  :     _NODISCARD static constexpr long long(max)() noexcept {

$LN3:
	push	rdi

; 648  :         return LLONG_MAX;

	mov	rax, 9223372036854775807		; 7fffffffffffffffH

; 649  :     }

	pop	rdi
	ret	0
?max@?$numeric_limits@_J@std@@SA_JXZ ENDP		; std::numeric_limits<__int64>::max
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\ucrt\stdio.h
;	COMDAT printf
_TEXT	SEGMENT
_Result$ = 32
_ArgList$ = 56
_Format$ = 96
printf	PROC						; COMDAT

; 956  :     {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+32], r9
	push	rdi
	sub	rsp, 80					; 00000050H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+96]

; 957  :         int _Result;
; 958  :         va_list _ArgList;
; 959  :         __crt_va_start(_ArgList, _Format);

	lea	rax, QWORD PTR _Format$[rsp+8]
	mov	QWORD PTR _ArgList$[rsp], rax

; 960  :         _Result = _vfprintf_l(stdout, _Format, NULL, _ArgList);

	mov	ecx, 1
	call	QWORD PTR __imp___acrt_iob_func
	mov	r9, QWORD PTR _ArgList$[rsp]
	xor	r8d, r8d
	mov	rdx, QWORD PTR _Format$[rsp]
	mov	rcx, rax
	call	_vfprintf_l
	mov	DWORD PTR _Result$[rsp], eax

; 961  :         __crt_va_end(_ArgList);

	mov	QWORD PTR _ArgList$[rsp], 0

; 962  :         return _Result;

	mov	eax, DWORD PTR _Result$[rsp]

; 963  :     }

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:printf$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
printf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\ucrt\stdio.h
;	COMDAT _vfprintf_l
_TEXT	SEGMENT
_Stream$ = 64
_Format$ = 72
_Locale$ = 80
_ArgList$ = 88
_vfprintf_l PROC					; COMDAT

; 644  :     {

$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 645  :         return __stdio_common_vfprintf(_CRT_INTERNAL_LOCAL_PRINTF_OPTIONS, _Stream, _Format, _Locale, _ArgList);

	call	__local_stdio_printf_options
	mov	rcx, QWORD PTR _ArgList$[rsp]
	mov	QWORD PTR [rsp+32], rcx
	mov	r9, QWORD PTR _Locale$[rsp]
	mov	r8, QWORD PTR _Format$[rsp]
	mov	rdx, QWORD PTR _Stream$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	QWORD PTR __imp___stdio_common_vfprintf

; 646  :     }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
_vfprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\ucrt\corecrt_stdio_config.h
;	COMDAT __local_stdio_printf_options
_TEXT	SEGMENT
__local_stdio_printf_options PROC			; COMDAT

; 90   :     {

$LN3:
	push	rdi

; 91   :         static unsigned __int64 _OptionsStorage;
; 92   :         return &_OptionsStorage;

	lea	rax, OFFSET FLAT:?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 93   :     }

	pop	rdi
	ret	0
__local_stdio_printf_options ENDP
_TEXT	ENDS
END
